<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>GitLab on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/gitlab/</link><description>Recent content in GitLab on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 25 Nov 2018 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/gitlab/atom.xml" rel="self" type="application/rss+xml"/><item><title>如何使用 Jenkins、Docker、GitLab 搭建 Django 自动化部署流程</title><link>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 25 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</guid><description>大公司的程序员，容易产生的错觉之一就是，误将平台能力当作自己的能力。在大团队，我们不应仅关注自己的一亩三分地，更需要了解平台的各个环节。一方面，有助于更好地利用平台相关特性，另一方面，也为了自我技术更好地成长。本文，介绍了如何使用 Jekin</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>GitLab</category><category>Jenkins</category><category>Docker</category><category>DevOps</category></item><item><title>如何使用 python-gitlab 自动创建 GitLab Label</title><link>https://www.chenshaowen.com/blog/how-to-create-gitlab-label-using-python-gitlab.html</link><pubDate>Sun, 05 Aug 2018 10:00:00 +0000</pubDate><atom:modified>Sun, 05 Aug 2018 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-create-gitlab-label-using-python-gitlab.html</guid><description>利用 Gitlab issue 进行项目管理是一件对 Dev 十分友好的事。录入issue、发起 Merge Request、创建 milestone，这些都是开发过程中动态推进的。但，每个新项目都需要创建一堆 Label ，是件让人头疼的事。本文主要就是为了解决这个问题。 1. GitLab Label 在创建 GitLab Label 之前，我</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>项目管理</category><category>DevOps</category></item><item><title>常用的一些 CI 脚本</title><link>https://www.chenshaowen.com/blog/some-common-scripts-in-ci.html</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-common-scripts-in-ci.html</guid><description>由于负责小组的 CI 公共事项，经常需要配置 CI 流程，或者帮助其他人解决一些问题，整理了一下常用的 CI 脚本，以方便查阅。 1. .gitlab-ci.yml 结构 下面是， GitLab CI 的配置文件结构。 .gitlab-ci.yml 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 一些前置脚本，完成激活环境等操作 before_script: - source /data/runner/node/bin/activate - which node &amp;amp;&amp;amp; node --version - which npm</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>CI</category><category>DevOps</category><category>持续集成</category></item><item><title>GitLab CI 配置 Runner</title><link>https://www.chenshaowen.com/blog/gitlab-ci-configuring-runner.html</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 08 May 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/gitlab-ci-configuring-runner.html</guid><description>1. 下载并配置 Runner 1.1 下载 Runner GitLab-CI 的 Runner 是一个 Go 写的程序包，可以去官网下载到本地。 1 2 yum install -y wget wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64 增加执行权限 1 chmod +x /usr/local/bin/gitlab-runner 1.2 新增 runner 用户 运行 Runner 时，以 runner:runner 账户运行。 1 2 groupadd -g 1234 runner useradd runner -u 1234 -g 1234 1.3 修改 pip 源 1 2 3 4 cat /etc/pip.conf [global] index-url= http://pypi.doubanio.com/simple/ trusted-host = pypi.doubanio.com 1.4 创建工作目录 1 mkdir -p /data/gitlab-data 2 注册 Runner 在项目</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>CI</category><category>DevOps</category></item><item><title>GitLab CI 之前端 Webpack 实践</title><link>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</link><pubDate>Wed, 08 Nov 2017 09:15:56 +0000</pubDate><atom:modified>Wed, 08 Nov 2017 09:15:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</guid><description>从 GitLab 8.0 开始，GitLab 开始集成 CI（持续集成） 功能。只需要在服务器上添加一个 Runner，同时在项目中添加一个 .gitlab-ci.yml 文件，就可以进行 CI。在 GitLab 搭建与配置 中笔者记录了从零开始搭建 GitLab 服务的整个流程。在 GitLab CI 持续集成 中笔者交代了 GitLab CI 的一些基本概念，并</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>持续集成</category><category>工具</category><category>DevOps</category><category>GitLab</category><category>CICD</category></item><item><title>GitLab CI 持续集成</title><link>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</link><pubDate>Sun, 13 Aug 2017 08:03:17 +0000</pubDate><atom:modified>Sun, 13 Aug 2017 08:03:17 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</guid><description>1. 基本概念 GitLab-CI：GitLab 提供的持续集成系统，管理项目的构建状态，通过 GitLab Runner 来执行构建任务。 GitLab-Runner：用于执行构建任务，.gitlab-ci.yml 的 script 部分的运行就是由 GitLab-Runner 来完成。 .gitlab-ci.yml：</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>工具</category><category>持续集成</category><category>GitLab</category></item><item><title>GitLab 搭建与配置</title><link>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</link><pubDate>Sat, 12 Aug 2017 00:51:07 +0000</pubDate><atom:modified>Sat, 12 Aug 2017 00:51:07 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</guid><description>1. 简介 GitLab 是一个利用 Ruby on Rails 开发的开源应用程序，实现了自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。 它拥有与 GitHub 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Demo</category><category>工具</category><category>管理</category><category>持续集成</category><category>GitLab</category><category>DevOps</category></item></channel></rss>
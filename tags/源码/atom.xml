<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>源码 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%BA%90%E7%A0%81/</link><description>Recent content in 源码 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Tue, 27 Aug 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%BA%90%E7%A0%81/atom.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 下的 DLRover 工作流程分析</title><link>https://www.chenshaowen.com/blog/kubernetes-dlrover-workflow-analysis.html</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate><atom:modified>Tue, 27 Aug 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/kubernetes-dlrover-workflow-analysis.html</guid><description>本文使用的 DLRover 版本是 0.3.7 1. DLRover Operator 1.1 启动 ElasticJob 和 ScalePlan 的控制器 实现代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 创建 ElasticJob 的控制器 if err = controllers.NewElasticJobReconciler(mgr, masterImage).SetupWithManager(mgr); err != nil { setupLog.Error(err, &amp;#34;unable to create controller&amp;#34;, &amp;#34;controller&amp;#34;, &amp;#34;ElasticJob&amp;#34;) os.Exit(1) } // 创建 ScalePlan 的控制器 if err = controllers.NewScalePlanReconciler(mgr).SetupWithManager(mgr); err != nil { setupLog.Error(err, &amp;#34;unable to create controller&amp;#34;, &amp;#34;controller&amp;#34;, &amp;#34;ScalePlan&amp;#34;) os.Exit(1) } // 启动控制器 if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil { setupLog.Error(err, &amp;#34;problem running manager&amp;#34;) os.Exit(1) } 这部分代码是</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DLRover</category><category>Kubernetes</category><category>训练</category><category>故障自愈</category><category>源码</category></item><item><title>Python2 源码学习之字典和列表实现</title><link>https://www.chenshaowen.com/blog/dictionary-and-list-structure-in-python2.html</link><pubDate>Mon, 12 Mar 2018 11:22:55 +0000</pubDate><atom:modified>Mon, 12 Mar 2018 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/dictionary-and-list-structure-in-python2.html</guid><description>1. 为什么字典比列表查询快 首先，请看下面这段代码 1 2 3 4 5 6 7 8 9 10 11 12 13 from time import time t = time() data = [chr(i) for i in range(97, 123)] # data = dict.fromkeys(data,True) print data for i in range(9999999): after_filter = [] for find in [&amp;#39;aa&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;cc&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;ee&amp;#39;]: if find not in data: after_filter.append(find) print after_filter print time() - t 直接运行： ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] ['aa', 'cc', 'ee'] 24.5699999332 去</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category></item><item><title>Python2 源码学习之 Windows 编译</title><link>https://www.chenshaowen.com/blog/compiling-python2-source-code-under-windows.html</link><pubDate>Fri, 09 Mar 2018 11:22:55 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/compiling-python2-source-code-under-windows.html</guid><description>1. 编译器准备 准备 Python 源码 在 Python 的官网，下载需要进行编译的 Python 版本源代码。这里选择的是 Python 2 的最新版本 Python-2.7.14.tar.xz，点击前往。 准备编译器 在 Windows 上，Python 2.7 的源代码内置的项目工程，支持 Visual Studio 2008、2010 打开。当然，V</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category><category>Windows</category></item><item><title>Python2 源码学习之 pyc</title><link>https://www.chenshaowen.com/blog/python2-source-of-pyc.html</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/python2-source-of-pyc.html</guid><description>文中以 Python 2.7.8 版本源码为例。 1. Python 中常见的文件格式 py 文件 Python 源代码文件，可以使用文本编辑器进行修改。 pyc 文件 Python 源代码编译后，生成的字节码文件。 pyw 文件 pyc 文件执行时，会出现 console 窗口；pyw 文件执行时，不会出现。pyw 文件主要是用来运行纯 GUI 图形用户界面程序，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category><category>编译</category><category>学习</category></item><item><title>安全扫描工具Arachni源码分析（一）</title><link>https://www.chenshaowen.com/blog/source-code-analysis-of-arachni-1.html</link><pubDate>Fri, 16 Jun 2017 21:02:22 +0000</pubDate><atom:modified>Fri, 16 Jun 2017 21:02:22 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/source-code-analysis-of-arachni-1.html</guid><description>Arachni是一个基于Ruby on Rails框架的Web安全漏洞扫描工具。 1. Ruby on Rails Ruby on Rails ，缩写ROR，是一个Web框架，包括两部分内容： Ruby 语言和 Rails 框架。Ruby一直以来流行于日本，直到2004年，26 岁的丹麦人 David Heinemeier Hansson 提出了Web框架 - Rai</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>安全</category><category>源码</category></item><item><title>Ghost源码分析（一）: 目录结构</title><link>https://www.chenshaowen.com/blog/source-analysis-of-ghost-1.html</link><pubDate>Thu, 30 Jun 2016 08:53:53 +0000</pubDate><atom:modified>Thu, 30 Jun 2016 08:53:53 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/source-analysis-of-ghost-1.html</guid><description>Ghost版本:&amp;ldquo;version&amp;rdquo;: &amp;ldquo;0.9.0-beta.2&amp;rdquo; |&amp;mdash; content 内容目录 | |&amp;mdash; apps 目录，暂时为空，以后可能Ghost上能直接部署app | |&amp;mdash; data 数据库文件夹 | |&amp;mdash; images 图片文件夹 | |&amp;mdash; themes Ghost主题文件夹 |&amp;mdash; core 核心模块目录 | |&amp;mdash; client 客户端代码文件夹 | |&amp;mdash; server 服务</description><dc:creator>微信公众号</dc:creator><category>Ghost</category><category>博文</category><category>源码</category></item></channel></rss>
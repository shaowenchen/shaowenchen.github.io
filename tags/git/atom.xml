<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Git on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/git/</link><description>Recent content in Git on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Mon, 22 Jun 2020 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/git/atom.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins 中 Lightweight 拉取代码问题分析</title><link>https://www.chenshaowen.com/blog/the-question-of-lightweight-checkout-in-jenkins.html</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 22 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-question-of-lightweight-checkout-in-jenkins.html</guid><description>1. 遇到了什么问题 Jenkins 执行日志报错： 1 2 3 4 5 6 Started by user admin Lightweight checkout support not available, falling back to full checkout. Checking out git https://github.com/shaowenchen/pipeline-test.git into /var/jenkins_home/workspace/abc@script to read Jenkinsfile ... ... Unable to access &amp;#39;.git/index.lock&amp;#39;: File exists. 原因分析： 简单介绍一下 Jenkins 的部署情况，Jenkins 使用 Helm Chart 部署在 Kubernetes，使用 Kubernetes 动态 Pod 进行构建。Jenkins 的 /var/jenkins_home 挂载到 PV</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Git</category><category>DevOps</category><category>问题</category></item><item><title>一个完整的 Git 提交流程</title><link>https://www.chenshaowen.com/blog/a-complete-git-submission-process.html</link><pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 19 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-complete-git-submission-process.html</guid><description>这也是一个给开源项目提交 PR 的完整 Git 流程。 1. 本地配置 提交用户信息 1 2 git config --global user.name &amp;#34;username&amp;#34; git config --global user.email &amp;#34;user@email.com&amp;#34; GPG 配置 参考：GPG 验证提交 2. 克隆代码 首先 fork 原仓库 克隆 fork 的仓库代码 1 git clone https://github.com/yourname/django-xss-cleaner.git 添加原仓库 1 git remote add upstream https://github.com/shaowenchen/django-xss-cleaner.git 查看本地配置的远程源 1 2 3 4 git remote -v origin xxx upstream xxx 3. 日常开发 拉取最新</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Git</category><category>研发</category></item><item><title>Jenkins 中 Git 操作 not a tree 分析</title><link>https://www.chenshaowen.com/blog/git-reference-not-a-tree-in-jenkins.html</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 17 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/git-reference-not-a-tree-in-jenkins.html</guid><description>1. 问题描述 配置 Webhook 自动触发执行 Jenkins 流水线时，报错： 1 2 3 hudson.plugins.git.GitException: Command &amp;#34;git checkout -f 23b446ea&amp;#34; returned status code 128: stdout: stderr: fatal: reference is not a tree: 23b446ea 2. Git 如何管理版本 Git 是一个内容寻址文件系统。Git 维护着一棵 sha tree ，通过 sha 值可以回溯到任何一个历史节点。先看看提交记录： 执行命令： 1 2 3 4 5 6 7 8 9 10 11 12</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>问题</category><category>Jenkins</category><category>DevOps</category><category>Git</category></item><item><title>你不知道的 Git 使用技巧</title><link>https://www.chenshaowen.com/blog/git-skills-you-do-not-notice.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 17 May 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/git-skills-you-do-not-notice.html</guid><description>1. Pages 功能 GitHub、GitLab、Bitbucket 等，都提供了免费的静态页面托管服务，称之为 Pages 。利用 Pages 服务，可以发布文档、博客等。 以 GitHub 为例，通常只需要简单几个步骤，就可以使用 Pages： 新建一个项目：[username].github.</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>技巧</category><category>Git</category><category>流程</category></item><item><title>开发 Tips（6）</title><link>https://www.chenshaowen.com/blog/developing-tips-6.html</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 14 Dec 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-6.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python3 连接数据库 Python3 主要有两个数据库连接客户端: mysqlclient 和 PyMySQL 。 mysqlclient 是由 C 语言实现的 PyMySQL 是由 Python 实现的 在性能上， mysqlclient 比 PyMySQL 高一个数量级。但，在 PyPy 下，PyMySQL 与 mysqlclient 性能相差不大。 如果需要使用 gevent 或 eventlet 的 monkeypatched 处理 socket，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>MySQL</category><category>Git</category></item><item><title>如何同步备份 Git 仓库</title><link>https://www.chenshaowen.com/blog/how-to-synchronize-the-backup-of-git-repository.html</link><pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 19 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-synchronize-the-backup-of-git-repository.html</guid><description>由于目前使用的 Git 仓库即将无法使用，需要将仓库代码迁移到新的 Git 仓库。具体操作方法如下： 1.登录新的仓库，然后创建仓库。 创建后，新仓库地址: http://gitlab.your-new-domain.com/project.git 2.克隆旧仓库镜像到本地： 1 2 3 git clone --mirror http://gitlab.your-old-domain.com/project.git # 如果仅需要克隆 Branch 和 Tag，可以使用 --bare 参数替换 --mirror</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Git</category></item><item><title>如何使用 Docker 开发个人项目</title><link>https://www.chenshaowen.com/blog/how-to-use-docker-to-help-individual-projects.html</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Mon, 16 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-docker-to-help-individual-projects.html</guid><description>1. 关于个人项目 为什么强调是个人项目？商业项目对代码托管、开发、运维部署等环节有着冗长的流程。而对于个人开发者，这样的流程成本过高，不利于快速项目迭代。 个人项目可能是一次学习的 Demo。完成一个领域 Demo 是很好的技术学习思路。从零开始搭建一个完整</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Git</category></item><item><title>常用 Git 命令</title><link>https://www.chenshaowen.com/blog/common-git-commands.html</link><pubDate>Mon, 18 Dec 2017 11:22:55 +0000</pubDate><atom:modified>Mon, 18 Dec 2017 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-git-commands.html</guid><description>1. 基本概念 Workspace：工作区，工程文件 Index：暂存区，也叫待提交更新区，在提交进入 repo 之前，把所有的更新放在暂存区 Local Repository：本地仓库，存放在本地的版本库，HEAD 指向当前的开发分支 Remote Repository：远程仓库，远</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Git</category><category>工具</category></item><item><title>一个成功的 Git 分支模型</title><link>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</link><pubDate>Sun, 04 Dec 2016 20:34:03 +0000</pubDate><atom:modified>Sun, 04 Dec 2016 20:34:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</guid><description>这篇围绕全部源代码的控制工具Git展开。 1. 为什么是Git? 为了深入探讨git和集中式源码版本控制系统的利弊，参见这里。这方面有太多的激烈争论。作为一个开发者，相比其他工具，当前我更喜欢Git。Git的确改变了开发者关于合并与分支的思考方式。</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>工具</category><category>Git</category><category>研发</category></item></channel></rss>
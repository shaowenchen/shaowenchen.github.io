<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>一起来学Go on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6go/</link><description>Recent content in 一起来学Go on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E4%B8%80%E8%B5%B7%E6%9D%A5%E5%AD%A6go/atom.xml" rel="self" type="application/rss+xml"/><item><title>一起来学 Go --（6）Interface</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-6.html</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-6.html</guid><description>1. 面向接口编程 1.1 特征 面向接口编程，强调的是模块之间通过接口进行交互。首先，调用方指定一组方法签名，然后，由被调用方实现这组方法。 接口编程与其他编程显著不同的一点是，接口编程关注的是方法，而不是属性。在很多的编程场景中，方法是围绕属性进行定义</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>Interface</category></item><item><title>一起来学 Go --（5）Goroutine 和 Channel</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-5.html</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Thu, 03 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-5.html</guid><description>1. Go 中的并发模型 1.1 通信模型 CSP CSP 全称 Communicating Sequential Process ，通信顺序进程，描述的是一种并发通信模型。Process 可以使用很多个 Channel ，而 Channel 不关心谁在使用它，只负责收发数据。 Go 社区中，有一句非常著名的论断: 不要通过共享内存来通信，要通过通信来共享内存。意思是，不</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>并发</category><category>并行</category><category>Goroutine</category><category>Channel</category><category>学习</category><category>一起来学Go</category></item><item><title>一起来学 Go --（4）常用函数</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-4.html</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Sat, 10 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-4.html</guid><description>1. main 和 init 函数 一个 package 里面可以写多个 init 函数，但必须仅包含一个 main 函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( &amp;#34;fmt&amp;#34; ) func init() { fmt.Println(&amp;#34;init 1&amp;#34;) } func init() { fmt.Println(&amp;#34;init 2&amp;#34;) } func main() { fmt.Println(&amp;#34;main&amp;#34;) } // init 1 // init 2 // main 2. defer 函数 Go 不会立即执行 defer 修饰的代码，而是进行标记，在程序退出之前执行。 1 2</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>函数</category></item><item><title>一起来学 Go --（3）Go Modules</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-3.html</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Tue, 23 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-3.html</guid><description>1. Go 的包管理机制 1.1 GOPATH GOPATH 通过 go get 命令，拉取代码放到 GOPATH 目录中。 GOPATH 的问题是： 不能进行包版本的管理 使用全局仓库，不能有效进行隔离 1.2 Vendor 1.5 版本开始，Go 中加入了 Vendor 机制。Vendor 解决了 GOPATH 的部分问题。 Vendor 机制通过在项目目录下增加 vendor 文件夹，管理依赖包。 Vendor 的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>GoModules</category><category>一起来学Go</category></item><item><title>一起来学 Go --（2）数据与逻辑结构</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-2.html</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 05 Jun 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-2.html</guid><description>1. Go 的数据结构 基础类型 布尔类型：bool 整型：byte、int、int8、int16、uint、uintptr 浮点类型：float32、float64 复数类型：complex64、complex128 字符串：string 字符类型：rune 错</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>类型</category><category>数据结构</category></item><item><title>一起来学 Go --（1）背景与特点</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-1.html</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><atom:modified>Tue, 28 May 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-1.html</guid><description>1. Go 语言产生的背景 C/C++ 的发展速度没有跟上计算机发展的脚步，十多年来也没有出现一门与时代相符的主流系统编程语言。为了解决这一问题，Google 开发了一门新的编程语言 &amp;ndash; Go 。 Google 当时的现状： 项目中主要使用C++，也有 Java 和 Python 开发人员众多 代码量大 分布式编</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>背景</category></item></channel></rss>
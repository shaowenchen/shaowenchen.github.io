<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>事件 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E4%BA%8B%E4%BB%B6/</link><description>Recent content in 事件 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 11 Dec 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E4%BA%8B%E4%BB%B6/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用 Ops 项目查看并监控集群事件</title><link>https://www.chenshaowen.com/blog/use-ops-to-view-and-monitor-cluster-events.html</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><atom:modified>Wed, 11 Dec 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/use-ops-to-view-and-monitor-cluster-events.html</guid><description>https://github.com/shaowenchen/ops 1. 告警 Kubernetes 集群的事件 监控指定的关键字 1 2 3 4 5 6 7 8 9 10 11 apiVersion: crd.chenshaowen.com/v1 kind: EventHooks metadata: name: kube-pod-falid namespace: ops-system spec: type: xiezuo url: https://xz.wps.cn/api/v1/webhook/send?key= subject: &amp;#34;ops.clusters.*.namespaces.*.pods.*.event&amp;#34; keywords: - failed 一份简单的配置，即可收获大量的相关告警。 监控之后，自动化处理 1 2 3 4 5 6 7 8 9 10 11 12 apiVersion: crd.chenshaowen.com/v1 kind: EventHooks metadata: name: kube-no-free-node namespace: ops-system spec: additional: &amp;#34;action: restart-kubelet-bypod&amp;#34; keywords: - no free node subject: ops.clusters.*.namespaces.*.pods.*.event type: webhook url: http://x.x.x.x/webhook 借助 Ops Copilot 的执</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Ops</category><category>运维</category><category>事件</category><category>copilot</category><category>自动化</category></item><item><title>Istio 注入 Sidecar 的几种方式</title><link>https://www.chenshaowen.com/blog/several-ways-to%20inject%20Sidecar.html</link><pubDate>Tue, 21 Feb 2023 00:01:00 +0000</pubDate><atom:modified>Tue, 21 Feb 2023 00:01:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/several-ways-to%20inject%20Sidecar.html</guid><description>Istio 注入 Sidecar 的模板在 istio-sidecar-injector ConfigMap 中。通过 annotations 可以对 Sidecar 的各种参数进行自定义配置，比如 CPU 使用、proxyImage 等。下面主要整理的是 Sidecar 的注入方式。 1. 给命名空间添加标签 -&amp;gt; 整个命名空间生效 注入标签 1 kubectl label namespace default istio-injection=enabled --overwrite 重启应用之后，会自动注入 Sidecar 容器。此时，访问流量将通</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Istio</category><category>整理</category><category>事件</category></item><item><title>使用事件总线改造运维体系</title><link>https://www.chenshaowen.com/blog/transform-ops-system-using-event-bus.html</link><pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Fri, 17 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/transform-ops-system-using-event-bus.html</guid><description>1. 积重难返的运维服务体系 针对明确的运维诉求，开发相应的运维服务以供运维、业务用户使用，本无可厚非。但如果仅满足于此，很容易出现下面的情况: 用户频繁地寻找各个系统的入口，在各个系统之间来回跳转，忙于寻找各种按钮、拷贝参数。 一旦这样的运维服务多</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>运维体系</category><category>PaaS</category><category>平台</category><category>事件</category></item><item><title>JavaScript 的事件处理机制</title><link>https://www.chenshaowen.com/blog/js-event-handle-mechanism.html</link><pubDate>Tue, 29 Nov 2016 21:45:06 +0000</pubDate><atom:modified>Tue, 29 Nov 2016 21:45:06 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/js-event-handle-mechanism.html</guid><description>1. 事件处理模型：冒泡和捕获型 1 2 3 &amp;lt;div id=&amp;#34;outer&amp;#34;&amp;gt; &amp;lt;p id=&amp;#34;inner&amp;#34;&amp;gt;Click!&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; 上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？ 为了解决这个问题微软和网景提出了两种几乎完全相反的概念。 事件</description><dc:creator>微信公众号</dc:creator><category>前端</category><category>JavaScript</category><category>整理</category><category>事件</category></item></channel></rss>
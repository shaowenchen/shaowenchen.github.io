<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Go on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/go/</link><description>Recent content in Go on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/go/atom.xml" rel="self" type="application/rss+xml"/><item><title>JuiceFS 社区版、企业版、Dragonfly 集成性能测试及对比</title><link>https://www.chenshaowen.com/blog/performance-testing-and-comparison-of-juicefs-ce-ee-and-dragonfly.html</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><atom:modified>Wed, 24 Jan 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/performance-testing-and-comparison-of-juicefs-ce-ee-and-dragonfly.html</guid><description>请注意文中的 --block-size 4096 为 4GB，如果使用 --block-size 4 会更合理，在写数据性能上会更好。 1. 环境准备 进入一个安全目录 1 mkdir -p /data/test &amp;amp;&amp;amp; cd /data/test 在这个目录下完成全部的测试任务。 给 Redis 单独建一个目录 1 mkdir redis-data 建议新建一个目录，因为 Redis 会将当前目录文件的 Owner 改成 systemd-cored</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>JuiceFS</category><category>Go</category><category>Python3</category></item><item><title>容器下的 Go 应用程序优化</title><link>https://www.chenshaowen.com/blog/optimization-go-applications-in-containers.html</link><pubDate>Sat, 11 Nov 2023 08:05:48 +0000</pubDate><atom:modified>Sat, 11 Nov 2023 08:05:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/optimization-go-applications-in-containers.html</guid><description>1. 内存对齐 结构体内字段，从大到小排列 减少内存占用 安装 fieldalignment 工具 1 go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest 分析并修复内存对齐 1 2 3 4 5 6 7 8 9 fieldalignment -fix ./... /Users/shaowenchen/Code/app/config/config.go:136:14: struct with 32 pointer bytes could be 24 /Users/shaowenchen/Code/app/config/config.go:150:11: struct of size 96 could be 88 /Users/shaowenchen/Code/app/config/config.go:166:14: struct of size 152 could be 144 /Users/shaowenchen/Code/app/config/config.go:194:12: struct with 80 pointer bytes could be 72 /Users/shaowenchen/Code/app/config/config.go:209:12: struct with 56 pointer bytes could be 40 /Users/shaowenchen/Code/app/dao/gormx/gorm.go:12:13: struct with 16 pointer bytes could be 8 /Users/shaowenchen/Code/app/dao/gormx/entity/cluster.go:5:14: struct with 128 pointer bytes could be 104 查看 fieldalignment 进行</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>性能优化</category><category>容器</category><category>最佳实践</category></item><item><title>使用 Go 编写 WebAssembly 程序</title><link>https://www.chenshaowen.com/blog/get-webassembly-programs-using-go.html</link><pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate><atom:modified>Sat, 13 May 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/get-webassembly-programs-using-go.html</guid><description>1. WebAssembly 简介 跨平台性，可以在任何支持 WebAssembly 的平台上运行，包括 Web 浏览器、服务器、移动设备等 高性能，采用了一种紧凑的二进制格式，可以在浏览器中快速加载和解析，从而提高应用程序的性能 安全性，采用了一种沙箱模型，可以隔离运行在其中的代码，从而保护系统免受恶</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>WebAssembly</category></item><item><title>Go mod 使用问题</title><link>https://www.chenshaowen.com/blog/some-questions-of-using-go-mod.html</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-questions-of-using-go-mod.html</guid><description>1. 升级 Go 版本之后 go.sum 版本不匹配 执行命令 go build 报错。 错误提示： missing go.sum entry for module providing package golang.org/x/time/rate; to add 解决办法： 在 go build 之前更新 go.sum，执行命令 go mod tidy 2. tls 错误 执行命令 go mod download 报错。 错误提示： fatal: unable to access &amp;#39;https://github.com/agiledragon/gomonkey/&amp;#39;: GnuTLS recv error (-110): The TLS connection was non-properly terminated. 解决办法： 禁用证书校验执行命令，export</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>研发</category></item><item><title>Go 中的时间和时区问题</title><link>https://www.chenshaowen.com/blog/the-tips-of-time-and-tz-in-go.html</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-tips-of-time-and-tz-in-go.html</guid><description>1. 时间与时区 1.1 时间标准 UTC，世界标准时间，是现在的时间标准，以原子时计时。 GMT，格林威治时间，是以前的时间标准，规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午 12 点。 UTC 时间更加准确，但如果对精度要求不高，可以视两种标准等</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>研发</category></item><item><title>Go 私有包的构建和使用</title><link>https://www.chenshaowen.com/blog/building-and-using-go-private-packages.html</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 24 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/building-and-using-go-private-packages.html</guid><description>1. 创建一个 Go Modules 项目 创建目录 1 2 mkdir go-test cd go-test 初始化包 1 2 3 4 5 go mod init gitlab.private.com/shaowenchen/go-test go: creating new go.mod: module gitlab.private.com/shaowenchen/go-test go: to add module requirements and sums: go mod tidy 添加业务代码 main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func main() { r := gin.Default() r.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;hello world.&amp;#34;, }) }) r.Run() } 下载依赖到 vendor 1 2 go mod tidy go mod vendor 本地运行 1 2 3 4 5 go run</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>入门</category></item><item><title>实用的算法之布隆过滤</title><link>https://www.chenshaowen.com/blog/practical-algorithm-of-bloom-filter.html</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 01 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practical-algorithm-of-bloom-filter.html</guid><description>1. 什么是布隆过滤 布隆过滤（Bloom Filter）是布隆在 1970 年提出的一种数据结构。 将元素（x、y、z）通过一系列函数，映射到一个二进制向量（0101 序列），用于快速判断元素 w 是否在一个集合当中。如下图（来自维基百科）: 相较于使用单个映射函数</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>实用的算法</category><category>研发</category><category>Go</category><category>优化</category><category>布隆过滤</category></item><item><title>一起来学 Go --（6）Interface</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-6.html</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-6.html</guid><description>1. 面向接口编程 1.1 特征 面向接口编程，强调的是模块之间通过接口进行交互。首先，调用方指定一组方法签名，然后，由被调用方实现这组方法。 接口编程与其他编程显著不同的一点是，接口编程关注的是方法，而不是属性。在很多的编程场景中，方法是围绕属性进行定义</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>Interface</category></item><item><title>一起来学 Go --（5）Goroutine 和 Channel</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-5.html</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Thu, 03 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-5.html</guid><description>1. Go 中的并发模型 1.1 通信模型 CSP CSP 全称 Communicating Sequential Process ，通信顺序进程，描述的是一种并发通信模型。Process 可以使用很多个 Channel ，而 Channel 不关心谁在使用它，只负责收发数据。 Go 社区中，有一句非常著名的论断: 不要通过共享内存来通信，要通过通信来共享内存。意思是，不</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>并发</category><category>并行</category><category>Goroutine</category><category>Channel</category><category>学习</category><category>一起来学Go</category></item><item><title>什么是函数式编程</title><link>https://www.chenshaowen.com/blog/what-is-functional-programming.html</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 02 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-functional-programming.html</guid><description>1. 什么是编程范式 编程范式是一类典型的编程规范。一方面提供了工程师对实体的建模方法，将物理世界与代码关联起来；另一方面也提供了工程师对代码程序的理解思路。 编程范式与编程语言属于多对多的关系。一种编程语言中，可能包含多种编程范式，例如，C++ 包</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>函数式编程</category><category>Go</category><category>编程范式</category><category>Python</category><category>什么是</category></item><item><title>柯里化与偏函数</title><link>https://www.chenshaowen.com/blog/curry-and-partial-function.html</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 29 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/curry-and-partial-function.html</guid><description>1. 什么是柯里化 根据维基百科词条定义，在计算机科学中，柯里化（Currying）是把接受多个参数的函数转变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。 英文版定义是一个两层的定语从句，翻译</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>Python</category><category>柯里化</category><category>函数式编程</category><category>偏函数</category></item><item><title>使用 Base64 解码 JWT Playload 数据不完整</title><link>https://www.chenshaowen.com/blog/incomplete-data-using-base64-decoding-jwt-playload.html</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 08 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/incomplete-data-using-base64-decoding-jwt-playload.html</guid><description>在对 JWT 进行 Base64 解码时，发现 JSON 数据不完整。本文主要介绍相关知识点并解决这个问题。 1. JWT 简介 JWT 通过在 Header 中设置 Authorization: Bearer &amp;lt;token&amp;gt; 进行认证的传递。 JWT Token 是一个 . 连接的 Base64 编码字符串，类似这样 Header.Payload.Signature ，有三部分组成： Header ，定义 Token 类型和加密算法 1 2 3 4 { &amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;, &amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34; } Payload ，负载信息，通</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>JWT</category><category>编码</category><category>Base64</category></item><item><title>VS Code 无法下载 Go 插件的工具包</title><link>https://www.chenshaowen.com/blog/can-not-download-packages-in-vs-code.html</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 11 Apr 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/can-not-download-packages-in-vs-code.html</guid><description>VS Code 安装 Go 插件之后，打开 Go 项目时，编辑器会提示安装工具包。 但是 golang.org 无法直接访问，我们需要将包手动下载到 GOPATH 目录，进行安装。 创建包目录 1 2 cd $GOPATH mkdir -p src/golang.org/x 下载包 1 2 3 cd src/golang.org/x git clone https://github.com/golang/tools.git git clone https://github.com/golang/lint.git 安装包 1 2 go get golang.org/x/tools/... go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.27.0</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>VSCode</category><category>插件</category></item><item><title>如何使用 KubeBuilder 开发一个 Operator</title><link>https://www.chenshaowen.com/blog/how-to-develop-a-operator-using-kubebuilder.html</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Sep 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-develop-a-operator-using-kubebuilder.html</guid><description>通过 Operator 的方案，可以对 Kubernetes 的功能进行友好地扩展。Operatpr = CRD + Controller。首先通过 yaml 定义，生成 CRD ，然后 Controller 不断地监听 etcd 中的数据，执行相应动作。开发 Operator 时，有很多繁琐且重复的事情。KubeBuilder 可以帮助我们快速生成骨架代码，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Go</category><category>Operator</category></item><item><title>一起来学 Go --（4）常用函数</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-4.html</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Sat, 10 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-4.html</guid><description>1. main 和 init 函数 一个 package 里面可以写多个 init 函数，但必须仅包含一个 main 函数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( &amp;#34;fmt&amp;#34; ) func init() { fmt.Println(&amp;#34;init 1&amp;#34;) } func init() { fmt.Println(&amp;#34;init 2&amp;#34;) } func main() { fmt.Println(&amp;#34;main&amp;#34;) } // init 1 // init 2 // main 2. defer 函数 Go 不会立即执行 defer 修饰的代码，而是进行标记，在程序退出之前执行。 1 2</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>函数</category></item><item><title>开发 Tips（10）</title><link>https://www.chenshaowen.com/blog/developing-tips-10.html</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 02 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-10.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. VS Code 终端执行 .bash_profile 初始化脚本 通过添加启动命令参数，可以使得打开 shell 时，执行初始化脚本 .bash_profile 。 编辑 settings.json，以 OS X 为例，新增如下内容即可： 1 2 3 { &amp;#34;terminal.integrated.shellArgs.osx&amp;#34;: [&amp;#34;-l&amp;#34;] } 2. VS Code 配置 zsh 后，图标无法显示 由于安装补</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Go</category><category>VSCode</category></item><item><title>一起来学 Go --（3）Go Modules</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-3.html</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Tue, 23 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-3.html</guid><description>1. Go 的包管理机制 1.1 GOPATH GOPATH 通过 go get 命令，拉取代码放到 GOPATH 目录中。 GOPATH 的问题是： 不能进行包版本的管理 使用全局仓库，不能有效进行隔离 1.2 Vendor 1.5 版本开始，Go 中加入了 Vendor 机制。Vendor 解决了 GOPATH 的部分问题。 Vendor 机制通过在项目目录下增加 vendor 文件夹，管理依赖包。 Vendor 的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>GoModules</category><category>一起来学Go</category></item><item><title>Go 入门指南</title><link>https://www.chenshaowen.com/blog/book/the-way-to-go.html</link><pubDate>Thu, 06 Jun 2019 07:16:21 +0000</pubDate><atom:modified>Thu, 06 Jun 2019 07:16:21 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/the-way-to-go.html</guid><description>英文书名: The Way To Go 副标题: A Thorough Introduction To The Go Programming Language 作者: Ivo Balbaert 出版社: iUniverse 出版年: 2012-3-8 ISBN: 9781469769165 Notes: 这是一本个人比较推荐的 Go 入门书籍。由于 Go 最近几年发展迅速，原著中有部分内容已经过时。我阅读的是中文翻译版本。中文版根据当前 Go 语言版本进行了修改。 书中，作者对 Go 语言</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>Go</category><category>入门</category></item><item><title>一起来学 Go --（2）数据与逻辑结构</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-2.html</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 05 Jun 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-2.html</guid><description>1. Go 的数据结构 基础类型 布尔类型：bool 整型：byte、int、int8、int16、uint、uintptr 浮点类型：float32、float64 复数类型：complex64、complex128 字符串：string 字符类型：rune 错</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>类型</category><category>数据结构</category></item><item><title>一起来学 Go --（1）背景与特点</title><link>https://www.chenshaowen.com/blog/let-us-start-learning-go-1.html</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><atom:modified>Tue, 28 May 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/let-us-start-learning-go-1.html</guid><description>1. Go 语言产生的背景 C/C++ 的发展速度没有跟上计算机发展的脚步，十多年来也没有出现一门与时代相符的主流系统编程语言。为了解决这一问题，Google 开发了一门新的编程语言 &amp;ndash; Go 。 Google 当时的现状： 项目中主要使用C++，也有 Java 和 Python 开发人员众多 代码量大 分布式编</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>一起来学Go</category><category>背景</category></item><item><title>Go 开发配置</title><link>https://www.chenshaowen.com/blog/configuration-of-developing-go.html</link><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 23 Jan 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/configuration-of-developing-go.html</guid><description>1. 常用环境变量 1.1 GOROOT $GOROOT 是安装 Go 程序包的本地目录。 1 2 3 4 cd /c/Go ls AUTHORS CONTRIBUTORS PATENTS VERSION bin favicon.ico misc robots.txt test CONTRIBUTING.md LICENSE README.md api doc lib pkg src 1.2 GOPATH $GOPATH 是 Go 的工程目录，用来存放代码、第三方库、编译中间文件等。 如果需要配置多个目录，在 Mac 和 Linux 下可以通过 : 分割，在 Windows 下可以使用 ; 分割表示。 需要注意的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>入门</category></item><item><title>Jupyter 安装 Python3、Go 内核</title><link>https://www.chenshaowen.com/blog/install-python3-and-go-kernel-in-jupyter.html</link><pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 09 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-python3-and-go-kernel-in-jupyter.html</guid><description>前面提到 Jupyter Notebook 是一个交互式笔记本，支持运行 40 多种编程语言，非常适合教学。最近，学习 Go 语言，就想起了 Jupyter。本文主要描述如何在 Jupyter 里面安装 Python3 和 Go 内核。 1. Jupyter 安装 在 CentOS 7 中，默认安装了 Python 2.7，有现成的 Python 环境可用。 安装 Jupyter 1 pip install jupyter 生成密码 在 IPython 中，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jypyter</category><category>Go</category><category>Python3</category></item><item><title>Go 语言入门</title><link>https://www.chenshaowen.com/blog/101-of-go-language.html</link><pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 07 Jan 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/101-of-go-language.html</guid><description>1. 背景 最近十多年来，C/C++ 在计算领域没有很好得到发展，没有跟上计算机发展的脚步。 现有的编程语言，开发程度和系统效率在很多情况下不能兼得。要么执行效率高，但低效的开发和编译；要么执行效率低，但拥有高效的编译；所以需要一种拥有较高效的执行速</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>编程</category></item></channel></rss>
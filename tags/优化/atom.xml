<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>优化 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E4%BC%98%E5%8C%96/</link><description>Recent content in 优化 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 26 Apr 2023 10:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E4%BC%98%E5%8C%96/atom.xml" rel="self" type="application/rss+xml"/><item><title>Tekton 优化之定制集群调度器</title><link>https://www.chenshaowen.com/blog/custom-cluster-scheduler-to-optimize-tekton.html</link><pubDate>Wed, 26 Apr 2023 10:00:00 +0000</pubDate><atom:modified>Wed, 26 Apr 2023 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/custom-cluster-scheduler-to-optimize-tekton.html</guid><description>1. 受限的构建环境无法满足构建需求 Tekton 是基于 Kubernetes 集群的 CICD 引擎，相较于 Jenkins 更加云原生。说人话就是，更好开发插件、更好扩容、更好可观测性、更好玩儿。 由于代码仅能落盘公司内网，导致构建集群仅能部署于办公内网。这导致了很多受限： 硬件资源，没有弹性扩容能力 网</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>优化</category><category>Tekton</category><category>CICD</category><category>DevOps</category></item><item><title>分阶段构建如何缓存第三方依赖</title><link>https://www.chenshaowen.com/blog/how-to-cache-third-party-package-whilie-building-in-stage.html</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-cache-third-party-package-whilie-building-in-stage.html</guid><description>非分阶段构建场景下，使用容器进行构建时，我们可以将容器中的缓存目录挂载到构建主机上，执行构建任务；然后将产物拷贝到运行镜像，制作应用镜像。但是在分阶段构建时，构建镜像和运行镜像在同一个 Dockerfile 中，这给优化第三方依赖的缓存带来了难度。 1. 创建一个 Vue 实</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>CI</category><category>DevOps</category><category>缓存</category><category>优化</category></item><item><title>实用的算法之布隆过滤</title><link>https://www.chenshaowen.com/blog/practical-algorithm-of-bloom-filter.html</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 01 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practical-algorithm-of-bloom-filter.html</guid><description>1. 什么是布隆过滤 布隆过滤（Bloom Filter）是布隆在 1970 年提出的一种数据结构。 将元素（x、y、z）通过一系列函数，映射到一个二进制向量（0101 序列），用于快速判断元素 w 是否在一个集合当中。如下图（来自维基百科）: 相较于使用单个映射函数</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>实用的算法</category><category>研发</category><category>Go</category><category>优化</category><category>布隆过滤</category></item><item><title>Django 性能之数据库查询优化</title><link>https://www.chenshaowen.com/blog/database-query-optimization-of-django-performance.html</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 20 Mar 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/database-query-optimization-of-django-performance.html</guid><description>本文主要提供了 Django 字段、查询方面的优化建议，同时还介绍了一个 Django-silk 性能分析工具。希望对你开发高性能的 Django 工程有所帮助。 1. DBA 的建议 1.1 表字段设计 避免出现 null 值，null 值难以查询优化且占用额外的索引空间 尽量使用 INT 而非 BIGINT，尽可能准确描述字段 使用枚</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>数据库</category><category>优化</category><category>性能</category><category>Django</category></item><item><title>Django 全栈优化指南</title><link>https://www.chenshaowen.com/blog/django-full-stack-optimization-guide.html</link><pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 15 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-full-stack-optimization-guide.html</guid><description>由于数据量剧增，系统响应很慢。对应用系统进行了一系列的优化工作，系统响应时间得到了数量级级别的优化效果。总体看，在压缩文件、加快网络访问方面的优化，对前端性能有显著提升效果。在存储过程、缓存、逻辑代码方面的优化，对后端性能提升有显著效果。本</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>优化</category><category>前端</category><category>后端</category><category>指南</category></item><item><title>如何利用 CDN 进一步的前后端分离 - CI 脚本</title><link>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 15 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>在团队中，开发流程相关的调整一定要相应的自动化工具配合。如果没有足够低的使用成本，这种调整将会是无意义的，因为根本就不会有人去使用。上一篇，我们提到 如何利用 CDN 进一步的前后端分离 , 这一篇主要讲，如何将这个流程结合到 CI 中。后端的配置，之前的 博客</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category><category>脚本</category><category>DevOps</category></item><item><title>如何利用 CDN 进一步的前后端分离</title><link>https://www.chenshaowen.com/blog/how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 13 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>最近在优化一下项目，梳理整个链路之后，开始逐步优化，发现了很多可以改进的点。下面是对开发模式、部署方式的一些思考，希望对你有所启发。 1. 开发背景 1.1 部署方式 如上图，简单描述一下应用的架构。 采用的是经典三层架构，接入层，逻辑层，存储层。其中，接入</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category></item></channel></rss>
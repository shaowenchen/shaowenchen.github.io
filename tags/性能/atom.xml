<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>性能 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%80%A7%E8%83%BD/</link><description>Recent content in 性能 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 20 Mar 2019 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%80%A7%E8%83%BD/atom.xml" rel="self" type="application/rss+xml"/><item><title>Django 性能之数据库查询优化</title><link>https://www.chenshaowen.com/blog/database-query-optimization-of-django-performance.html</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 20 Mar 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/database-query-optimization-of-django-performance.html</guid><description>本文主要提供了 Django 字段、查询方面的优化建议，同时还介绍了一个 Django-silk 性能分析工具。希望对你开发高性能的 Django 工程有所帮助。 1. DBA 的建议 1.1 表字段设计 避免出现 null 值，null 值难以查询优化且占用额外的索引空间 尽量使用 INT 而非 BIGINT，尽可能准确描述字段 使用枚</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>数据库</category><category>优化</category><category>性能</category><category>Django</category></item><item><title>Django 性能之分库分表</title><link>https://www.chenshaowen.com/blog/sub-db-and-table-of-django-performance.html</link><pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate><atom:modified>Tue, 19 Mar 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/sub-db-and-table-of-django-performance.html</guid><description>1. 碰到的问题 前端请求量大，并发高，访问速度慢，瓶颈主要表现在： 单表大 单库大 网络 IO 慢 磁盘 IO 慢 网络、磁盘 IO 优化，主要依靠硬件升级。理论上，数据库对单库、单表的大小没有限制，但是过大的单库、单表会导致更多的请求落到单机上，给 IO 造成压力。 理想情况是</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>数据库</category><category>Sharding</category><category>性能</category><category>分库</category><category>分表</category></item><item><title>开发 Tips（5）</title><link>https://www.chenshaowen.com/blog/developing-tips-5.html</link><pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-5.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python 内存分析方法 主要涉及四个工具： memory_profile：分析每一行代码的内存使用量 objgraph：跟踪内存中的对象的关系 guppy：在运行时跟踪堆的使用情况 pyrasite：向进程中注入代</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>Docker</category><category>CentOS</category><category>性能</category></item><item><title>Django 调试工具 django-debug-toolbar</title><link>https://www.chenshaowen.com/blog/django-debug-toolbar.html</link><pubDate>Fri, 06 Oct 2017 10:45:58 +0000</pubDate><atom:modified>Fri, 06 Oct 2017 10:45:58 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-debug-toolbar.html</guid><description>1. 关于 Django 的性能 Django 是一个 Python 写的 Web 应用框架。使用 Django ，可以非常简单、高效地开发复杂的数据驱动的网站。同时，Django 非常注重组件的重用性、可插拔、敏捷开发、DRY（Don&amp;rsquo;t Repeat Yourself）。从一定程度上讲，Django 是一个很</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>工具</category><category>测试</category><category>性能</category><category>调试</category></item></channel></rss>
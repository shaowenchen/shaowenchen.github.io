<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Python on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/python/</link><description>Recent content in Python on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Thu, 28 Mar 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/python/atom.xml" rel="self" type="application/rss+xml"/><item><title>Conda 安装与使用</title><link>https://www.chenshaowen.com/blog/conda-install-and-use.html</link><pubDate>Thu, 28 Mar 2024 00:00:00 +0000</pubDate><atom:modified>Thu, 28 Mar 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/conda-install-and-use.html</guid><description>1. 安装 conda 1 2 3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh bash Miniconda3-latest-Linux-x86_64.sh rm -rf Miniconda3-latest-Linux-x86_64.sh 但 Miniconda 不能免费大规模商用，可以使用 Miniforge 平替。 1 2 wget &amp;#34;https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh&amp;#34; bash Miniforge3-$(uname)-$(uname -m).sh 2. 修改默认配置 2.1 初始化 Shell 如果不进行初始化，激活环境时会报错 CondaError: Run 'conda init' before 'conda activate' 。 1 2 3 4 5 6 7 8 9 conda init --help usage: conda init [-h] [--all] [--user] [--no-user] [--system] [--reverse] [--json] [-v] [-q] [-d] [SHELLS ...] Initialize conda for shell interaction. positional arguments: SHELLS One or more shells to be</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Conda</category><category>Python</category><category>Ai</category></item><item><title>什么是函数式编程</title><link>https://www.chenshaowen.com/blog/what-is-functional-programming.html</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 02 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-functional-programming.html</guid><description>1. 什么是编程范式 编程范式是一类典型的编程规范。一方面提供了工程师对实体的建模方法，将物理世界与代码关联起来；另一方面也提供了工程师对代码程序的理解思路。 编程范式与编程语言属于多对多的关系。一种编程语言中，可能包含多种编程范式，例如，C++ 包</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>函数式编程</category><category>Go</category><category>编程范式</category><category>Python</category><category>什么是</category></item><item><title>柯里化与偏函数</title><link>https://www.chenshaowen.com/blog/curry-and-partial-function.html</link><pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 29 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/curry-and-partial-function.html</guid><description>1. 什么是柯里化 根据维基百科词条定义，在计算机科学中，柯里化（Currying）是把接受多个参数的函数转变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。 英文版定义是一个两层的定语从句，翻译</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>Python</category><category>柯里化</category><category>函数式编程</category><category>偏函数</category></item><item><title>开发 Tips（8）</title><link>https://www.chenshaowen.com/blog/developing-tips-8.html</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 22 Mar 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-8.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Linux 下设置 Git 访问凭证 Windows 或 OS X 上有 keychain 工具管理账户凭证，在 Linux 系统上使用 Http/Https 协议访问 Git 仓库时，每次都需要输入账户密码。通过下面的配置，可以省略这一过程。 新建凭证文件 1 touch ~/.git-credentials 编辑文件，添加凭证信息 1 https://{username}:{password}@git-domain.com 使凭证生效</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category></item><item><title>开发 Tips（7）</title><link>https://www.chenshaowen.com/blog/developing-tips-7.html</link><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 24 Feb 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-7.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python2 和 Python3 中的异常处理 Python2，Python3 都支持的两种方式： 带参数 1 2 except （ExceptionType） as Argument: # 访问 Argument 不带参数 1 except ExceptionType： 仅 Python2 支持的方式： 1 2 except ExceptionType, Argument: # 访问 Argument 2.</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>Django</category></item><item><title>Pytest 进阶学习之 Mock</title><link>https://www.chenshaowen.com/blog/mock-of-pytest.html</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 27 Jan 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/mock-of-pytest.html</guid><description>1. 为什么需要 Mock 在做单元测试时，被测试函数有时并不是一个可执行的独立单元。被测试函数依赖于一些外部资源，比如另外一个函数的返回值、数据库中某一条数据值等。 为了屏蔽外部依赖的干扰，我们会采用 Mock 技术。通过模拟测试资源的方式，满足依赖条件。 从设计模</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>Python</category><category>Pytest</category><category>学习</category></item><item><title>Pytest 入门学习</title><link>https://www.chenshaowen.com/blog/101-of-pytest.html</link><pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 29 Dec 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/101-of-pytest.html</guid><description>Pytest 测试框架使用简单、插件丰富、功能强大，被广泛用于 Python 自动化测试。本文主要介绍一些 Pytest 的基本概念和使用方法。 1. 运行机制 第一步，Pytest 从命令行或文件中读取配置 第二步，在指定目录下查找并导入 conftest.py 文件 第三步，查找满足匹配条件的测试文件，通常是 test_ 开</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>Python</category><category>Pytest</category></item><item><title>开发 Tips（6）</title><link>https://www.chenshaowen.com/blog/developing-tips-6.html</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 14 Dec 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-6.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python3 连接数据库 Python3 主要有两个数据库连接客户端: mysqlclient 和 PyMySQL 。 mysqlclient 是由 C 语言实现的 PyMySQL 是由 Python 实现的 在性能上， mysqlclient 比 PyMySQL 高一个数量级。但，在 PyPy 下，PyMySQL 与 mysqlclient 性能相差不大。 如果需要使用 gevent 或 eventlet 的 monkeypatched 处理 socket，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>MySQL</category><category>Git</category></item><item><title>开发 Tips（5）</title><link>https://www.chenshaowen.com/blog/developing-tips-5.html</link><pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-5.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python 内存分析方法 主要涉及四个工具： memory_profile：分析每一行代码的内存使用量 objgraph：跟踪内存中的对象的关系 guppy：在运行时跟踪堆的使用情况 pyrasite：向进程中注入代</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>Docker</category><category>CentOS</category><category>性能</category></item><item><title>开发 Tips（3）</title><link>https://www.chenshaowen.com/blog/developing-tips-3.html</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 02 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-3.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python 的日志模块 Python 的 logging 模块主要由四个部分组成： Loggers: 可供程序直接调用的接口 Handlers: 将日志记录输出至合适的位置 Filters: 提供更细粒度的日志是否输出判断 Formatters: 定制最终记录打印的布局格式 看下面这个例子，log1.py 文件 1 2 3 4</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>编码</category></item><item><title>开发 Tips（2）</title><link>https://www.chenshaowen.com/blog/developing-tips-2.html</link><pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 26 Oct 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-2.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python 中的序列化与反序列化 序列化，将内存对象转化为可存储或传输序列的过程。反序列化，把序列化序列重新转化为内存对象的过程。Json 和 Pickle 是 Python 中常用的两个序列化处理模块。 Json VS Pickle: Json 实现的是内存对象与 Json 字符串</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category></item><item><title>编写 Python2、Python3 兼容的代码</title><link>https://www.chenshaowen.com/blog/writing-python2-python3-compatible-code.html</link><pubDate>Sat, 20 Oct 2018 14:51:47 +0000</pubDate><atom:modified>Sat, 20 Oct 2018 14:51:47 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/writing-python2-python3-compatible-code.html</guid><description>Python2 到 Python3 是一个较大的版本更新。目前，生产环境依然有大量项目使用的是 Python2。但，这并不意味着项目会一直停留在 Python2，开发者也需要考虑项目对 Python3 的兼容性，以方便迁移，同时也是对新知识的学习。下面是一些学习的知识点整理。 1. Python2 升级 Python3 贸然</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>兼容</category></item><item><title>开发 Tips（1）</title><link>https://www.chenshaowen.com/blog/developing-tips-1.html</link><pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 19 Oct 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-1.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. warning: LF will be replaced by CRLF Windows、Linux 和 Mac 在处理文件换行时，标示符是不一致的。Windows 使用 CRLF 作为结束符，而 Linux 和 Mac 使用 LF 作为结束符。 对待换行符，Git 有两种模式。查看 Git 配置。 1 git config core.autocrlf 如果显示</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>研发</category></item><item><title>Flask 学习（1） - 简介</title><link>https://www.chenshaowen.com/blog/learning-flask-1.html</link><pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 20 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/learning-flask-1.html</guid><description>1. 简介 Flask 诞生于 2010 年，是一个使用 Python 编写的轻量级 Web 应用框架。 Flask 依赖于两个库。 Jinja2，模板引擎，类似 mako Werkzeug，遵循 WSGI 协议的 Python 函数库，实现了很多 Web 框架底层的东西，比如 request 和 response 对象。 2. Web 框架比较 Flask、Tornado、Django 特</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Flask</category><category>Web</category><category>Python</category></item><item><title>Robot Framework 基础</title><link>https://www.chenshaowen.com/blog/basic-of-robot-framework.html</link><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 24 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basic-of-robot-framework.html</guid><description>主要介绍 Robot Framework 的一些基本概念，如何写一个测试用例。 1. 基础元素 1.1 关键字 - keywords Robot Framework 关键字类似函数。分为系统关键字和用户自定义关键字。 系统关键字，通过加载 Library 引入 用户关键字，通过加载 Resource 引入 1.2 库 - Library 库用来封装和复用关键字。Robot Framework 库包括系统库和用户自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>测试</category><category>使用</category><category>DevOps</category></item><item><title>Robot Framework IDE (RIDE) 安装</title><link>https://www.chenshaowen.com/blog/how-to-install-robot-framework-ide-on-windows.html</link><pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 21 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-install-robot-framework-ide-on-windows.html</guid><description>1. 简介 1.1 Robot Framework Robot Framework 是一个 Python 写的自动化功能测试框架。 具备良好的可扩展性，支持关键字驱动 可以同时测试多种类型的客户端或者接口 可以进行分布式测试 主要用于轮次很多的验收测试和测试驱动开发。 1.2 Robot Framework IDE (RIDE) Robot Framework IDE (RIDE) 是 Robot Framework 框架的集成开发环境。 值得注意的是，20</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>功能</category><category>Python</category><category>RIDE</category></item><item><title>Python 下各种环境隔离工具简介</title><link>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</guid><description>1. 非标准库 1.1 virtualenv virtualenv 是一个非常流行的用于创建独立的python libraries环境的工具。我强烈推荐你学习并了解它，因为他非常实用，并且应用广泛，很多人用它来搭建python开发环境。后面其他工具来主要与virtualenv来进行比较以说明差</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Python</category><category>工具</category><category>环境</category></item><item><title>Django 开发中常用命令</title><link>https://www.chenshaowen.com/blog/common-commands-in-django-development.html</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 22 Mar 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-commands-in-django-development.html</guid><description>创建 Django 工程 1 django-admin startproject your_project_name 创建应用 1 2 3 django-admin.py startapp your_app_name # 或者 python manage.py startapp your_app_name python manage.py 和 django-admin 的功能基本一样。不同的是 python manage.py 还设置了 DJANGO_SETTINGS_MODULE 环境变量、将项目的路径加入了 sys.path 中。建议除了创建项目使用 django-admin，其他情况使用 python manage.py。 初始化数据 1 python manage.py migrate 创建缓存表</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>Django</category><category>命令</category></item><item><title>Python2 源码学习之字典和列表实现</title><link>https://www.chenshaowen.com/blog/dictionary-and-list-structure-in-python2.html</link><pubDate>Mon, 12 Mar 2018 11:22:55 +0000</pubDate><atom:modified>Mon, 12 Mar 2018 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/dictionary-and-list-structure-in-python2.html</guid><description>1. 为什么字典比列表查询快 首先，请看下面这段代码 1 2 3 4 5 6 7 8 9 10 11 12 13 from time import time t = time() data = [chr(i) for i in range(97, 123)] # data = dict.fromkeys(data,True) print data for i in range(9999999): after_filter = [] for find in [&amp;#39;aa&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;cc&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;ee&amp;#39;]: if find not in data: after_filter.append(find) print after_filter print time() - t 直接运行： ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] ['aa', 'cc', 'ee'] 24.5699999332 去</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category></item><item><title>Python2 VS Python3</title><link>https://www.chenshaowen.com/blog/python2-vs-python3.html</link><pubDate>Fri, 09 Mar 2018 17:22:45 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/python2-vs-python3.html</guid><description>1. Python 2 和 3 区别 特征\版本| Python 2| Python 3 | :-: | -: print 函数化 | print“abc”| print(&amp;ldquo;abc&amp;rdquo;) 统一类| 旧式类和新式类| 只有新式类 浮点运算| 1/2=0| 1/2=0.5 字符串格式化| %,Format| Format,% xrange 替代 range| xrange| range long 重命名为 int| Long,int| Int 包导入| 相对导入| 绝对导入 源文件编码| Ascii| utf8 Python 官方强烈建议直接学习 Python 3，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Python</category><category>比较</category></item><item><title>Python2 源码学习之 Windows 编译</title><link>https://www.chenshaowen.com/blog/compiling-python2-source-code-under-windows.html</link><pubDate>Fri, 09 Mar 2018 11:22:55 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/compiling-python2-source-code-under-windows.html</guid><description>1. 编译器准备 准备 Python 源码 在 Python 的官网，下载需要进行编译的 Python 版本源代码。这里选择的是 Python 2 的最新版本 Python-2.7.14.tar.xz，点击前往。 准备编译器 在 Windows 上，Python 2.7 的源代码内置的项目工程，支持 Visual Studio 2008、2010 打开。当然，V</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category><category>Windows</category></item><item><title>Python2 源码学习之 pyc</title><link>https://www.chenshaowen.com/blog/python2-source-of-pyc.html</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/python2-source-of-pyc.html</guid><description>文中以 Python 2.7.8 版本源码为例。 1. Python 中常见的文件格式 py 文件 Python 源代码文件，可以使用文本编辑器进行修改。 pyc 文件 Python 源代码编译后，生成的字节码文件。 pyw 文件 pyc 文件执行时，会出现 console 窗口；pyw 文件执行时，不会出现。pyw 文件主要是用来运行纯 GUI 图形用户界面程序，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category><category>编译</category><category>学习</category></item><item><title>如何使用 devpi 搭建 PyPI Server</title><link>https://www.chenshaowen.com/blog/how-to-build-a-pypi-server-using-devpi.html</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 04 Mar 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-build-a-pypi-server-using-devpi.html</guid><description>使用 pip 命令安装 Python 包时，默认去 https://pypi.python.org/simple/ 源查找相应的包，下载并安装。但是在内网环境，或者需要发布一些私有包提供给指定用户时，就需要搭建自己的 PyPI Server。本篇主要记录使用 devpi 工具搭建 PyPI Server 源的过程，以及记录一些常用命令。 1. PyPI Server 比较 PyPI Server PyPI 代理镜像 本地缓存</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>工具</category></item><item><title>Django 开发规范(一)</title><link>https://www.chenshaowen.com/blog/development-specification-1-of-django.html</link><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 27 Jan 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/development-specification-1-of-django.html</guid><description>本文主要约定在 Django 开发过程中，需要注意的一些事项。统一的编码风格，良好的设计理念，有利于项目的开发和维护，值得开发人员不断地研究和探讨。 1. 编码声明 在 Python 解释器执行代码时，需要告诉解释器代码的编码方式。Python 代码实际上是文本数据，如果代码的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Python</category><category>规范</category><category>研发</category></item><item><title>Python 的类函数方法</title><link>https://www.chenshaowen.com/blog/class-function-method-of-python.html</link><pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate><atom:modified>Fri, 29 Dec 2017 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/class-function-method-of-python.html</guid><description>1. 函数方法 函数是组织好的，可重复使用的，用来实现单一或相关联功能的代码片段。函数能提高应用的模块性，代码的重复利用率。Python 提供了许多内建函数，比如 print()、str()。同时，Python 也允许用户创建函数，这被叫做自定义函数。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>规范</category><category>函数</category></item><item><title>交互式笔记本-Jupyter</title><link>https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</link><pubDate>Mon, 25 Dec 2017 17:22:45 +0000</pubDate><atom:modified>Mon, 25 Dec 2017 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</guid><description>1. 简介 Jupyter Notebook（前称 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。 Jupyter Notebook 实际上是一个 Web 应用程序，可以创建和共享程序文档，支持实时代码，数学方程，可视化和 Markdown。 用途包括：数据清理和转换，数值模拟，统计建模</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>Python</category><category>笔记</category><category>Jupyter</category></item><item><title>如何学习一门新的编程语言 - 以 Python 为例</title><link>https://www.chenshaowen.com/blog/how-to-learn-a-new-programming-language-taking-python-as-an-example.html</link><pubDate>Fri, 13 Oct 2017 23:00:06 +0000</pubDate><atom:modified>Fri, 13 Oct 2017 23:00:06 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-learn-a-new-programming-language-taking-python-as-an-example.html</guid><description>1. 了解新语言产生的背景 ABC 是专门为非专业程序员设计的一种教学语言，但是由于其封闭，并未取得成功。1989年的圣诞节期间，吉多·范罗苏姆开发了一个新的脚本解释器，并命名为 Python，作为 ABC 语言的一种继承。新的脚本解释器开放，完美结合了 Unix Shell 和 C</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category></item><item><title>怎样打包一个 Python 包，并上传到 PyPi</title><link>https://www.chenshaowen.com/blog/how-to-pack-a-python-package-and-upload-it-to-pypi.html</link><pubDate>Fri, 06 Oct 2017 20:50:41 +0000</pubDate><atom:modified>Fri, 06 Oct 2017 20:50:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-pack-a-python-package-and-upload-it-to-pypi.html</guid><description>最近笔者在思考，怎样提高开发效率。从网络爬虫到数据处理，然后到人工智能。Python 的强大之处在于：拥有一大批开箱即用的工具包，不必重复造轮子，极大地提高了开发的效率。那么为何不将项目中的功能模块化，打包成可复用的 Python 包呢？本文主要讲的是怎样</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>Django</category><category>部署</category></item><item><title>Django 静态文件处理</title><link>https://www.chenshaowen.com/blog/django-static-file-processing.html</link><pubDate>Thu, 05 Oct 2017 15:42:27 +0000</pubDate><atom:modified>Thu, 05 Oct 2017 15:42:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-static-file-processing.html</guid><description>1. Django 静态文件分类 Django 静态文件分为两类：static 和 media。 static： 是页面引用的 JS、CSS、Image 等文件 media：是用户上传的文件 2. 生产环境配置 生产环境，通常配置 Nginx 转发静态文件请求，而 Django 处理动态请求。 nginx 配置 1 2 3 4 5 6 7 location /media</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>前端</category><category>文件</category><category>Python</category></item><item><title>Django 大文件传输</title><link>https://www.chenshaowen.com/blog/django-big-file-transfer.html</link><pubDate>Tue, 26 Sep 2017 18:28:56 +0000</pubDate><atom:modified>Tue, 26 Sep 2017 18:28:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-big-file-transfer.html</guid><description>1. 直接返回文件 如果静态文件在工程根目录的 media/test.zip，需要先将文件读入内存，再进行传输。代码如下： settings.py 配置 1 2 PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__)) MEDIA_ROOT = os.path.join(PROJECT_ROOT, &amp;#39;media/&amp;#39;) yourapp/views.py 1 2 3 4 5 6 7 8 9 10 11 12 from django.conf import settings from django.http import HttpResponse from django.core.files.storage import FileSystemStorage def download_file_direct_from_file(request): file_system = FileSystemStorage(settings.MEDIA_ROOT) file_name = &amp;#39;test.zip&amp;#39; with file_system.open(file_name) as f: response = HttpResponse(f) response[&amp;#39;Content-Type&amp;#39;] = &amp;#39;application/%s&amp;#39; % file_name.split(&amp;#39;.&amp;#39;)[-1] response[&amp;#39;Content-Disposition&amp;#39;] = &amp;#39;attachment; filename=&amp;#34;%s&amp;#34;&amp;#39;% file_name return</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>Django</category><category>大文件</category><category>网络</category><category>Demo</category></item><item><title>Atom 打造轻量级的 Python 全栈 IDE</title><link>https://www.chenshaowen.com/blog/atom-create-lightweight-python-full-stack-ide.html</link><pubDate>Sun, 06 Aug 2017 14:51:16 +0000</pubDate><atom:modified>Sun, 06 Aug 2017 14:51:16 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/atom-create-lightweight-python-full-stack-ide.html</guid><description>目前，本人使用的是 PyCharm ，作为前后端的集成开发工具。主要的技术栈有，JavaScript，CSS，ECMAScript 6，Vue，Python，Django，Mako，Markdown。近期的前端开发工作逐渐增加，PyCharm 似乎有些力不从心</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>Python</category><category>研发</category><category>IDE</category><category>Atom</category><category>全栈</category></item><item><title>Django 信号</title><link>https://www.chenshaowen.com/blog/signal-of-django.html</link><pubDate>Thu, 13 Jul 2017 13:06:10 +0000</pubDate><atom:modified>Thu, 13 Jul 2017 13:06:10 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/signal-of-django.html</guid><description>1. 基本概念 Django内置了一个信号分发器。信号可以帮助解耦程序模块。在应用中其他地方发生某事件时，通知指定函数。信号允许某些 senders 通知一组 receivers 已经发生的行为。 2. 信号使用 2.1 声明信号 在使用信号之前，首先得创建信号实例，声明信号的接收参数列表。dja</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>后端</category><category>Python</category></item><item><title>Django 类视图</title><link>https://www.chenshaowen.com/blog/class-based-view-of-django.html</link><pubDate>Tue, 11 Jul 2017 16:36:56 +0000</pubDate><atom:modified>Tue, 11 Jul 2017 16:36:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/class-based-view-of-django.html</guid><description>Django中有两种视图，一种是函数式视图，另一种是类视图。视图的作用主要是，用于填充逻辑，返回响应体。函数式视图难以扩展，代码复用率低。而类视图可以利用继承、Mixins，快速复用、扩展功能。本文主要讨论了，Django对类视图的处理逻辑</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>后端</category><category>Python</category><category>类视图</category></item><item><title>Django 装饰器</title><link>https://www.chenshaowen.com/blog/django-decorator.html</link><pubDate>Thu, 22 Jun 2017 23:55:59 +0000</pubDate><atom:modified>Thu, 22 Jun 2017 23:55:59 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-decorator.html</guid><description>在前后端分离开发过程中，提供给前端的 API 接口，有的使用 GET 请求，有的使用 POST 请求。为了避免，后端在 views.py 的 request 中取值报错，需要在每个 view 函数中判断请求头的方法。于是，提取了一个公共的函数放在 utils.py 中，以便 view 函数引用。使用时依然繁琐，最后，在 Django 文档中找到了re</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Demo</category><category>装饰器</category><category>Python</category></item><item><title>Django 中间件</title><link>https://www.chenshaowen.com/blog/django-middleware.html</link><pubDate>Wed, 10 May 2017 19:39:12 +0000</pubDate><atom:modified>Wed, 10 May 2017 19:39:12 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-middleware.html</guid><description>1. __init__(self) 在中间件类中， __init__() 方法用于执行系统范围的初始化设置。 出于性能的考虑，每个已启用的中间件在每个服务器进程中只初始化一次。 也就是说 __init__() 仅在服务进程启动的时候调用，而在针对单个request处理时并不执行。 对一个middleware而言，定义 __init__() 方</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>Python</category><category>中间件</category></item><item><title>Python读写Excel</title><link>https://www.chenshaowen.com/blog/using-python-read-and-write-excel-data.html</link><pubDate>Sun, 16 Apr 2017 01:35:32 +0000</pubDate><atom:modified>Sun, 16 Apr 2017 01:35:32 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-python-read-and-write-excel-data.html</guid><description>Python、Excel常用于数据处理，难免会产生相互的数据传递、计算处理。本文主要介绍Python-Excel系列的库，以及xlrd和xlwt两个库是使用。 1. 常用库 xlwings，openpyxl，pandas，win32com，xlsx</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Demo</category><category>Python</category><category>数据</category></item><item><title>Dive Into Python</title><link>https://www.chenshaowen.com/blog/book/dive-into-python.html</link><pubDate>Fri, 24 Feb 2017 13:11:11 +0000</pubDate><atom:modified>Fri, 24 Feb 2017 13:11:11 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/dive-into-python.html</guid><description>作者: Mark Pilgrim 出版社: Apress 出版年: 2004-07-19 ISBN: 9781590593561</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>Python</category></item><item><title>Python的反射：getattr</title><link>https://www.chenshaowen.com/blog/reflection-of-python.html</link><pubDate>Fri, 17 Feb 2017 20:46:34 +0000</pubDate><atom:modified>Fri, 17 Feb 2017 20:46:34 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/reflection-of-python.html</guid><description>1. 应用场景 通过配置文件，控制程序运行时的流程。配置文件中常保存的是，字符串，而不是对象 调试程序时，查看对象的全部属性值 动态模块的导入 对于第一种场景，广泛被采用的是反射。在Java的很多框架中都使用了反射机制，Python实现的Web框架Dj</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>Demo</category></item><item><title>Python中常见的内建函数</title><link>https://www.chenshaowen.com/blog/built-in-functions-in-python.html</link><pubDate>Sat, 11 Feb 2017 13:48:34 +0000</pubDate><atom:modified>Sat, 11 Feb 2017 13:48:34 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/built-in-functions-in-python.html</guid><description>函数 描述 abs(number) 返回一个数的绝对值 apply(function[, args[, kwds]]) 调用给定函数，可选择提供参数 all(iterable) 如果所有iterable的元素均为真则返回True, 否则返回False any(iterable) 如果有任一iterable的元素为真则返回True，否则返回False basestring() str和unicode抽象超类，</description><dc:creator>微信公众号</dc:creator><category>Python</category><category>API</category><category>整理</category><category>函数</category></item><item><title>使用 Python 绘制分形: Koch 曲线、Julia 集、Mandelbrot 集</title><link>https://www.chenshaowen.com/blog/drawing-2d-fractal-graph-using-python.html</link><pubDate>Wed, 25 Jan 2017 23:28:00 +0000</pubDate><atom:modified>Wed, 25 Jan 2017 23:28:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/drawing-2d-fractal-graph-using-python.html</guid><description>1. Koch曲线 瑞典数学家Helge von Koch，在1904年发表的“从初等几何构造的一条没有切线的连续曲线”的论文中提出Korch曲线。它的描述如下： 指定一条线段的长度\(l\)（可以理解为第0次迭代） 将这条线段三等分，并以中间的线段为底边构</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>数学</category><category>Demo</category></item><item><title>Django的权限控制</title><link>https://www.chenshaowen.com/blog/django-permissions-control.html</link><pubDate>Sun, 22 Jan 2017 09:23:45 +0000</pubDate><atom:modified>Sun, 22 Jan 2017 09:23:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-permissions-control.html</guid><description>1. Django内置权限管理 1.1 权限分类 Permission 用来定义用户User A对任务Task的权限。 User 如果User A 对Model B有权限，那么User A 对Mode B中的全部实例都有相应权限。User对象的user_permission 字段用于管理用户的权限。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>开发</category><category>权限</category><category>Python</category></item><item><title>Python 自动化运维</title><link>https://www.chenshaowen.com/blog/automation-operations-with-python-technique-and-best-practices.html</link><pubDate>Mon, 02 Jan 2017 18:12:29 +0000</pubDate><atom:modified>Mon, 02 Jan 2017 18:12:29 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/automation-operations-with-python-technique-and-best-practices.html</guid><description>副标题: 技术与最佳实践 英文书名:Automation Operations With Python Technique And Best Practices 作者: 刘天斯 出版社: 机械工业出版社 出版年: 2014-11-1 ISBN: 9787111483069 Notes: 作者以其运维经历，详细描述了以python为基础的各种工具的使用和配置，是一本适合python运维人员的资料书。</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>Python</category></item><item><title>Django 浅析与工程目录结构实践</title><link>https://www.chenshaowen.com/blog/best-file-structure-of-django.html</link><pubDate>Sun, 01 Jan 2017 15:07:01 +0000</pubDate><atom:modified>Sun, 01 Jan 2017 15:07:01 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/best-file-structure-of-django.html</guid><description>1. Django是什么 Django是一套由Python完成的Web开发框架，起初被开发者用于管理以新闻内容为主的网站，2005年7月在BSD许可证发布下开源，2008年6月17日正式成立基金会。与Django一起的Python Web框架还有，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Python</category></item><item><title>Python的字符编码入门</title><link>https://www.chenshaowen.com/blog/python-coding.html</link><pubDate>Tue, 08 Nov 2016 20:21:42 +0000</pubDate><atom:modified>Tue, 08 Nov 2016 20:21:42 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/python-coding.html</guid><description>背景: 刚做完一个django的数据查询web项目，数据来源于内部API查询，每次查询都需要调用若干API查询数据渲染在前端页面。由于，相关的数据不会经常变动，为了提高前端响应速度、在API不可用时依然能够查询，设计了缓存。API查询到的数据</description><dc:creator>微信公众号</dc:creator><category>Python</category><category>编码</category><category>博文</category></item><item><title>Python核心编程（第二版）</title><link>https://www.chenshaowen.com/blog/book/core-python-programming-2nd.html</link><pubDate>Tue, 23 Aug 2016 09:55:49 +0000</pubDate><atom:modified>Tue, 23 Aug 2016 09:55:49 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/core-python-programming-2nd.html</guid><description>中文书名: Python核心编程（第二版 英文书名: Core Python Programming, 2nd Edition 作者: [美]Wesley J. Chun 出版年: 2008-06 ISBN: 9787115178503</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>Python</category></item></channel></rss>
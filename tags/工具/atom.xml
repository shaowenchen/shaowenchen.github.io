<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>工具 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Tue, 05 Sep 2023 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%B7%A5%E5%85%B7/atom.xml" rel="self" type="application/rss+xml"/><item><title>大模型部署工具 llama.cpp</title><link>https://www.chenshaowen.com/blog/llama-cpp-that-is-a-llm-deployment-tool.html</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><atom:modified>Tue, 05 Sep 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/llama-cpp-that-is-a-llm-deployment-tool.html</guid><description>1. 大模型部署工具 llama.cpp 大模型的研究分为训练和推理两个部分。训练的过程，实际上就是在寻找模型参数，使得模型的损失函数最小化，推理结果最优化的过程。训练完成之后，模型的参数就固定了，这时候就可以使用模型进行推理，对外提供服务。 llama.cpp 主要解决的是推理过程</description><dc:creator>微信公众号</dc:creator><category>AI</category><category>大模型</category><category>工具</category><category>llama.cpp</category><category>博文</category></item><item><title>文档工具化 - Ops 工具</title><link>https://www.chenshaowen.com/blog/a-open-source-ops-tool-project.html</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><atom:modified>Tue, 11 Apr 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-open-source-ops-tool-project.html</guid><description>1. 什么是文档工具化 文档工具化，工具产品化，是我之前博文中反复提过的一个口号。 好的文档，不如好用的工具。一个脚本、一条命令，比阅读文档更加直接，更能快速解决问题。同时，有很多文档会让读者对知识产生眩晕，在急于解决问题的窗口期无法补全知识体系的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Ops</category><category>工具</category><category>项目</category><category>开源</category></item><item><title>使用 Falco 监听运行时安全</title><link>https://www.chenshaowen.com/blog/listen-runtime-security-using-falco.html</link><pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Sat, 11 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/listen-runtime-security-using-falco.html</guid><description>1. Falco 是什么 Falco 是由 Sysdig 贡献给 CNCF 的云原生运行时安全相关项目。 Falco 实现了一套可扩展的事件规则过滤引擎，通过获取事件、匹配安全规则、产生告警通知系列操作，能够发现系统中的安全问题。其中的事件来自系统调用，同时也支持 ebpf 探针，规则是开源的[1]，可以自行定</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Falco</category><category>安全</category><category>工具</category></item><item><title>Linux 网络流量监控终端工具 - nload</title><link>https://www.chenshaowen.com/blog/the-nload-is-a-the-terminal-tool-of-linux-network-traffic-monitor.html</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-nload-is-a-the-terminal-tool-of-linux-network-traffic-monitor.html</guid><description>nload 是一个流量监控的终端工具，读取 /proc/net/dev 文件，绘制流量图。下面是一个简单的使用简介。 1. 安装 CentOS 1 yum install -y nload 如果系统的源找不到 nload 包，可以执行如下命令添加新源: 1 yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Ubuntu 1 apt-get install -y nload 2. 参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 nload --help Command line syntax: nload [options] [devices] nload --help|-h Options: -a</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Linux</category><category>工具</category><category>nload</category></item><item><title>如何远程触发 GitHub Action</title><link>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</guid><description>通常，我们需要在 GitHub 上进行一些操作，才能触发 GitHub Action。本篇将介绍一种通过 API 远程调用触发 GitHub Action 的方法。 1. 常见的几种触发 GitHub Action 的方式 下面是一个 GitHub Action 的示例: 1 2 3 4 5 6 7 name: GitHub Actions Demo on: [push, pull_request] jobs: Explore-GitHub-Actions: runs-on: ubuntu-latest steps: - run: echo &amp;#34;Hello World!&amp;#34; 在 on 关键字下，定义的就是触发 Workflow 执行的事件。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>如何给 GitHub Actions 添加自己的 Runner 主机</title><link>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</guid><description>1. 什么是 GitHub Actions 在前面的文档中，我对 GitLab 提供的 CI 功能进行了实践，点击查看 。使用 GitLab 的好处是可以私有化部署、无限的私有仓库数量、CI 配置简单、能接入自建的 Runner 。但随着 GitHub 越来越开放，GitLab 的这些优势在逐步丧失。 从 CICD 的角度看，越接近 Git 仓库的功能，越贴</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>如何配置高效的 Kubernetes 命令行终端</title><link>https://www.chenshaowen.com/blog/how-to-configure-efficient-k8s-terminal.html</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 16 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-configure-efficient-k8s-terminal.html</guid><description>磨刀不误砍柴工，无论什么时候，花点时间在工具链上都是值得的。 1. 自动补全 - kubectl OS X 安装命令： 1 brew install bash-complete@2 不仅仅是 kubectl ，也给其他命令行提供自动补全的命令提示。 在 .zshrc 中添加如下内容： 1 2 # kubectl complete source &amp;lt;(kubectl completion zsh) 在输入 kubectl get pod 命令时，键入 Tab 会自动列举当前类型下的资源，如</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>命令行</category><category>工具</category></item><item><title>Homebrew 使用</title><link>https://www.chenshaowen.com/blog/the-use-of-homebrew.html</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 15 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-use-of-homebrew.html</guid><description>Homebrew 是 OS X 下的包管理工具，类似 CentOS 的 yum ，Ubuntu 的 apt-get 。在 OS X 命令行下，可以通过 brew 和 brew cask 命令安装应用。 1. 安装 brew cask 1 brew install brew-cask-completion 2. brew 和 brew cask 区别 brew 与 brew cask 的区别在于偏向的应用类型。brew 更偏向于开发人员，主要安装命令行工具；brew cask 偏向日常用户，主要</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Homebrew</category><category>命令行</category><category>工具</category></item><item><title>使用 frp 将本地服务发布到公网</title><link>https://www.chenshaowen.com/blog/using-frp-to-publish-local-service-to-public-network.html</link><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Wed, 07 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-frp-to-publish-local-service-to-public-network.html</guid><description>1. 什么是 frp frp 是一个高性能的反向代理应用，提供的功能有： 利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务 对于 http、https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口 利用处于内网或防火墙后的机器，对</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>FRP</category><category>Demo</category><category>工具</category></item><item><title>Windows 下正确使用 Vim 的方式</title><link>https://www.chenshaowen.com/blog/correct-way-to-use-vim-on-windows.html</link><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 12 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/correct-way-to-use-vim-on-windows.html</guid><description>之前使用过 Gygwin，也是用过 Git Bash。但在 Vim 面前，这两货都不好使，最终选择了 MSYS2 作为 Console 端。 1. Cygwin、MinGW、MSYS2 比较 在 Windows 下，使用 Vim 的关键在于找到一个合适的 Console。在安装 Vim 插件时，合适的 Console，能帮你避开大</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Vim</category><category>工具</category><category>Windows</category></item><item><title>Vim 必备插件</title><link>https://www.chenshaowen.com/blog/vim-necessary-plugin.html</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/vim-necessary-plugin.html</guid><description>1. nerdtree 生成文件目录树 1 2 &amp;#34; 文件目录树 Plugin &amp;#39;scrooloose/nerdtree&amp;#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;#34;===================================================== &amp;#34;&amp;#34; NERDTree 配置 &amp;#34;===================================================== let NERDTreeChDirMode=1 &amp;#34;显示书签&amp;#34; let NERDTreeShowBookmarks=1 &amp;#34;设置忽略文件类型&amp;#34; let NERDTreeIgnore=[&amp;#39;\~$&amp;#39;, &amp;#39;\.pyc$&amp;#39;, &amp;#39;\.swp$&amp;#39;,&amp;#39;\.pyo$&amp;#39;, &amp;#39;__pycache__$&amp;#39;] &amp;#34;窗口大小&amp;#34; let NERDTreeWinSize=40 autocmd VimEnter * if !argc() | NERDTree | endif &amp;#34; Load NERDTree only if vim is run without arguments &amp;#34;按</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Vim</category><category>插件</category><category>工具</category></item><item><title>Windows 下 Vim 安装与配置</title><link>https://www.chenshaowen.com/blog/vim-installation-and-configuration-on-windows-os.html</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Mon, 06 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/vim-installation-and-configuration-on-windows-os.html</guid><description>1. Vim 简介 Vim 是基于 vi 发展出来的一个编辑器，第一个版本由布萊姆·米勒在 1991 年发布。最初的名称是 Vi IMitation，随着功能的不断增加，正式更名为 Vi IMproved。 上面是常见编辑器的学习曲线。对于大多数用户， Vim 有着比较陡峭的学习曲线。也就是说刚</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Vim</category><category>工具</category><category>Windows</category></item><item><title>Python 下各种环境隔离工具简介</title><link>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</guid><description>1. 非标准库 1.1 virtualenv virtualenv 是一个非常流行的用于创建独立的python libraries环境的工具。我强烈推荐你学习并了解它，因为他非常实用，并且应用广泛，很多人用它来搭建python开发环境。后面其他工具来主要与virtualenv来进行比较以说明差</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Python</category><category>工具</category><category>环境</category></item><item><title>PPT 制作攻略之呈现篇课程笔记</title><link>https://www.chenshaowen.com/blog/notes-on-making-strategy-of-the-presentation.html</link><pubDate>Tue, 06 Mar 2018 20:55:29 +0000</pubDate><atom:modified>Tue, 06 Mar 2018 20:55:29 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/notes-on-making-strategy-of-the-presentation.html</guid><description>1. 概况 课程前置条件：已经完成 PowerPoint 逻辑梳理和内容撰写。 课程主要从以下六个部分，来增强 PowerPoint 的表现力： 色彩 文字 图形 图表 母版 动画 2. 色彩 2.1 认识色彩 色相 彩色，如紫色、青色、品红等。中性色，如黑、白、灰。 亮度 色彩的明暗程度，亮度值越高，色彩越白，亮度越低，色</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>PPT</category><category>工具</category></item><item><title>如何使用 devpi 搭建 PyPI Server</title><link>https://www.chenshaowen.com/blog/how-to-build-a-pypi-server-using-devpi.html</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 04 Mar 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-build-a-pypi-server-using-devpi.html</guid><description>使用 pip 命令安装 Python 包时，默认去 https://pypi.python.org/simple/ 源查找相应的包，下载并安装。但是在内网环境，或者需要发布一些私有包提供给指定用户时，就需要搭建自己的 PyPI Server。本篇主要记录使用 devpi 工具搭建 PyPI Server 源的过程，以及记录一些常用命令。 1. PyPI Server 比较 PyPI Server PyPI 代理镜像 本地缓存</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>工具</category></item><item><title>Etcd、Confd 、Nginx 服务发现</title><link>https://www.chenshaowen.com/blog/service-discovery-etcd-confd-nginx.html</link><pubDate>Thu, 08 Feb 2018 14:51:16 +0000</pubDate><atom:modified>Thu, 08 Feb 2018 14:51:16 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/service-discovery-etcd-confd-nginx.html</guid><description>本篇主要阐述了为什么需要服务发现功能，对几种服务发现工具进行了比较。同时，在 CentOS 上，对 Etcd、Confd 、Nginx 实现服务发现功能进行了实践。 1. 服务注册与发现 1.1 为什么需要注册和发现服务 随着微服务的兴起，大量接口服务化。当新的微服务加入或微</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>微服务</category><category>Etcd</category><category>Confd</category><category>Nginx</category><category>服务发现</category></item><item><title>ELK 日志搜索实践</title><link>https://www.chenshaowen.com/blog/elk-log-search-practice.html</link><pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 03 Feb 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/elk-log-search-practice.html</guid><description>本文主要简单介绍了 ELK 的技术栈，并给出了 Docker compose 的编排配置。阅读本文，可在本地通过 Docker 将 ELK 跑起来。后续会将 ELK 在服务器上进行部署，相关的配置再补充。 1. ELK 技术栈介绍 ELK 其实并不是一款软件，而是一整套解决方案，是三个软件产品的首字母缩写，Elasticse</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>日志</category><category>搜索</category></item><item><title>我的工具箱</title><link>https://www.chenshaowen.com/blog/toolbox.html</link><pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 16 Jan 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/toolbox.html</guid><description>1. 文档 Pandoc Pandoc 是一个用 haskell 编写的文本转换工具，转换速度快，支持格式广泛。可以将 Markdown、LaTeX 等格式转换为 HTML、Docs 、PDF 等格式。 而只需要执行简单的语句： 1 pandoc mypaper.md -o mypaper.docx Graphviz 一个由 AT&amp;amp;T 实验室开发的开源工具包，用于绘制 DOT 语言脚本描述的图</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category></item><item><title>交互式笔记本-Jupyter</title><link>https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</link><pubDate>Mon, 25 Dec 2017 17:22:45 +0000</pubDate><atom:modified>Mon, 25 Dec 2017 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</guid><description>1. 简介 Jupyter Notebook（前称 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。 Jupyter Notebook 实际上是一个 Web 应用程序，可以创建和共享程序文档，支持实时代码，数学方程，可视化和 Markdown。 用途包括：数据清理和转换，数值模拟，统计建模</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>Python</category><category>笔记</category><category>Jupyter</category></item><item><title>常用 Git 命令</title><link>https://www.chenshaowen.com/blog/common-git-commands.html</link><pubDate>Mon, 18 Dec 2017 11:22:55 +0000</pubDate><atom:modified>Mon, 18 Dec 2017 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-git-commands.html</guid><description>1. 基本概念 Workspace：工作区，工程文件 Index：暂存区，也叫待提交更新区，在提交进入 repo 之前，把所有的更新放在暂存区 Local Repository：本地仓库，存放在本地的版本库，HEAD 指向当前的开发分支 Remote Repository：远程仓库，远</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Git</category><category>工具</category></item><item><title>如何将博客从 Ghost 迁移到 Hexo</title><link>https://www.chenshaowen.com/blog/how-to-migrating-blogs-to-hexo.html</link><pubDate>Sun, 10 Dec 2017 11:22:55 +0000</pubDate><atom:modified>Sun, 10 Dec 2017 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-migrating-blogs-to-hexo.html</guid><description>1. Hexo 简介 Hexo 是使用 Node.js 开发的一个简洁、高效、开源的静态博客生成器。Hexo 能够以非常快的速度将 Markdown 渲染成静态的 HTML 文件。类似于 Jekyll、Ghost、Octopress，可以用于创建博客。 Hexo 具有如下优势： 使用 Node.js ，搭建环境简单。Jekyll 搭建环境</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>Hexo</category></item><item><title>GitLab CI 之前端 Webpack 实践</title><link>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</link><pubDate>Wed, 08 Nov 2017 09:15:56 +0000</pubDate><atom:modified>Wed, 08 Nov 2017 09:15:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</guid><description>从 GitLab 8.0 开始，GitLab 开始集成 CI（持续集成） 功能。只需要在服务器上添加一个 Runner，同时在项目中添加一个 .gitlab-ci.yml 文件，就可以进行 CI。在 GitLab 搭建与配置 中笔者记录了从零开始搭建 GitLab 服务的整个流程。在 GitLab CI 持续集成 中笔者交代了 GitLab CI 的一些基本概念，并</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>持续集成</category><category>工具</category><category>DevOps</category><category>GitLab</category><category>CICD</category></item><item><title>Django 调试工具 django-debug-toolbar</title><link>https://www.chenshaowen.com/blog/django-debug-toolbar.html</link><pubDate>Fri, 06 Oct 2017 10:45:58 +0000</pubDate><atom:modified>Fri, 06 Oct 2017 10:45:58 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-debug-toolbar.html</guid><description>1. 关于 Django 的性能 Django 是一个 Python 写的 Web 应用框架。使用 Django ，可以非常简单、高效地开发复杂的数据驱动的网站。同时，Django 非常注重组件的重用性、可插拔、敏捷开发、DRY（Don&amp;rsquo;t Repeat Yourself）。从一定程度上讲，Django 是一个很</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>工具</category><category>测试</category><category>性能</category><category>调试</category></item><item><title>Vagrant 搭建 Django 开发环境</title><link>https://www.chenshaowen.com/blog/build-django-development-environment-using-vagrant.html</link><pubDate>Mon, 25 Sep 2017 21:56:05 +0000</pubDate><atom:modified>Mon, 25 Sep 2017 21:56:05 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-django-development-environment-using-vagrant.html</guid><description>Docker 解决了同一机器上的环境隔离问题，提高了运维部署的效率。 Vagrant 给开发提供一个统一的开发、测试、接近于完全隔离的环境。本文，主要讨论如何使用 Vagrant 搭建 Django 开发环境。版本：VirtualBox 5.0，Vagrant 1.8。 1. 基本概念 1.1 Vagrant Vagrant 是一个用来构建虚</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Vagrant</category><category>工具</category><category>开发</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (6) uWSGI、Django</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-6.html</link><pubDate>Sun, 24 Sep 2017 18:03:22 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 18:03:22 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-6.html</guid><description>1. 目录结构 django-devops-uwsgi 目录是打包 uWSGI 和 Django 的镜像编译文件。在镜像中安装 uWSGI、pip、virtualenv等必要的程序包。 在使用镜像创建容器时，执行 start.sh 脚本， 创建 Python 虚拟运行环境，从 Django 的 requirements.txt 安装依赖包，最后启动 uWSGI 监听端口，等待请求。 django-devops-compose/www/app 目录，用于放置 Django 的代码</description><dc:creator>微信公众号</dc:creator><category>Docker</category><category>Django</category><category>服务</category><category>工具</category><category>博文</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (5) Nginx</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-5.html</link><pubDate>Sun, 24 Sep 2017 14:34:35 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 14:34:35 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-5.html</guid><description>1. 目录结构 1 2 3 4 5 6 7 8 9 10 11 12 ├── django-devops-nginx │ ├── Dockerfile │ └── nginx.repo ├── django-devops-compose │ ├── docker-compose.yml │ ├── www │ ├── conf │ │ ├── nginx.conf │ ├── log │ │ ├── nginx │ │ │ ├── access.log │ │ │ ├── error.log 每个服务的镜像 Dockerfile，单独放在一个文件夹。django-devo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category><category>Nginx</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (4) 项目组织</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-4.html</link><pubDate>Sun, 24 Sep 2017 13:32:40 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 13:32:40 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-4.html</guid><description>1. 部署架构 浏览器访问一个页面的程序处理流程： (1)，浏览器向 Nginx 发起一个请求，如果匹配到 Nginx 的静态 URL，比如 /static 目录下的 js、css、404.html 等文件，那么 Nginx 直接返回文件。其他请求 URL，通过 uwsgi_pass 配置转给 uWSGI 处理。 (2)，uWSGI 解析请求头</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (3) Docker Compose</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-3.html</link><pubDate>Sat, 23 Sep 2017 19:56:03 +0000</pubDate><atom:modified>Sat, 23 Sep 2017 19:56:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-3.html</guid><description>1. 基本概念 Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。使用 Docker Compose，可以在一个文件中定义一个多容器应用，然后使用一条命令来启动你的应用，完成一切准备工作。 Docker Compose 定位是 &amp;lsquo;defining and running complex applications with Docker&amp;rsquo;，前身是 Fig，兼容 Fig 的模板文件</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (2) Dockerfile</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-2.html</link><pubDate>Fri, 22 Sep 2017 19:52:27 +0000</pubDate><atom:modified>Fri, 22 Sep 2017 19:52:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-2.html</guid><description>1. 基本概念 Dockerfile 是一些列构建 Docker 镜像的指令集合。Docker 通过读取 Dockerfile 指令自动构建镜像。Dockerfile 类似于 Makefile，都是一种文本文件，按照构建镜像顺序组织所有的指令。 Docker 镜像的构建命令： 1 docker build . 这条命令中，Docker CLI 的处理流程如</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (1) 环境搭建</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-1.html</link><pubDate>Thu, 21 Sep 2017 09:38:47 +0000</pubDate><atom:modified>Thu, 21 Sep 2017 09:38:47 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-1.html</guid><description>Vagrant 适合用来管理虚拟机，而 Docker 适合用来管理应用环境。为了更好地模拟真实运行环境，本系列文章借助 Docker 和 Docker Compose 搭建 Nginx + uWSGI+ Django + MySQL + Redis + Rabbit 的开发环境。 1. 基本概念 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包应用以及依赖</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>GitLab CI 持续集成</title><link>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</link><pubDate>Sun, 13 Aug 2017 08:03:17 +0000</pubDate><atom:modified>Sun, 13 Aug 2017 08:03:17 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</guid><description>1. 基本概念 GitLab-CI：GitLab 提供的持续集成系统，管理项目的构建状态，通过 GitLab Runner 来执行构建任务。 GitLab-Runner：用于执行构建任务，.gitlab-ci.yml 的 script 部分的运行就是由 GitLab-Runner 来完成。 .gitlab-ci.yml：</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>工具</category><category>持续集成</category><category>GitLab</category></item><item><title>GitLab 搭建与配置</title><link>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</link><pubDate>Sat, 12 Aug 2017 00:51:07 +0000</pubDate><atom:modified>Sat, 12 Aug 2017 00:51:07 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</guid><description>1. 简介 GitLab 是一个利用 Ruby on Rails 开发的开源应用程序，实现了自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。 它拥有与 GitHub 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Demo</category><category>工具</category><category>管理</category><category>持续集成</category><category>GitLab</category><category>DevOps</category></item><item><title>Atom 打造轻量级的 Python 全栈 IDE</title><link>https://www.chenshaowen.com/blog/atom-create-lightweight-python-full-stack-ide.html</link><pubDate>Sun, 06 Aug 2017 14:51:16 +0000</pubDate><atom:modified>Sun, 06 Aug 2017 14:51:16 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/atom-create-lightweight-python-full-stack-ide.html</guid><description>目前，本人使用的是 PyCharm ，作为前后端的集成开发工具。主要的技术栈有，JavaScript，CSS，ECMAScript 6，Vue，Python，Django，Mako，Markdown。近期的前端开发工作逐渐增加，PyCharm 似乎有些力不从心</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>Python</category><category>研发</category><category>IDE</category><category>Atom</category><category>全栈</category></item><item><title>程序员的编辑器 - Atom</title><link>https://www.chenshaowen.com/blog/programming-editor-atom.html</link><pubDate>Fri, 04 Aug 2017 23:46:56 +0000</pubDate><atom:modified>Fri, 04 Aug 2017 23:46:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/programming-editor-atom.html</guid><description>1. Atom 简介 Atom 是支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且在 GitHub 上开源的代码编辑器。立即前往 1.1 优缺点 主要优点 开发维护团队强大，开源项目，修复 Bug 速度快，生态圈成长速度快。 快捷键支持特别好，熟悉了各种快捷键后可以成倍提高生成效</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>开发</category></item><item><title>Axios ajax</title><link>https://www.chenshaowen.com/blog/axios-ajax.html</link><pubDate>Fri, 04 Aug 2017 07:07:11 +0000</pubDate><atom:modified>Fri, 04 Aug 2017 07:07:11 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/axios-ajax.html</guid><description>1. 基本概念 1.1 Ajax Ajax 全称为 &amp;quot; Asynchronous JavaScript and XML &amp;ldquo;（异步 JavaScript 和 XML ）。其核心由 JavaScript、XmlHttpRequest 、DOM 对象组成，通过 XmlHttpRequest 对象，向服务器发送异步请求，从服务器获得数据，然后用 JavaScript 来操作 DOM 而更新页面。 以 Jquery 为例： 1 2 3 4 5 6</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>工具</category><category>Axios</category><category>Ajax</category><category>API</category></item><item><title>Vue.js 组件库</title><link>https://www.chenshaowen.com/blog/vuejs-component-library.html</link><pubDate>Thu, 03 Aug 2017 21:53:02 +0000</pubDate><atom:modified>Thu, 03 Aug 2017 21:53:02 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/vuejs-component-library.html</guid><description>1. UI组件 element - 饿了么出品的Vue2的web UI工具套件 Vux - 基于Vue和WeUI的组件库 iview - 基于 Vuejs 的开源 UI 组件库 mint-ui - Vue 2的移动UI元素 muse-ui - 三端样式一致的响应式 UI 库 vue-material - 通过Vue Material和Vue 2建立精美的app应用 vuetify - 为移动而生的Vu</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>前端</category><category>工具</category><category>组件</category><category>Vuejs</category><category>转载</category></item><item><title>自动化测试工具 - Selenium</title><link>https://www.chenshaowen.com/blog/automated-testing-tool-about-selenium.html</link><pubDate>Sat, 22 Jul 2017 15:19:42 +0000</pubDate><atom:modified>Sat, 22 Jul 2017 15:19:42 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/automated-testing-tool-about-selenium.html</guid><description>1. Selenium 简介 Selenium 是一个 Thoughtworks 公司的集成测试工具。Selenium 的核心 Selenium Core 基于 JSUnit，完全由 JavaScript 编写，可以运行于任何支持 JavaScript 的浏览器上。 1.1 主要功能和特点 开源、免费。 多浏览器支持：Firefox、Chrome、IE、Opera，可以用于兼容性测试。 多</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>测试</category></item><item><title>Jenkins 集成 GitHub 开发</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</link><pubDate>Tue, 18 Jul 2017 21:29:41 +0000</pubDate><atom:modified>Tue, 18 Jul 2017 21:29:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</guid><description>1. 基本概念 持续集成，Continuous Integration 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 持续交付，Continuous Delivery 持续交付在持续集成的基础上，将集成后</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>开发</category><category>Jenkins</category><category>GitHub</category><category>DevOps</category></item><item><title>Graphviz 工具包 DOT 绘图</title><link>https://www.chenshaowen.com/blog/drawing-toolkit-of-dot-using-graphviz.html</link><pubDate>Fri, 14 Jul 2017 12:32:44 +0000</pubDate><atom:modified>Fri, 14 Jul 2017 12:32:44 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/drawing-toolkit-of-dot-using-graphviz.html</guid><description>1. 简介 Graphviz是贝尔实验室开发的一个开源的绘图工具包。它使用一个特定的DSL（领域特定语言）: DOT作为脚本语言。使用布局引擎来解析DOT脚本，完成自动布局。支持丰富的导出格式，例如：PNG、JPG、PostScript、SVG、P</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>图</category><category>工具</category><category>Graphviz</category><category>绘图</category></item><item><title>Vue + Webpack 开发</title><link>https://www.chenshaowen.com/blog/101-of-vue-and-webpack-project.html</link><pubDate>Wed, 12 Jul 2017 17:26:29 +0000</pubDate><atom:modified>Wed, 12 Jul 2017 17:26:29 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/101-of-vue-and-webpack-project.html</guid><description>1，初始化项目 vue-cli 是Vue官方发布的项目脚手架，使用 vue-cli 可以快速创建 Vue + Webpack项目。 1 2 3 4 5 6 7 8 9 10 npm install -g vue-cli # 全局安装vue-cli vue init webpack myproject # 创建vue项目，执行时，会提示输入项目的相关信息 cd myproject # 进入项目 npm install # 安装依赖包，新建nod</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>工具</category><category>Vue</category><category>Webpack</category></item><item><title>安全扫描工具Arachni源码分析（一）</title><link>https://www.chenshaowen.com/blog/source-code-analysis-of-arachni-1.html</link><pubDate>Fri, 16 Jun 2017 21:02:22 +0000</pubDate><atom:modified>Fri, 16 Jun 2017 21:02:22 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/source-code-analysis-of-arachni-1.html</guid><description>Arachni是一个基于Ruby on Rails框架的Web安全漏洞扫描工具。 1. Ruby on Rails Ruby on Rails ，缩写ROR，是一个Web框架，包括两部分内容： Ruby 语言和 Rails 框架。Ruby一直以来流行于日本，直到2004年，26 岁的丹麦人 David Heinemeier Hansson 提出了Web框架 - Rai</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>安全</category><category>源码</category></item><item><title>Django 中的 manage 命令</title><link>https://www.chenshaowen.com/blog/manage-command-in-django.html</link><pubDate>Mon, 15 May 2017 21:14:48 +0000</pubDate><atom:modified>Mon, 15 May 2017 21:14:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/manage-command-in-django.html</guid><description>每个Django项目中都会自动生成一个manage.py文件。manage.py是对django-admin的一个简单包装，其功能是将Django Project放到sys.path目录中，设置 DJANGO_SETTINGS_MODULE 环境变量为当前Project的setting.</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>工具</category><category>命令</category></item><item><title>Vuejs入门实践</title><link>https://www.chenshaowen.com/blog/101-about-vuejs.html</link><pubDate>Mon, 02 Jan 2017 19:55:16 +0000</pubDate><atom:modified>Mon, 02 Jan 2017 19:55:16 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/101-about-vuejs.html</guid><description>1. 遇到了什么问题 如果实现的功能简单，开发和维护容易，是不会有设计模式、框架等相关问题研究的。正是因为，Web系统复杂、需求变更快、复用多，开发人员多、人员交接频繁。我们需要一定的约定规则去规避，这些环节产生的风险。 其中大量的研究工作在，系统</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>工具</category><category>Vuejs</category></item><item><title>一个成功的 Git 分支模型</title><link>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</link><pubDate>Sun, 04 Dec 2016 20:34:03 +0000</pubDate><atom:modified>Sun, 04 Dec 2016 20:34:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</guid><description>这篇围绕全部源代码的控制工具Git展开。 1. 为什么是Git? 为了深入探讨git和集中式源码版本控制系统的利弊，参见这里。这方面有太多的激烈争论。作为一个开发者，相比其他工具，当前我更喜欢Git。Git的确改变了开发者关于合并与分支的思考方式。</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>工具</category><category>Git</category><category>研发</category></item><item><title>前端自动化构建工具 gulpjs</title><link>https://www.chenshaowen.com/blog/front-auto-build-tools-gulp.html</link><pubDate>Tue, 28 Jun 2016 21:59:04 +0000</pubDate><atom:modified>Tue, 28 Jun 2016 21:59:04 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/front-auto-build-tools-gulp.html</guid><description>1. 前端自动化构建工具 在处理前端场景时，用 Less 写 CSS，用 Jade 写 HTML，用 Browserify 模块化，为非覆盖式部署的资源加 MD5 戳等。这些工作如果纯手工来做，工作效率将会非常低。而前端自动化构建工具可以把这些重复工作一次配置，多次重复执行，极大的提高开发效率。 前端</description><dc:creator>微信公众号</dc:creator><category>前端</category><category>工具</category><category>博文</category></item></channel></rss>
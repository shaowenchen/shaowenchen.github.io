<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>微服务 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><description>Recent content in 微服务 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 01 Sep 2021 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/atom.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 下的网关服务 - APISIX</title><link>https://www.chenshaowen.com/blog/a-gateway-under-kubernetes-named-apisix.html</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 01 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-gateway-under-kubernetes-named-apisix.html</guid><description>1. 几种常见网关的比较 Nginx, 模块化设计的反向代理软件，C 语言开发 OpenResty, 以 Nginx 为核心的 Web 开发平台，可以解析执行 Lua 脚本 Kong, OpenResty 的一个应用，是一个 API 网关，具有 API 管理和请求代理的功能，使用 PostgreSQL 存储 APISIX, 替换了 Kong 的 PostgreSQL 为 Etcd，基于 Nginx 的核心库实现 APISIX 的优势在于提供了 API 的管理</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>APISIX</category><category>微服务</category></item><item><title>Etcd、Confd 、Nginx 服务发现</title><link>https://www.chenshaowen.com/blog/service-discovery-etcd-confd-nginx.html</link><pubDate>Thu, 08 Feb 2018 14:51:16 +0000</pubDate><atom:modified>Thu, 08 Feb 2018 14:51:16 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/service-discovery-etcd-confd-nginx.html</guid><description>本篇主要阐述了为什么需要服务发现功能，对几种服务发现工具进行了比较。同时，在 CentOS 上，对 Etcd、Confd 、Nginx 实现服务发现功能进行了实践。 1. 服务注册与发现 1.1 为什么需要注册和发现服务 随着微服务的兴起，大量接口服务化。当新的微服务加入或微</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>微服务</category><category>Etcd</category><category>Confd</category><category>Nginx</category><category>服务发现</category></item><item><title>后端服务之接口流量控制</title><link>https://www.chenshaowen.com/blog/rate-limiting-of-api.html</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 11 Jan 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/rate-limiting-of-api.html</guid><description>1. 流控 缓存、降级和限流是保护高并发系统的常用方法。缓存以空间换时间、减少了 CPU 和网络调用的耗时；降级保护了核心服务的高可用，高峰时段延时或拒绝处理非核心请求；限流是通过限制并发请求来保护系统。 限流就是，在有限资源的情况下，每个 API 接口单位时间内</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>接口</category><category>微服务</category></item></channel></rss>
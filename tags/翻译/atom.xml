<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>翻译 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E7%BF%BB%E8%AF%91/</link><description>Recent content in 翻译 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 17 Sep 2022 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E7%BF%BB%E8%AF%91/atom.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 网络流量转发详解</title><link>https://www.chenshaowen.com/blog/kubernetes-network-packets.html</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><atom:modified>Sat, 17 Sep 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/kubernetes-network-packets.html</guid><description>本文翻译自 https://learnk8s.io/kubernetes-network-packets，并没有逐字翻译，带入了些自己的理解。 阅读本文，你可以了解在 Kubernetes 内外，数据包是如何转发的，从原始的 Web 请求开始，到托管应用程序的容器。 Kubernetes 网络要</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>Kubernetes</category><category>网络</category></item><item><title>DevOps 工具链之 Lighthouse 介绍</title><link>https://www.chenshaowen.com/blog/lighthouse-of-devops-tool-chain.html</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 05 Mar 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/lighthouse-of-devops-tool-chain.html</guid><description>本文介绍一个 ChatOps 工具 Lighthouse, 主要内容来自官方文档 。Kubernetes 社区使用 Prow 驱动其在 GitHub 上的协作, 但是不适用于其他仓库。Lighthouse 普适于更多类型的 Git 仓库。 1. 什么是 Lighthouse Lighthouse 是一个基于 webhooks 的轻量级 ChatOps 工具 , 通过 Git 仓库的 webhooks 可以触发 Jenkins X 流水线 、Tekt</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>DevOps</category><category>Prow</category><category>Kubernetes</category><category>CICD</category><category>Lighthouse</category></item><item><title>Tekton Hub 正式上线 - https://hub.tekton.dev/</title><link>https://www.chenshaowen.com/blog/tekton-hub-is-live.html</link><pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 24 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/tekton-hub-is-live.html</guid><description>原文由来自 Red Hat (CDF 成员) 的 Puneet Punamiya 撰写。 Tekton 是持续交付基金会 (CDF) 下的一个开源项目。它提供了一个以云原生构建 CI/CD 系统的框架。简单点说, 人们可以将整个 CI/CD 流水线定义为 Kubernetes 资源。 Tekton Pipelines 的核心是一个可复用的组件 - Task, 很容易共享。在 Tekton Catalog 仓库中包含了这些 Task 的列表。这些 Task 可</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>Tekton</category><category>CICD</category><category>DevOps</category></item><item><title>一文读尽十种常见软件架构模式</title><link>https://www.chenshaowen.com/blog/10-common-software-architectural-patterns-in-a-nutshell.html</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 04 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/10-common-software-architectural-patterns-in-a-nutshell.html</guid><description>大家是否思考过如何设计大型企业级系统？在进行主要的软件开发之前，我们先得选择一个合适的架构。这个架构要给我们所需的功能和质量保证。因此，在将这些架构用于我们的设计之前，我们应该理解不同的架构体系。 1. 什么是架构模式 根据 Wikipedia 解释， 一个架构模式就是</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>设计模式</category><category>架构</category></item><item><title>Helm 2 、Helm 3 比较</title><link>https://www.chenshaowen.com/blog/helm-2-vs-helm-3.html</link><pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 25 Apr 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/helm-2-vs-helm-3.html</guid><description>Helm 3 终于发布了。我们可以告别 Tiller 了，但 Helm 3 的改变不仅于此。让我们继续探讨其他的变化。 1. 告别 Tiller Helm 3 移除了 Tiller ，是个不错的决定。但是要理解为什么不错，我们还需要了解一下 Tiller 产生的背景。Tiller 是 Helm 的服务端组件（运行在 Kubernetes 集群上），主要目的是为了让多</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>Helm</category><category>Kubernetes</category></item><item><title>一个成功的 Git 分支模型</title><link>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</link><pubDate>Sun, 04 Dec 2016 20:34:03 +0000</pubDate><atom:modified>Sun, 04 Dec 2016 20:34:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</guid><description>这篇围绕全部源代码的控制工具Git展开。 1. 为什么是Git? 为了深入探讨git和集中式源码版本控制系统的利弊，参见这里。这方面有太多的激烈争论。作为一个开发者，相比其他工具，当前我更喜欢Git。Git的确改变了开发者关于合并与分支的思考方式。</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>工具</category><category>Git</category><category>研发</category></item></channel></rss>
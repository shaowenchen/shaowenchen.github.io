<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>规范 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E8%A7%84%E8%8C%83/</link><description>Recent content in 规范 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 16 Dec 2023 11:15:11 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E8%A7%84%E8%8C%83/atom.xml" rel="self" type="application/rss+xml"/><item><title>混沌工程与落地实践</title><link>https://www.chenshaowen.com/blog/chaos-engineering-and-practice.html</link><pubDate>Sat, 16 Dec 2023 11:15:11 +0000</pubDate><atom:modified>Sat, 16 Dec 2023 11:15:11 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/chaos-engineering-and-practice.html</guid><description>两个月前，我在业务团队有过一次关于混沌工程实践的分享，这里主要整理下讲稿的内容。 点击查看演示文稿 1. 混沌产生 1.1 混沌学科的产生 在讲混沌之前，我们可以先思考一下混沌、混沌工程和我们线上服务之间的关联。 我们经常听到的故事是，一只在亚马逊河流中的蝴蝶</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Chaos</category><category>实践</category><category>流程</category><category>规范</category></item><item><title>我的 Restful API 规范</title><link>https://www.chenshaowen.com/blog/my-restful-api-specification.html</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 07 Dec 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/my-restful-api-specification.html</guid><description>主要用来规范自己写的 API，也是为了让 LLM 更好理解我的 API。 1. Domain 尽量单独使用一个域名，例如 api.example.com 。 2. Path 统一使用小写字母。 不用包含 /api 前缀。 不要包含扩展名。 / 不要出现在末尾。 对于 Restful API，/ 用来划分资源层级，末尾的 / 会导致混淆。 使用带版本的路径 /v1 。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>接口</category><category>API</category><category>研发</category><category>规范</category></item><item><title>编写可阅读代码的艺术读书笔记</title><link>https://www.chenshaowen.com/blog/notes-on-the-art-of-writing-readable-code.html</link><pubDate>Thu, 08 Mar 2018 17:22:45 +0000</pubDate><atom:modified>Thu, 08 Mar 2018 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/notes-on-the-art-of-writing-readable-code.html</guid><description>1. 关于名字 选择专业的词 避免泛泛的名字 用具体的名字代替抽象的名字 使用前缀或后缀给名字附带更多的信息 决定名字的长度 利用名字的格式来表达含义 2. 把信息装到名字里 通常来讲，加上像 is、has、can 或 should 这样的词，可以把布尔值变得更明确。 get 开头的方法，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>规范</category></item><item><title>Django 开发规范(一)</title><link>https://www.chenshaowen.com/blog/development-specification-1-of-django.html</link><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 27 Jan 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/development-specification-1-of-django.html</guid><description>本文主要约定在 Django 开发过程中，需要注意的一些事项。统一的编码风格，良好的设计理念，有利于项目的开发和维护，值得开发人员不断地研究和探讨。 1. 编码声明 在 Python 解释器执行代码时，需要告诉解释器代码的编码方式。Python 代码实际上是文本数据，如果代码的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Python</category><category>规范</category><category>研发</category></item><item><title>Python 的类函数方法</title><link>https://www.chenshaowen.com/blog/class-function-method-of-python.html</link><pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate><atom:modified>Fri, 29 Dec 2017 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/class-function-method-of-python.html</guid><description>1. 函数方法 函数是组织好的，可重复使用的，用来实现单一或相关联功能的代码片段。函数能提高应用的模块性，代码的重复利用率。Python 提供了许多内建函数，比如 print()、str()。同时，Python 也允许用户创建函数，这被叫做自定义函数。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>规范</category><category>函数</category></item><item><title>API 接口规范</title><link>https://www.chenshaowen.com/blog/api-interface-specification.html</link><pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate><atom:modified>Fri, 01 Dec 2017 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/api-interface-specification.html</guid><description>在 Web 应用开发的过程中，后端开发人员需要频繁的交付 API 接口，前端开发人员需要频繁的调用 API 接口。为了降低沟通成本、预防可能的安全风险，遵循约定优于配置的原则，有必要规范 API 的接口规范。Restful API 是以资源为核心的 API 设计思路，所有的操作都是针对特</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>接口</category><category>API</category><category>研发</category><category>规范</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>GPU on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/gpu/</link><description>Recent content in GPU on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Mon, 20 Jan 2025 01:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/gpu/atom.xml" rel="self" type="application/rss+xml"/><item><title>NVIDIA 环境变量配置</title><link>https://www.chenshaowen.com/blog/nvidia-environment-variable-configuration.html</link><pubDate>Mon, 20 Jan 2025 01:00:00 +0000</pubDate><atom:modified>Mon, 20 Jan 2025 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nvidia-environment-variable-configuration.html</guid><description>NVIDIA_VISIBLE_DEVICES 指定程序可见的 GPU 设备 1 CUDA_VISIBLE_DEVICES=0,1 可用值: 1,2，以逗号分隔的 GPU UUID 或索引列表 all，所有 GPU none，加载驱动，但无法访问 GPU void，不加载驱动 NVIDIA_DRIVER_CAPABILITIES 控制哪些驱动程序库/二进制文件将被安装在容器内 1 NVIDIA_DRIVER_CAPABILITIES=compute,utility 可用值: compute，CUDA 和 OpenCL 应用程序所需。 co</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>环境</category><category>NVIDIA</category><category>GPU</category></item><item><title>GPU 主机如何开启 GDS</title><link>https://www.chenshaowen.com/blog/how-to-enable-gds-on-gpu-host.html</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><atom:modified>Wed, 11 Sep 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-enable-gds-on-gpu-host.html</guid><description>1. 什么是 GDS（GPUDirectStorage） GDS 允许 RDMA 网卡直接访问 GPU 内存，有助于增加 GPU 应用读写文件的 IO 带宽，减少 IO 时延，并降低其 CPU 负载。 客户端在开启 GDS 特性后，文件将以 O_DIRECT 方式打开，客户端不会再缓存文件数据。应用层读写文件时，客户端通过 nvidia-fs.ko 将</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GDS</category><category>GPU</category><category>AI</category></item><item><title>NVIDIA GPU 核心与架构演进史</title><link>https://www.chenshaowen.com/blog/nvidia-gpu-cores-and-architecture-evolution-history.html</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><atom:modified>Sun, 25 Aug 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nvidia-gpu-cores-and-architecture-evolution-history.html</guid><description>1. 产品线 GeForce 面向游戏玩家，提供强大的图形处理能力、先进的游戏技术。 常见的有 NVIDIA GTX 系列、高端的 RTX 系列、Titan 系列。 Quadro 面向专业市场，如设计师、工程师、科学家和内容创作者。 常见的有 Quadro P 系列，高端的 Quadro RTX 系列 Tesla 面向数据中心和高性能计算（HPC）市场，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>AI</category><category>GPU</category><category>NVIDIA</category><category>硬件</category></item><item><title>常用 GPU 运维及故障处理</title><link>https://www.chenshaowen.com/blog/common-gpu-operation-and-fault-handling.html</link><pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><atom:modified>Mon, 18 Mar 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-gpu-operation-and-fault-handling.html</guid><description>处理故障时，参考或者记录下的内容，持续更新中 1. XID 错误事件 XID 是 NVIDIA 的错误码，可以通过命令: 1 dmesg -T | grep -i &amp;#34;NVRM: Xid&amp;#34; 或者 1 journalctl --since `date -d &amp;#34;10 days ago&amp;#34; &amp;#34;+%Y-%m-%d&amp;#34;`|grep Xid 根据 XID 可以定位故障，下面是一些常见的 XID 事件 XID 说明 13 Graphics Engine Exception。通常是数组越界、指令错误,小概率是硬件问</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>GPU</category><category>AI</category><category>运维</category></item><item><title>nvidia-smi 基本使用</title><link>https://www.chenshaowen.com/blog/basic-usage-of-nvidia-smi.html</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate><atom:modified>Thu, 01 Feb 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basic-usage-of-nvidia-smi.html</guid><description>1. 什么是 nvidia-smi nvidia-smi 全称是 NVIDIA System Management Interface，是 NVIDIA 提供的管理和监控 GPU 的接口。 nvidia-smi 调用的是 NVML。NVML 全称是 NVIDIA Management Library，提供了一组 C API，用于 NVIDIA GPU 监控和管理的库。 1.1 可查询的状态 ECC 错误计数 GPU 利用率 活动计算进程 时钟和 PState 温度和风扇速度 电</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>GPU</category><category>NVIDIA</category><category>硬件</category></item><item><title>NVIDIA GPU 驱动安装</title><link>https://www.chenshaowen.com/blog/nvidia-gpu-driver-installation.html</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 28 Dec 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nvidia-gpu-driver-installation.html</guid><description>1. 安装驱动 1.1 查看系统是否识别显卡 1 2 3 4 lspci | grep -i vga 03:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1) 0a:00.0 VGA compatible controller: Matrox Electronics Systems Ltd. G200eR2 (rev 01) 识别出显卡为 NVIDIA 的 TITAN X。 1.2 禁用 nouveau 1 lsmod | grep nouveau 如果有输出，说明 nouveau 已经加载，需要禁用。如果没有输出，则可以跳过此操作。 Ubuntu 系统 关闭自动更新 1 sed -i.bak &amp;#39;s/1/0/&amp;#39; /etc/apt/apt.conf.d/10periodic 编辑配置</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>GPU</category><category>NVIDIA</category><category>硬件</category><category>驱动</category></item><item><title>如何在无 GPU 的 macOS 上运行 Stable Diffusion</title><link>https://www.chenshaowen.com/blog/how-to-run-stable-diffusion-in-macos-without-gpu.html</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-run-stable-diffusion-in-macos-without-gpu.html</guid><description>1. 运行 Stable Diffusion 推荐配置 内存: 不低于 16 GB DDR4 或 DDR5 存储: 不低于 10 GB 可用空间 GPU: 不低于 6 GB 显存 N 卡 如果硬件达不到要求，也可以使用各种优化 fork 兼容更低配置的硬件，但生成时间会增长。 当前的开发主机配置为: 2.9 GHz 8-Core Intel Core i7 16 GB 2666 MHz DDR4 250 GB SSD 由于没有 GPU，生成图片时，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>macOS</category><category>GPU</category></item><item><title>使用 Docker 运行 Tensorflow</title><link>https://www.chenshaowen.com/blog/run-tensorflow-on-docker.html</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate><atom:modified>Thu, 05 Mar 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/run-tensorflow-on-docker.html</guid><description>前面写过一篇文档，如何在 CentOS 安装 GPU 驱动 ，这篇就来看看怎么利用 Docker 运行 Tensorflow 。 1. 检查当前 CPU 支持的 Tensorflow 版本 在不支持 AVX 指令的 CPU 上，运行 Tensorflow &amp;gt; 1.15 版本时，会报错，Illegal instruction (core dumped)。 执行检测命令： 1 2 3 cat /proc/cpuinfo | grep avx flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GPU</category><category>Tensorflow</category><category>Docker</category></item><item><title>如何在 CentOS 安装 GPU 驱动</title><link>https://www.chenshaowen.com/blog/how-to-install-gpu-driver-in-centos.html</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 15 Feb 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-install-gpu-driver-in-centos.html</guid><description>以 CentOS 7.7，Tesla P100 GPU 为例。 1. 基础环境准备 安装 lspci 命令 1 yum install -y pciutils 检查 GPU 是否支持 CUDA 1 2 3 lspci | grep -i nvidia 00:09.0 3D controller: NVIDIA Corporation GP100GL [Tesla P100 PCIe 12GB] (rev a1) 支持 CUDA 的 GPU 列表：https://developer.nvidia.com/cuda-gpus 检查系统是否支持 CUDA 1 2 3 4</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>GPU</category></item></channel></rss>
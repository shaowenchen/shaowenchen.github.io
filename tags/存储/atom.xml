<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>存储 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%AD%98%E5%82%A8/</link><description>Recent content in 存储 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 12 Jun 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%AD%98%E5%82%A8/atom.xml" rel="self" type="application/rss+xml"/><item><title>MemoryFS 存储系统的一些构想</title><link>https://www.chenshaowen.com/blog/something-about-memoryfs-storage-system.html</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><atom:modified>Wed, 12 Jun 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/something-about-memoryfs-storage-system.html</guid><description>1. 使用内存作为存储介质 如上图是存储金字塔，展示了存储介质价格与速度的关系。 目前，企业之所以广泛采用磁带和磁盘作为存储介质，主要是因为它们的价格优势。市场价格受市场供需影响，即便是价格较高的存储介质，如果生产成本低廉，具有足够大的市场，生产过</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>存储</category><category>内存</category><category>MemoryFS</category></item><item><title>存储性能及成本对比</title><link>https://www.chenshaowen.com/blog/comparison-of-storage.html</link><pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate><atom:modified>Sat, 25 May 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/comparison-of-storage.html</guid><description>1. 存储的分层与互联 2. 各种存储类型 存储类型 带宽 容量 响应延时 单位存储成本 存储原理 适用场景 CPU L1 Cache 256-512GB/s 32-64KB/核心 &amp;lt;1ns 约$2000/MB SRAM CPU 核心最近层缓存 CPU L2 Cache 64-256GB/s 256KB-2MB/核心组 2-5ns 约$1000/MB 部分 SRAM,部分嵌入式 DRAM CPU 下一级缓</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>存储</category><category>存储分层</category></item><item><title>在 Kubernetes 下创建后端为 JuiceFS 的 PVC</title><link>https://www.chenshaowen.com/blog/how-to-quickly-create-juicefs-pvc-in-kubernetes.html</link><pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate><atom:modified>Thu, 07 Mar 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-quickly-create-juicefs-pvc-in-kubernetes.html</guid><description>本篇主要记录创建 JuiceFS PVC 的脚本，方便快速配置。组件部署可以参考 使用 Fluid 和 JuiceFS 在 Kubernetes 管理数据 。 1. 设置环境变量 桶的配置 1 2 3 4 5 6 export ACCESS_KEY= export SECRET_KEY= export BUCKET= export ENDPOINT=ks3-cn-beijing-internal.ksyun.com export BUCKET_ENPOINT=$BUCKET.$ENDPOINT export PROVIDER=ks3 Workload 的配置 1 2 3 4 5 export NAMESPACE= export PVC_NAME= export NODE_SELECTOR_KEY= export NODE_SELECTOR_VALUE= 镜像的配置 export JUICEFS_IMAGE=juicedata/juicefs-fuse export DEMO_IMAGE=shaowenchen/demo-ubuntu 元数据的配置 如果是 Redis 配置 1 2 3 4 export REDIS_PASSWORD= #ip:port/database export REDIS_ENDPOINT= export META_SERVER=redis://:$REDIS_PASSWORD@$REDIS_ENDPOINT 如</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>存储</category><category>JuiceFS</category></item><item><title>OpenEBS 证书过期导致服务不可用</title><link>https://www.chenshaowen.com/blog/expiration-of-the-openebs-cert.html</link><pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate><atom:modified>Fri, 09 Sep 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/expiration-of-the-openebs-cert.html</guid><description>1. 安装方式 1 2 kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml kubectl patch storageclass openebs-hostpath -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;annotations&amp;#34;:{&amp;#34;storageclass.kubernetes.io/is-default-class&amp;#34;:&amp;#34;true&amp;#34;}}}&amp;#39; OpenEBS 主要用来给 Tekton 流水线作为默认的存储使用。之前，我也试过 Longhorn，但是高峰期扛不住，流水线 Pending。而卸载 Longhorn 之后有残留，导致 kube-apiserver 一直报错，最后花了很大力气才删除。 2. Kubernetes 集群证书过期之后，OpenE</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>OpenEBS</category><category>存储</category><category>Kubernetes</category><category>Tekton</category></item><item><title>Thanos 进阶使用指南</title><link>https://www.chenshaowen.com/blog/an-advanced-user-guide-about-thanos.html</link><pubDate>Mon, 28 Mar 2022 19:51:48 +0000</pubDate><atom:modified>Mon, 28 Mar 2022 19:51:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/an-advanced-user-guide-about-thanos.html</guid><description>1. 使用 Query 聚合数据 如上图，Thanos Query 可以对接的组件有： Thanos Store Gateway Thanos Query Thanos Receive Prometheus，借助于 Sidecar 利用 Thanos Query 之间的级联，我们可以实现跨组件的关联查询，组建超大型的监控系统。这也意味着，每个对接的组件应该提供足够快的 Prometheus API。整个接口的响应时</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Thanos</category><category>监控</category><category>存储</category><category>指标</category></item><item><title>使用 Thanos 集中管理多 Prometheus 实例数据</title><link>https://www.chenshaowen.com/blog/manage-multiple-prometheus-using-thanos.html</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Mar 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/manage-multiple-prometheus-using-thanos.html</guid><description>1. 监控的分层 如上图，在建设监控系统时，会采用两种策略: 分层监控。IaaS、MySQL 中间件、App 层监控分开的好处是，系统之间具有高可用性、容错性。当 App 层监控无法工作时，IaaS 层监控立马就会体现出来。 长短期指标分离。短期指标用来提供给告警</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Thanos</category><category>Prometheus</category><category>监控</category><category>存储</category></item><item><title>/var/lib/docker 能不能挂载远端存储</title><link>https://www.chenshaowen.com/blog/can-we-mount-var-lib-docker-to-remote-storage.html</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/can-we-mount-var-lib-docker-to-remote-storage.html</guid><description>不能 1. 问题背景 基于 Kubernetes 构建可靠、稳定的运维系统时，虚拟机 (VM) 的销毁和新建是一种常态。VM 提供的是计算和内存资源，而使用外部存储，通过 StorageClass 提供给集群中的 PVC 消费。 在这样的背景下，如何快速初始化 VM 成为新的挑战。常见的思路是制作 Node 节点的 VM 镜像，提前将依赖</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>容器</category><category>存储</category><category>Kubernetes</category><category>能不能</category></item><item><title>开发 Tips（13）</title><link>https://www.chenshaowen.com/blog/developing-tips-13.html</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Tue, 27 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-13.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. NodePort 服务仅指定 Node 可以访问 通过 NodePort 暴露的服务，在集群外可以使用 Kubernetes 任意 Node IP 加端口的形式访问。kube-proxy 会将访问流量以轮询的方式转发给 service 中的每个 Pod。 但是，发现并不是每一个 Node IP 加端口都可以访问，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>NodePort</category><category>Kubernetes</category><category>StorageClass</category><category>存储</category></item><item><title>在 Kubernetes 中使用 emptyDir、hostPath、localVolume</title><link>https://www.chenshaowen.com/blog/using-emptydir-hostpath-localvolume-in-kubernetes.html</link><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-emptydir-hostpath-localvolume-in-kubernetes.html</guid><description>之前通过 Kubernetes 之 Volumes ，对 Volumes 有了一定的了解。本篇主要侧重实践，学习如何使用 emptydir、hostpath、localvolume 三种本地存储方案。 1. PV 的基本属性 1.1 PV 的生命周期 PV 的状态： Available：可用，还未被任何 PVC 绑定 Bound：已经被</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Volume</category><category>存储</category></item><item><title>Kubernetes 中的 Ceph</title><link>https://www.chenshaowen.com/blog/ceph-in-kubernetes.html</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 07 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ceph-in-kubernetes.html</guid><description>1. 不同种类的存储 1.1 文件存储 文件存储是，基于文件的存储。在访问数据时，需要提供相应的查找路径。 适用于，FTP、NFS 等服务。 1.2 块存储 块存储是，将数据拆分成块，并单独存储各个部分。在访问数据时，底层存储软件会将这些分散的数据组装起来。 块存储，通</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>Ceph</category><category>存储</category></item></channel></rss>
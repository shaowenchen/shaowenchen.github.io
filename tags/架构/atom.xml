<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>架构 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%9E%B6%E6%9E%84/</link><description>Recent content in 架构 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 18 Jun 2022 12:09:53 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%9E%B6%E6%9E%84/atom.xml" rel="self" type="application/rss+xml"/><item><title>多机房下的 Kubernetes 演进</title><link>https://www.chenshaowen.com/blog/evolution-of-kubernetes-under-multipl-location.html</link><pubDate>Sat, 18 Jun 2022 12:09:53 +0000</pubDate><atom:modified>Sat, 18 Jun 2022 12:09:53 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/evolution-of-kubernetes-under-multipl-location.html</guid><description>1. 应用架构与业务发展、运维能力匹配 在行业会议、文档博客中，我们时常能见到各种优秀的解决方案，但是如果直接照搬到自己的业务，却又频频碰壁。因为，这些技术方案是特定的业务场景孵化出来的，不同的业务形态、不同的业务规模、不同的业务发展阶段都会影响</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>多机房</category><category>Kubernetes</category><category>架构</category><category>拓扑</category></item><item><title>等价域名</title><link>https://www.chenshaowen.com/blog/peer-domain.html</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Jun 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/peer-domain.html</guid><description>1. 含义 如果一个服务有多个域名入口，通过这些入口访问得到的内容一样，那么称这些域名为等价域名。 比如，通过等价域名，可以提供 3 个一模一样的文件或者接口服务。 https://server.chenshaowen.com/static/index.html https://server-peer-a.chenshaowen.com/static/index.html https://server-peer-b.chenshaowen.com/static/index.html 2. 用途 2.1 增加浏览器并发上限 浏览器通常会限制对单个域名最大并发数量不超过 6 个/秒。通</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>域名</category><category>架构</category><category>海外</category><category>路由</category></item><item><title>一文读尽十种常见软件架构模式</title><link>https://www.chenshaowen.com/blog/10-common-software-architectural-patterns-in-a-nutshell.html</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 04 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/10-common-software-architectural-patterns-in-a-nutshell.html</guid><description>大家是否思考过如何设计大型企业级系统？在进行主要的软件开发之前，我们先得选择一个合适的架构。这个架构要给我们所需的功能和质量保证。因此，在将这些架构用于我们的设计之前，我们应该理解不同的架构体系。 1. 什么是架构模式 根据 Wikipedia 解释， 一个架构模式就是</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>设计模式</category><category>架构</category></item><item><title>微服务设计</title><link>https://www.chenshaowen.com/blog/book/microservice-design.html</link><pubDate>Tue, 16 Apr 2019 08:47:38 +0000</pubDate><atom:modified>Tue, 16 Apr 2019 08:47:38 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/microservice-design.html</guid><description>作者: [英] Sam Newman 出版年: 2016-5 ISBN: 9787115420268 Notes: 主要回答了一系列关于微服务的问题。什么是微服务，微服务具有什么特点，系统是如何演化的，如何划分服务，集成、部署、测试策略。 对整个微服务介绍比较全面，很多观点能引起我的共鸣。适合对现有项目不满，准备尝试微服务的</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>服务</category><category>架构</category></item><item><title>大型网站技术架构</title><link>https://www.chenshaowen.com/blog/book/large-web-technology-architecture.html</link><pubDate>Thu, 04 May 2017 21:39:11 +0000</pubDate><atom:modified>Thu, 04 May 2017 21:39:11 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/large-web-technology-architecture.html</guid><description>副标题: 核心原理与案例分析 作者: 李智慧 出版社: 电子工业出版社 出版年: 2013-9-1 ISBN: 9787121212000 Notes: 没有业务对技术的需求，培养不出优秀的架构师。 作者是伴随着淘宝业务增长，一起成长起来的。 书中主要从系统性能，可用性，伸缩性，扩展性，安全性几个方面阐述网站架构技术要点</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>架构</category><category>设计</category></item><item><title>PaaS 平台 App Engine 2.0 介绍</title><link>https://www.chenshaowen.com/blog/app-engine-2-0.html</link><pubDate>Tue, 04 Apr 2017 15:14:40 +0000</pubDate><atom:modified>Tue, 04 Apr 2017 15:14:40 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/app-engine-2-0.html</guid><description>Note: 简单说几句，组内同学的分享。App Engine 将开发从繁琐的部署、配置流程中解脱出来，提供全方位的自动化支持服务。其中的 Controller 是 App Engine 的大脑，协调控制整个引擎的运作。PPT 中主要讲的是 App Engine 的设计方案和演化过程，还对资源调度、故障容灾进行了考虑。 由于其是微</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>PaaS</category><category>架构</category></item><item><title>微服务架构</title><link>https://www.chenshaowen.com/blog/micro-service.html</link><pubDate>Sun, 25 Dec 2016 00:19:01 +0000</pubDate><atom:modified>Sun, 25 Dec 2016 00:19:01 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/micro-service.html</guid><description>1. SOA 面向服务架构（SOA），阐述了对于复杂的企业IT系统，应按照不同的、可重用的粒度划分，将功能相关的一组功能提供者组织在一起为消费者提供服务，其目的是为了解决企业内部不同IT资源之间无法互联而导致的信息孤岛问题。 SOA的基本设计思想是：对</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>服务</category><category>架构</category></item></channel></rss>
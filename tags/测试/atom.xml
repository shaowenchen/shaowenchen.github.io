<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>测试 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%B5%8B%E8%AF%95/</link><description>Recent content in 测试 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 11 Aug 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%B5%8B%E8%AF%95/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用 Volcano 运行 hccl-test</title><link>https://www.chenshaowen.com/blog/use-volcano-to-run-hccl-test.html</link><pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate><atom:modified>Sun, 11 Aug 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/use-volcano-to-run-hccl-test.html</guid><description>1. 制作 hccl-test 镜像 下载依赖包 Python-3.8.18.tgz Ascend-cann-toolkit_8.0.RC2_linux-x86_64.run Ascend-cann-kernels-910b_8.0.RC2_linux.run mpich-3.2.1.tar.gz 如果不方便下载，也可以直接从我打包的镜像中拷贝出来。 编写 Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 FROM ubuntu:22.04 WORKDIR /home RUN sed -i -e &amp;#39;s/^APT/# APT/&amp;#39; -e &amp;#39;s/^DPkg/# DPkg/&amp;#39; /etc/apt/apt.conf.d/docker-clean RUN apt-get update &amp;amp;&amp;amp; apt-get install</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Volcano</category><category>HCCL</category><category>Ascend</category><category>AI</category><category>测试</category></item><item><title>使用 Volcano 运行 nccl-test</title><link>https://www.chenshaowen.com/blog/use-volcano-to-run-nccl-test.html</link><pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate><atom:modified>Sun, 11 Aug 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/use-volcano-to-run-nccl-test.html</guid><description>1. 制作 nccl-test 镜像 查看 CUDA 版本 1 2 3 nvidia-smi | grep &amp;#34;CUDA Version&amp;#34; | awk &amp;#39;{print $9}&amp;#39; 12.2 编写 Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat &amp;gt; Dockerfile &amp;lt;&amp;lt; EOF FROM hubimage/nvidia-cuda:12.1.0-cudnn8-devel-ubuntu22.04 ENV DEBIAN_FRONTEND=noninteractive ARG CONDA_VERSION WORKDIR /workspace ENV DEBIAN_FRONTEND=noninteractive RUN apt-get update &amp;amp;&amp;amp; apt install -y openmpi-bin libopenmpi-dev ssh openssh-server net-tools vim git iputils-ping nfs-common RUN git clone https://github.com/NVIDIA/nccl-tests.git &amp;amp;&amp;amp; \ cd nccl-tests &amp;amp;&amp;amp; \ make MPI=1 MPI_HOME=/usr/lib/x86_64-linux-gnu/openmpi EOF 编译 nccl-test 镜像 1 docker build -t hubimage/nccl-test:12.1.0-ubuntu22.04 -f Dockerfile . 推送 nccl-test 镜像 1 docker push hubimage/nccl-test:12.1.0-ubuntu22.04 2. 运行 Volcano Job 给测试节点打</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Volcano</category><category>NCCL</category><category>Nvidia</category><category>AI</category><category>测试</category></item><item><title>Kubernetes 动态创建 Jenkins Agent 压力测试</title><link>https://www.chenshaowen.com/blog/the-stress-test-about-kubernetes-dynamically-creates-jenkins-agent.html</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 02 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-stress-test-about-kubernetes-dynamically-creates-jenkins-agent.html</guid><description>前面的文档中，我们利用 Kubernetes 提供的弹性，在 Kubernetes 上动态创建 Jenkins Slave 。本篇文档主要是对 Jenkins 进行大规模构建的压力测试。 1. 集群配置 1.1 Kubernetes 版本 这里使用的是 v1.16.7 1 2 3 4 kubectl version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.7&amp;#34;, GitCommit:&amp;#34;be3d344ed06bff7a4fc60656200a93c74f31f9a4&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-02-11T19:34:02Z&amp;#34;, GoVersion:&amp;#34;go1.13.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.7&amp;#34;, GitCommit:&amp;#34;be3d344ed06bff7a4fc60656200a93c74f31f9a4&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-02-11T19:24:46Z&amp;#34;, GoVersion:&amp;#34;go1.13.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} 1.2 节点数量 集群节点总数， 16 个 1 2 3 kubectl get node |grep &amp;#34;Ready&amp;#34; | wc -l 16</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>DevOps</category><category>测试</category></item><item><title>基于 Kubernetes 和 Jenkins 搭建自动化测试系统</title><link>https://www.chenshaowen.com/blog/build-an-automated-test-system-using-kubernetes-and-jenkins.html</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 12 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-an-automated-test-system-using-kubernetes-and-jenkins.html</guid><description>1. 测试分层 测试的目的是为了验证预期的功能，发现潜在的缺陷。测试增强了交付合格产品的信心，也给敏捷迭代带来了可能。可以说，测试决定了产品的开发进度。 网络模型有七层的 OSI 、四层的 TCP，而开发模式有 MTV、MVC、MVP、MVVM 等。高内聚、低耦</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>Kubernetes</category><category>Jenkins</category><category>DevOps</category></item><item><title>敏捷开发之研发流程</title><link>https://www.chenshaowen.com/blog/r-and-d-process-of-agile-development.html</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 14 Mar 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/r-and-d-process-of-agile-development.html</guid><description>1. 敏捷开发是什么 在传统的软件研发模型中，从提出需求到最后交付，时间周期较长。瀑布模型遵循需求分析、设计、编码、集成、测试、维护六个步骤进行。一旦需求发生变化，不仅浪费前期投入，还不易于调整。 敏捷开发是一种应对快速变化的需求的软件开发能力。特</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>分支</category><category>敏捷</category><category>流程</category><category>测试</category></item><item><title>Pytest 进阶学习之 Mock</title><link>https://www.chenshaowen.com/blog/mock-of-pytest.html</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 27 Jan 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/mock-of-pytest.html</guid><description>1. 为什么需要 Mock 在做单元测试时，被测试函数有时并不是一个可执行的独立单元。被测试函数依赖于一些外部资源，比如另外一个函数的返回值、数据库中某一条数据值等。 为了屏蔽外部依赖的干扰，我们会采用 Mock 技术。通过模拟测试资源的方式，满足依赖条件。 从设计模</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>Python</category><category>Pytest</category><category>学习</category></item><item><title>Pytest 入门学习</title><link>https://www.chenshaowen.com/blog/101-of-pytest.html</link><pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 29 Dec 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/101-of-pytest.html</guid><description>Pytest 测试框架使用简单、插件丰富、功能强大，被广泛用于 Python 自动化测试。本文主要介绍一些 Pytest 的基本概念和使用方法。 1. 运行机制 第一步，Pytest 从命令行或文件中读取配置 第二步，在指定目录下查找并导入 conftest.py 文件 第三步，查找满足匹配条件的测试文件，通常是 test_ 开</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>Python</category><category>Pytest</category></item><item><title>开启 Kubernetes 监控并实施压力测试</title><link>https://www.chenshaowen.com/blog/open-k8s-monitoring-and-stress-testing..html</link><pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Mon, 24 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/open-k8s-monitoring-and-stress-testing..html</guid><description>1. Kubectl 基本命令 1.1 创建对象 1 2 3 4 5 6 7 8 # 创建资源，也可以使用远程 URL kubectl create -f ./my.yaml # 使用多个文件创建资源 kubectl create -f ./my1.yaml -f ./my2.yaml # 使用目录下的所有清单文件来创建资源 kubectl create -f ./dir # 启动一个 nginx 实例 kubectl run nginx --image=nginx 1.2 显示和查找资源 1 2 3 4 5 6 7 8 # 列出所有 namespace 中的 service kubectl get services # 列出所</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>测试</category><category>Apache</category></item><item><title>如何打包一个 Robot Framework 的 Docker 镜像</title><link>https://www.chenshaowen.com/blog/how-to-package-a-docker-image-of-robot-framework.html</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 18 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-a-docker-image-of-robot-framework.html</guid><description>为了方便 CI 集成 UI 自动化测试，需要将 Robot Framework 运行环境打包为 Docker 镜像。本篇主要内容是一些与打包过程相关的配置和脚本。 1. 打包目录结构 1 2 3 4 5 6 tree . ├── docker-compose.yml ├── Dockerfile ├── google-chrome.repo ├── requirements_base.txt 1.1 Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 FROM centos:7 ADD ./google-chrome.repo /etc/yum.repos.d/google-chrome.repo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>测试</category></item><item><title>Robot Framework 常用库</title><link>https://www.chenshaowen.com/blog/robot-framework-common-library.html</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/robot-framework-common-library.html</guid><description>1. 标准库 Robot Framework 可以直接导入使用的库，在目录 python\Lib\site-packages\robot\libraries 中。详细说明，可以查看说明文档。 Builtin，包含经常需要的关键字。自动导入无需 import，因此总是可用的。 Dialogs，提供了暂停测试执行和从用户的输入方式。 Collections，提供一组</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>Robot Framework 进阶 （2）</title><link>https://www.chenshaowen.com/blog/senior-of-robot-framework-2.html</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/senior-of-robot-framework-2.html</guid><description>配置表 Robot Framework 的配置表主要有两种用途。详细说明，请参考这里。 导入测试、资源文件和变量文件。 定义元数据。 在 Setting 表格中： 1 2 3 4 5 Library 引入库 Resource 引入资源文件 Variables 引入变量文件 Test Setup 指定缺省的 test setup Test Teardown 指定缺省的 test teardown 在测试用例中： 1 2 3 4 5 6 [Documentation] 测试用例描述 [Tags] 测试用</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>Robot Framework 进阶 （1）</title><link>https://www.chenshaowen.com/blog/senior-of-robot-framework-1.html</link><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Wed, 15 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/senior-of-robot-framework-1.html</guid><description>pybot 命令 执行所有测试用例 1 pybot . 执行某个测试套件 1 pybot testsuite.txt 执行某个测试套件中的测试用例 1 pybot --test case_name testsuit.txt 将测试结果输出到固定路径 1 pybot --ouputdir your_ouput_dir testsuit.txt 执行包含某个 tag 的测试用例 1 pybot --include tag_name testsuit.txt 关于日志 默认情况下，Robot Framework 中低于 INFO 级别的日志消息不会写日志。这个阈值可以通过命</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>Jenkins 集成 Robot Framework 自动化测试</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 05 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</guid><description>1. 安装无头浏览器 1.1 CentOS 安装 Phantomjs 下载并解压 访问 Phantomjs ，找到 Download phantomjs-2.1.1-linux-x86_64.tar.bz2 的下载链接，并拷贝。 在 CentOS 执行命令: 1 2 3 4 5 wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 # 如果没有安装 bzip2 可能会报错 yum install bzip2.x86_64 tar -jxvf phantomjs-2.1.1-linux-x86_64.tar.bz2 mv phantomjs-2.1.1-linux-x86_64 /usr/local/ 添加到环境变量 1 vim /etc/profile 在行尾新增，如下内容 1 export PATH=$PATH:/usr/local/phantomjs-2.1.1-linux-x86_64/bin 使环境变量立即生效 1 source /etc/profile 查看 Phantomjs 版本号 1 phantomjs --version 安装完之</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>自动化</category><category>持续集成</category><category>测试</category><category>DevOps</category><category>Jenkins</category></item><item><title>Robot Framework 基础</title><link>https://www.chenshaowen.com/blog/basic-of-robot-framework.html</link><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 24 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basic-of-robot-framework.html</guid><description>主要介绍 Robot Framework 的一些基本概念，如何写一个测试用例。 1. 基础元素 1.1 关键字 - keywords Robot Framework 关键字类似函数。分为系统关键字和用户自定义关键字。 系统关键字，通过加载 Library 引入 用户关键字，通过加载 Resource 引入 1.2 库 - Library 库用来封装和复用关键字。Robot Framework 库包括系统库和用户自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>测试</category><category>使用</category><category>DevOps</category></item><item><title>Robot Framework IDE (RIDE) 安装</title><link>https://www.chenshaowen.com/blog/how-to-install-robot-framework-ide-on-windows.html</link><pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 21 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-install-robot-framework-ide-on-windows.html</guid><description>1. 简介 1.1 Robot Framework Robot Framework 是一个 Python 写的自动化功能测试框架。 具备良好的可扩展性，支持关键字驱动 可以同时测试多种类型的客户端或者接口 可以进行分布式测试 主要用于轮次很多的验收测试和测试驱动开发。 1.2 Robot Framework IDE (RIDE) Robot Framework IDE (RIDE) 是 Robot Framework 框架的集成开发环境。 值得注意的是，20</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>功能</category><category>Python</category><category>RIDE</category></item><item><title>Django 调试工具 django-debug-toolbar</title><link>https://www.chenshaowen.com/blog/django-debug-toolbar.html</link><pubDate>Fri, 06 Oct 2017 10:45:58 +0000</pubDate><atom:modified>Fri, 06 Oct 2017 10:45:58 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-debug-toolbar.html</guid><description>1. 关于 Django 的性能 Django 是一个 Python 写的 Web 应用框架。使用 Django ，可以非常简单、高效地开发复杂的数据驱动的网站。同时，Django 非常注重组件的重用性、可插拔、敏捷开发、DRY（Don&amp;rsquo;t Repeat Yourself）。从一定程度上讲，Django 是一个很</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>工具</category><category>测试</category><category>性能</category><category>调试</category></item><item><title>基于 Docker 的 Django 应用性能测试</title><link>https://www.chenshaowen.com/blog/django-application-performance-test-based-on-docker.html</link><pubDate>Thu, 07 Sep 2017 19:08:09 +0000</pubDate><atom:modified>Thu, 07 Sep 2017 19:08:09 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-application-performance-test-based-on-docker.html</guid><description>1. 网站性能基础指标 并发数： 服务器单位时间内处理的会话数量 吞吐率： 服务器单位时间内处理的请求数 响应时间： 用户从发出请求到接受完响应之间的总耗时，由网络传输耗时、服务处理耗时等多个部分组成 平均响应时间： 所有请求响应时间的平均值 2. 测试工具 性能测试</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>Demo</category><category>Docker</category><category>Django</category></item><item><title>自动化测试工具 - Selenium</title><link>https://www.chenshaowen.com/blog/automated-testing-tool-about-selenium.html</link><pubDate>Sat, 22 Jul 2017 15:19:42 +0000</pubDate><atom:modified>Sat, 22 Jul 2017 15:19:42 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/automated-testing-tool-about-selenium.html</guid><description>1. Selenium 简介 Selenium 是一个 Thoughtworks 公司的集成测试工具。Selenium 的核心 Selenium Core 基于 JSUnit，完全由 JavaScript 编写，可以运行于任何支持 JavaScript 的浏览器上。 1.1 主要功能和特点 开源、免费。 多浏览器支持：Firefox、Chrome、IE、Opera，可以用于兼容性测试。 多</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>测试</category></item><item><title>Django自动化测试</title><link>https://www.chenshaowen.com/blog/auto-testing-of-django.html</link><pubDate>Mon, 10 Jul 2017 21:39:27 +0000</pubDate><atom:modified>Mon, 10 Jul 2017 21:39:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/auto-testing-of-django.html</guid><description>Django中写自动化测试可以使用：doctests或unit tests。自动化测试的逻辑是，将测试数据传入待测试函数，执行后，以输出结果与预期是否一致，作为判断测试是否通过的标准。这里有几个关键点，（1）需要测试数据，（2）需要指明待测试</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>测试</category><category>Demo</category><category>DevOps</category><category>CICD</category></item></channel></rss>
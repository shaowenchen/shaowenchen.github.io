<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>环境 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E7%8E%AF%E5%A2%83/</link><description>Recent content in 环境 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Mon, 20 Jan 2025 01:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E7%8E%AF%E5%A2%83/atom.xml" rel="self" type="application/rss+xml"/><item><title>NVIDIA 环境变量配置</title><link>https://www.chenshaowen.com/blog/nvidia-environment-variable-configuration.html</link><pubDate>Mon, 20 Jan 2025 01:00:00 +0000</pubDate><atom:modified>Mon, 20 Jan 2025 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nvidia-environment-variable-configuration.html</guid><description>NVIDIA_VISIBLE_DEVICES 指定程序可见的 GPU 设备 1 CUDA_VISIBLE_DEVICES=0,1 可用值: 1,2，以逗号分隔的 GPU UUID 或索引列表 all，所有 GPU none，加载驱动，但无法访问 GPU void，不加载驱动 NVIDIA_DRIVER_CAPABILITIES 控制哪些驱动程序库/二进制文件将被安装在容器内 1 NVIDIA_DRIVER_CAPABILITIES=compute,utility 可用值: compute，CUDA 和 OpenCL 应用程序所需。 co</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>环境</category><category>NVIDIA</category><category>GPU</category></item><item><title>Ascend 环境变量配置</title><link>https://www.chenshaowen.com/blog/ascend-environment-variable-configuration.html</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><atom:modified>Mon, 20 Jan 2025 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ascend-environment-variable-configuration.html</guid><description>HCCL_IF_IP 配置 HCCL 的初始化 root 通信网卡 IP 。 环境变量 HCCL_IF_IP &amp;gt; 环境变量 HCCL_SOCKET_IFNAME &amp;gt; docker/lo 以外网卡(网卡名字典序升序) &amp;gt; docker 网卡 &amp;gt; lo 网卡。 1 export HCCL_IF_IP=10.10.10.1 HCCL_IF_BASE_PORT 指定 Host 网卡起始端口号，配置后系统默认占用以该端口起始的 16 个端口进行集群信息收集，取值范围为[1024,65520] 。 1 export HCCL_IF_BASE_PORT=50000 HCCL_SOCKET_IFNAME HCCL 可通</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>环境</category><category>Ascend</category><category>NPU</category></item><item><title>多环境下的应用运行时定义</title><link>https://www.chenshaowen.com/blog/the-definition-of-application-runtime-under-multiple-env.html</link><pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 18 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-definition-of-application-runtime-under-multiple-env.html</guid><description>1. 为什么需要定义应用运行时 运行时更多选择。传统的应用运行时有，物理机、虚拟机、云主机。容器时代，常见的运行时有 Docker、Kubernetes。这些运行时，提供给我们的不再是一个单一的运行时选择。 应用拓扑更复杂。如果由 CMDB 统一存储应用的拓扑</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>标签</category><category>开发</category><category>环境</category></item><item><title>CentOS 7 下安装并配置 Zsh</title><link>https://www.chenshaowen.com/blog/install-zsh-in-centos-7.html</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 29 Mar 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-zsh-in-centos-7.html</guid><description>1. 安装 zsh 1 sudo yum install -y zsh 2. 安装 oh-my-zsh 1 sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 建议将 Zsh 设置为默认的 Shell。 3. 安装插件 3.1 安装 autojump 1 sudo yum install -y epel-release 1 sudo yum install -y autojump-zsh 3.2 安装 zsh-autosuggestions 1 git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 3.3 安装 zsh-syntax-highlighting 1 git clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting 4. 添加 .zshrc 配置 1 sed -i &amp;#39;s/^plugins=(\(.*\)/plugins=(autojump zsh-autosuggestions zsh-syntax-highlighting \1/&amp;#39; ~/.zshrc 退出 Terminal, 再次登录即可。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CentOS</category><category>环境</category><category>Zsh</category></item><item><title>CentOS 7 下安装并配置 Homebrew</title><link>https://www.chenshaowen.com/blog/install-homebrew-in-centos-7.html</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><atom:modified>Sun, 28 Mar 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-homebrew-in-centos-7.html</guid><description>在 CentOS 下安装包时，通常需要寻找各种源，使用 Homebrew 就没这样的烦恼。本文使用的是 CentOS 7.6，不同的系统版本可能会有差异。 1. 创建非 root 用户 Homebrew 不允许以 root 身份运行，因此需要创建一个新的用户。 新建用户 1 adduser shaowenchen 设置密码 1 passwd shaowenchen 给新用户添加 sudo 权限 编辑权限配置文件: 1 2 chmod</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CentOS</category><category>环境</category><category>Homebrew</category></item><item><title>CentOS 7 安装 Java 开发环境</title><link>https://www.chenshaowen.com/blog/install-jdk-in-centos-7.html</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 01 Jul 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-jdk-in-centos-7.html</guid><description>1. 编译报错：java.nio.file.NoSuchFileException 在编译 Jenkins 插件时，提示错误信息如下： 1 2 3 4 mvn package Compilation failure [ERROR] java.nio.file.NoSuchFileException: /root/java/target/classes/META-INF/annotations/hudson.Extension 原来 Maven 使用的是 JAVA_HOME 而不是 PATH，找不到 Java 运行环境导致，而且 Java 11 不行，Java 1.8 才能正常编译。 2. 安装 JDK 安装 Java</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Java</category><category>环境</category><category>CentOS</category><category>研发</category></item><item><title>开发 Tips（19）</title><link>https://www.chenshaowen.com/blog/developing-tips-19.html</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Jan 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-19.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. macOS 快速切换不同 Kubernetes 环境 涉及 Kubernetes 相关开发时，经常需要在多个集群之间切换。配置多集群 context 是一个选择，但是如果集群在不断重置，可以试下如下方法： 在 ~/.profile 文件中定义一系列相关 function，切换时只需要执行 on_cluster_name 即可</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Kubernetes</category><category>环境</category><category>Docker</category></item><item><title>搭建远程 Kubernetes 开发环境</title><link>https://www.chenshaowen.com/blog/building-a-remote-kubernetes-development-environment.html</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 18 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/building-a-remote-kubernetes-development-environment.html</guid><description>Minikube 是 Kubernetes 的单机发行版本，适用于产品体验和日常开发。这里使用 Minikube 搭建开发环境，将 Kubernetes 搭建在 CentOS 云服务器，本地使用 OS X 进行远程开发。 1. 云服务器安装 Minikube 在 Minikube 的 GitHub 版本页面，找到合适的版本，进行安装。 以 CentOS 为例，执行命令: 1 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.2.0/minikube-linux-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo cp minikube /usr/local/bin/ &amp;amp;&amp;amp; rm minikube minikube 是一</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>研发</category><category>环境</category><category>实践</category></item><item><title>Python 下各种环境隔离工具简介</title><link>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</guid><description>1. 非标准库 1.1 virtualenv virtualenv 是一个非常流行的用于创建独立的python libraries环境的工具。我强烈推荐你学习并了解它，因为他非常实用，并且应用广泛，很多人用它来搭建python开发环境。后面其他工具来主要与virtualenv来进行比较以说明差</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Python</category><category>工具</category><category>环境</category></item></channel></rss>
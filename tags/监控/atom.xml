<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>监控 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E7%9B%91%E6%8E%A7/</link><description>Recent content in 监控 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Fri, 26 Jul 2024 01:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E7%9B%91%E6%8E%A7/atom.xml" rel="self" type="application/rss+xml"/><item><title>为什么 top node、free、Grafana 的数据对不上</title><link>https://www.chenshaowen.com/blog/why-top-node-free-grafana-data-not-match.html</link><pubDate>Fri, 26 Jul 2024 01:00:00 +0000</pubDate><atom:modified>Fri, 26 Jul 2024 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/why-top-node-free-grafana-data-not-match.html</guid><description>1. top 查看节点资源使用率超过 100% 1 2 3 4 5 6 kubectl top node NAME CPU(cores) CPU% MEMORY(bytes) MEMORY% master-1 995m 16% 13760Mi 118% master-2 827m 13% 10672Mi 92% master-3 889m 14% 10244Mi 88% 这是由于在计算使用率时，默认使用的是可分配的资源，排除了 Kubelet 保留的部分。在 kubectl 源码中可以看到: 1 2 3 4 5 6 7 for _, n := range nodes { if !o.ShowCapacity { availableResources[n.Name] = n.Status.Allocatable } else { availableResources[n.Name] = n.Status.Capacity } } 如果需要</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>监控</category><category>内存</category><category>Kubernetes</category></item><item><title>使用 Upptime 无成本监控服务可用性</title><link>https://www.chenshaowen.com/blog/monitor-service-accessibility-with-upptime-for-free.html</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><atom:modified>Sat, 12 Aug 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/monitor-service-accessibility-with-upptime-for-free.html</guid><description>1. 什么需要拨测服务 今年 GPT 大火，我也部署、开发了几个应用、小程序进行学习。当然，秉承帮助厂商测试功能的原则，目前只有 GPT 3.5 的 API 每天有少许费用，服务器、数据库、带宽都是免费的。 为了节省成本，我没有测试环境，每次提交代码，只要能编译成功就会直接发布</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>监控</category><category>拨测</category></item><item><title>使用集群内 Prometheus 采集 Etcd 指标</title><link>https://www.chenshaowen.com/blog/using-prometheus-in-the-cluster-to-collect-etcd-metrics.html</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 09 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-prometheus-in-the-cluster-to-collect-etcd-metrics.html</guid><description>1. 跳过证书校验无法获取监控 如果指标抓取时，能跳过 TLS 认证是最便捷的。其 Prometheus 的 ConfigMap 配置如下: 1 2 3 4 5 6 7 8 9 - job_name: etcd metrics_path: /metrics scheme: https tls_config: insecure_skip_verify: true static_configs: - targets: [ &amp;#39;1.1.1.1:2379&amp;#39; ] - targets: [ &amp;#39;2.2.2.2:2379&amp;#39; ] - targets: [ &amp;#39;3.3.3.3:2379&amp;#39; ] 但 Prometheus Targets 报错 Get &amp;quot;https://3.3.3.3:2379/metrics&amp;quot;: remote error: tls: bad certificate 在 targets 页面的报错如下图: 2. curl 验证抓取请求 跳过证书 1 2 3 curl https://1.1.1.1:2379/metrics -k curl: (35)</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Etcd</category><category>集群</category><category>Prometheus</category><category>监控</category></item><item><title>使用 Blackbox Exporter 测试网络连通性</title><link>https://www.chenshaowen.com/blog/using-blackbox-exporter-to-test-network.html</link><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate><atom:modified>Sat, 25 Jun 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-blackbox-exporter-to-test-network.html</guid><description>如果你需要监控两个主机、主机与外部服务之间的网络状况，那么就可以试一试本文提到的 Blackbox Exporter。 1. 安装 Blackbox 1.1 在主机上部署 下载二进制包 1 2 3 4 5 wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.21.0/blackbox_exporter-0.21.0.linux-amd64.tar.gz tar -xzvf blackbox_exporter-0.21.0.linux-amd64.tar.gz mv blackbox_exporter-0.21.0.linux-amd64/blackbox_exporter /usr/bin/ mkdir /etc/prometheus mv blackbox_exporter-0.21.0.linux-amd64/blackbox.yml /etc/prometheus/ 清理安装包 1 rm -rf blackbox_exporter-0.21.0.linux-amd64* 新建 Systemd 服务 1 vim /usr/lib/systemd/system/blackbox_exporter.service 新增如下内容: [Unit] Description=blackbox_exporter After=network.target [Service] Restart=on-failure ExecStart=/usr/bin/blackbox_exporter \ --config.file=/etc/prometheus/blackbox.yml Restart=on-failure [Install] WantedBy=multi-user.target</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>监控</category><category>拨测</category></item><item><title>如何查看 Tekton 的流水线指标</title><link>https://www.chenshaowen.com/blog/how-to-insight-the-pipeline-of-tekton.html</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Jun 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-insight-the-pipeline-of-tekton.html</guid><description>1. 抓取 Tekton Metrics 新增 ConfigMap 配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: v1 kind: ConfigMap metadata: name: config-observability namespace: tekton-pipelines labels: app.kubernetes.io/instance: default app.kubernetes.io/part-of: tekton-pipelines data: metrics.backend-destination: prometheus metrics.taskrun.level: &amp;#34;task&amp;#34; metrics.taskrun.duration-type: &amp;#34;histogram&amp;#34; metrics.pipelinerun.level: &amp;#34;pipeline&amp;#34; metrics.pipelinerun.duration-type: &amp;#34;histogram&amp;#34; EOF 修改 data 中的配置，会改变上报指标的粒度，甚至会严重影响 Prometheus 的性能，需要谨慎修改。 重启 Tekton 1 kubectl -n tekton-pipelines rollout restart deployment tekton-pipelines-controller [可选] 将 tekton-pipelines-controller 设置为 NodePort</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Tekton</category><category>监控</category><category>指标</category></item><item><title>如何采集 Kubernetes 对象的 labels 和 annotations</title><link>https://www.chenshaowen.com/blog/how-to-collect-labels-and-annotations-of-kubernetes-objects.html</link><pubDate>Thu, 02 Jun 2022 01:00:00 +0000</pubDate><atom:modified>Thu, 02 Jun 2022 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-collect-labels-and-annotations-of-kubernetes-objects.html</guid><description>1. 为什么需要 kube-status-metrics Kubernetes 的监控主要关注两类指标: 基础性能指标 CPU、内存、磁盘、网络等指标，可以通过 DaemonSet 部署 node-exporter，由 Prometheus 抓取相关指标。 资源对象指标 Deployment 的副本数量、Pod 的运行状态等。这些指标需要 kube-status-metrics 轮询 Kubernetes 的 API 查询，并暴露给 Prometheus 才能够看到</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>监控</category><category>指标</category><category>采集</category></item><item><title>海外多区下的监控系统</title><link>https://www.chenshaowen.com/blog/the-monitor-system-cross-multi-region.html</link><pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate><atom:modified>Wed, 25 May 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-monitor-system-cross-multi-region.html</guid><description>1. 相关背景 待在工作岗位上，总得做点事，也想做点新鲜事。但并不是你想做就有机会去做，并能做好。 一个人做、还是能和大家一起做，最终的结果是不一样的。这就涉及到时机，大家能否达成一致的动机。 今年是降本增效的一年，很多公司在裁员、减配降本。因此，对</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>监控</category><category>海外</category><category>多区</category></item><item><title>二进制部署 Thanos</title><link>https://www.chenshaowen.com/blog/install-thanos-using-binary.html</link><pubDate>Wed, 11 May 2022 19:51:48 +0000</pubDate><atom:modified>Wed, 11 May 2022 19:51:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-thanos-using-binary.html</guid><description>1. 下载二进制文件 1 2 3 4 wget https://github.com/thanos-io/thanos/releases/download/v0.26.0/thanos-0.26.0.linux-amd64.tar.gz tar xvf thanos-0.26.0.linux-amd64.tar.gz mv thanos-0.26.0.linux-amd64/thanos /usr/bin/ rm -rf thanos-0.26.0.linux-amd64* 2. 安装 Thanos Query 1 vim /etc/systemd/system/thanos-query.service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [Unit] Description=Thanos Query After=network-online.target [Service] Restart=on-failure ExecStart=/usr/bin/thanos query \ --log.level=debug \ --query.auto-downsampling \ --grpc-address=0.0.0.0:30091 \ --http-address=0.0.0.0:30092 \ --query.partial-response \ --query.replica-label=prometheus_replica \ --query.replica-label=rule_replica \ --store=1.0.0.0:30091 \ --store=2.0.0.0:30091 [Install] WantedBy=multi-user.target --store 参数添加需要聚合的全部源。 1 systemctl daemon-reload &amp;amp;&amp;amp; systemctl enable thanos-query 1 systemctl start thanos-query &amp;amp;&amp;amp; systemctl status thanos-query 3. 安装 Thanos Sidecar 1 vim /etc/systemd/system/thanos-sidecar.service 1 2 3 4 5</description><dc:creator>微信公众号</dc:creator><category>监控</category><category>Thanos</category><category>协议</category><category>博文</category></item><item><title>Thanos 进阶使用指南</title><link>https://www.chenshaowen.com/blog/an-advanced-user-guide-about-thanos.html</link><pubDate>Mon, 28 Mar 2022 19:51:48 +0000</pubDate><atom:modified>Mon, 28 Mar 2022 19:51:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/an-advanced-user-guide-about-thanos.html</guid><description>1. 使用 Query 聚合数据 如上图，Thanos Query 可以对接的组件有： Thanos Store Gateway Thanos Query Thanos Receive Prometheus，借助于 Sidecar 利用 Thanos Query 之间的级联，我们可以实现跨组件的关联查询，组建超大型的监控系统。这也意味着，每个对接的组件应该提供足够快的 Prometheus API。整个接口的响应时</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Thanos</category><category>监控</category><category>存储</category><category>指标</category></item><item><title>使用 Thanos 集中管理多 Prometheus 实例数据</title><link>https://www.chenshaowen.com/blog/manage-multiple-prometheus-using-thanos.html</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Mar 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/manage-multiple-prometheus-using-thanos.html</guid><description>1. 监控的分层 如上图，在建设监控系统时，会采用两种策略: 分层监控。IaaS、MySQL 中间件、App 层监控分开的好处是，系统之间具有高可用性、容错性。当 App 层监控无法工作时，IaaS 层监控立马就会体现出来。 长短期指标分离。短期指标用来提供给告警</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Thanos</category><category>Prometheus</category><category>监控</category><category>存储</category></item><item><title>监控告警系统概述</title><link>https://www.chenshaowen.com/blog/monitor-and-alarm-system-101.html</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 15 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/monitor-and-alarm-system-101.html</guid><description>监控系统的难点在于，存储大容量时序数据，提供高性能的查询能力；告警系统的难点在于，设计高效的告警引擎，实现灵活的告警升级机制。最近一直在跟踪监控告警系统，本篇主要是整理监控告警相关的一些概念、组件，调研方案。 1. 监控告警系统的组成 对于监控告警</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>监控</category><category>告警</category></item><item><title>Granafa 配置主机监控</title><link>https://www.chenshaowen.com/blog/how-to-config-host-monitor-on-grafana.html</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 20 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-config-host-monitor-on-grafana.html</guid><description>1. 安装 node exporter 1 2 3 wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz tar xvfz node_exporter-1.3.1.linux-amd64.tar.gz mv node_exporter-1.3.1.linux-amd64/node_exporter /usr/local/bin/ 如果访问不了 GitHub，可以参考: 国内访问 GitHub 的若干方法 。 2. 配置并启动 exporter 新增 Systemd 配置 1 vim /etc/systemd/system/node_exporter.service 增加如下内容: 1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=Node Exporter After=network.target [Service] User=root Group=root Type=simple ExecStart=/usr/local/bin/node_exporter [Install] WantedBy=multi-user.target 启动 exporter 1 2 systemctl daemon-reload systemctl start node_exporter 添加开机自启动 1 systemctl enable node_exporter 本地查看 Metric 接口 1 2</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Grafana</category><category>监控</category><category>主机</category></item><item><title>Prometheus</title><link>https://www.chenshaowen.com/blog/monitor-about-prometheus.html</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><atom:modified>Wed, 07 Feb 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/monitor-about-prometheus.html</guid><description>互联网的服务常依赖于成千上万的主机，而这些主机又部署在世界各地，再加上错综复杂的用户环境，要保证服务的稳定可靠，就需要对服务进行监控。监控的目的可以从这几个方面考虑：从系统维度，了解CPU、内存、硬盘使用情况；从网络监控维度，了解网络上行、</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>监控</category></item></channel></rss>
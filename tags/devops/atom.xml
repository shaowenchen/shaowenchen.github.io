<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>DevOps on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/devops/</link><description>Recent content in DevOps on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Thu, 28 Sep 2023 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/devops/atom.xml" rel="self" type="application/rss+xml"/><item><title>一些程序构建的优化技巧</title><link>https://www.chenshaowen.com/blog/some-tips-for-optimizing-program-building.html</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 28 Sep 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-tips-for-optimizing-program-building.html</guid><description>持续更新中&amp;hellip; 1. Golang 使用 trimpath 移除编译路径，避免暴露编译路径信息 1 go build -gcflags=&amp;#34;all=-trimpath=${PWD}&amp;#34; -asmflags=&amp;#34;all=-trimpath=${PWD}&amp;#34; -o ./bin/opscli ./cmd/cli/main.go 添加之前异常输出路径 /Users/shaowenchen/Code/Github/ops/main.go，添加之后异常输出路径 main.go 。 -ldflags &amp;ldquo;-w -s&amp;rdquo; 移除调试信息，减小</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>DevOps</category><category>最佳实践</category></item><item><title>流水线构建时，凭证作用域问题</title><link>https://www.chenshaowen.com/blog/the-scope-of-credential-in-building.html</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 06 Jul 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-scope-of-credential-in-building.html</guid><description>在 client 中已经看到 Docker CLI 在给 Docker Daemon 发生构建上下文时，通过设置 X-Registry-Config 传递凭证，但在最近的构建反馈中，还是会出现一些无法解释的现象，本篇主要是进行一些基础的测试，以便于更好排查问题。 1. 宿主机 Docker 下构建 Docker Daemon 以 root 用户权限启动。 未登录任何账户 1 2 3 4 su ansible echo &amp;#34;FROM harbor.chenshaowen.com/private/test:v1&amp;#34; | sudo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>DevOps</category><category>凭证</category><category>Kubernetes</category></item><item><title>Tekton 优化之定制集群调度器</title><link>https://www.chenshaowen.com/blog/custom-cluster-scheduler-to-optimize-tekton.html</link><pubDate>Wed, 26 Apr 2023 10:00:00 +0000</pubDate><atom:modified>Wed, 26 Apr 2023 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/custom-cluster-scheduler-to-optimize-tekton.html</guid><description>1. 受限的构建环境无法满足构建需求 Tekton 是基于 Kubernetes 集群的 CICD 引擎，相较于 Jenkins 更加云原生。说人话就是，更好开发插件、更好扩容、更好可观测性、更好玩儿。 由于代码仅能落盘公司内网，导致构建集群仅能部署于办公内网。这导致了很多受限： 硬件资源，没有弹性扩容能力 网</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>优化</category><category>Tekton</category><category>CICD</category><category>DevOps</category></item><item><title>优化 Tekton 执行克隆任务慢问题，节省约 30 秒</title><link>https://www.chenshaowen.com/blog/optimizing-the-slow-of-tekton-clone-task.html</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/optimizing-the-slow-of-tekton-clone-task.html</guid><description>1. 现象 - Tekton 克隆代码任务慢 在执行克隆任务时，Tekton 很费时间，多仓库下一般都需要 2 分 30 秒左右。如下图: 仅克隆的流水线就需要执行 2 分钟 16 秒，而克隆脚本实际上仅执行 1-3 秒。其中大部分时间花在了哪里？能不能减少？这是本篇主要想讨论的问题。 2. 分析克</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>Kubernetes</category><category>CI</category><category>CICD</category><category>DevOps</category></item><item><title>SRE 向左，DevOps 向右</title><link>https://www.chenshaowen.com/blog/sre-to-left-devops-to-right.html</link><pubDate>Sat, 10 Sep 2022 08:00:00 +0000</pubDate><atom:modified>Sat, 10 Sep 2022 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/sre-to-left-devops-to-right.html</guid><description>1，脱离职责的流程是没有意义的 软件架构与组织架构相匹配，不仅仅体现在功能边界，更体现在职责划分。 清晰的职责边界，才能构筑良好的团队协作与发展。每个团队、每个人都应该明白自己的目标，什么事情应该承担，什么事情应该回避，将时间和精力投入到对主要</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>SRE</category><category>DevOps</category><category>思考</category></item><item><title>分阶段构建如何缓存第三方依赖</title><link>https://www.chenshaowen.com/blog/how-to-cache-third-party-package-whilie-building-in-stage.html</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-cache-third-party-package-whilie-building-in-stage.html</guid><description>非分阶段构建场景下，使用容器进行构建时，我们可以将容器中的缓存目录挂载到构建主机上，执行构建任务；然后将产物拷贝到运行镜像，制作应用镜像。但是在分阶段构建时，构建镜像和运行镜像在同一个 Dockerfile 中，这给优化第三方依赖的缓存带来了难度。 1. 创建一个 Vue 实</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>CI</category><category>DevOps</category><category>缓存</category><category>优化</category></item><item><title>Jenkins为什么一直调度到同一个节点</title><link>https://www.chenshaowen.com/blog/why-does-jenkins-agent-like-going-to-the-same-node.html</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/why-does-jenkins-agent-like-going-to-the-same-node.html</guid><description>1. 问题背景 在 Jenkins 中添加了很多个构建节点使用同一个 Label 以供流水线使用，但是 Jenkins 却每次都倾向于在同一个节点进行构建。 这导致了并发问题，单个节点的压力过大，而其他节点空闲，负载极其不均衡。 2. 业务流水线的设计 上述问题的产生和业务流水线的设计有一定的关系。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>CICD</category><category>DevOps</category></item><item><title>基于 Tekton 的 CICD 平台</title><link>https://www.chenshaowen.com/blog/a-cicd-system-based-on-tekton.html</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-cicd-system-based-on-tekton.html</guid><description>1.背景 1.1 目前使用 Jenkins 遇到的问题 编排引擎不稳定 Jenkins 是由 Java 编写的编排引擎，在 Full GC 时会 Stop The World(STW)。在大规模构建时，STW 可能会导致 Jenkins 无法处理新的请求。 大量构建卡顿 Jenkins 使用磁盘文件存储数据，每条流水线、每次构建都会占用一个文件目录，产生大</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>DevOps</category><category>Tekton</category></item><item><title>如何远程触发 GitHub Action</title><link>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</guid><description>通常，我们需要在 GitHub 上进行一些操作，才能触发 GitHub Action。本篇将介绍一种通过 API 远程调用触发 GitHub Action 的方法。 1. 常见的几种触发 GitHub Action 的方式 下面是一个 GitHub Action 的示例: 1 2 3 4 5 6 7 name: GitHub Actions Demo on: [push, pull_request] jobs: Explore-GitHub-Actions: runs-on: ubuntu-latest steps: - run: echo &amp;#34;Hello World!&amp;#34; 在 on 关键字下，定义的就是触发 Workflow 执行的事件。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>在 Tekton 中如何实现审批功能</title><link>https://www.chenshaowen.com/blog/how-to-implement-approval-function-in-tekton.html</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 24 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-implement-approval-function-in-tekton.html</guid><description>1. CICD 平台的基本功能 常见的 CICD 引擎并不适合直接提供给业务方使用。主要原因在于用户学习成本高、缺乏必要的鉴权、维护升级难度大。 我们通常会基于流程引擎，针对业务进行适配提高易用性，针对场景进行封装收敛复杂度，那么一个 CICD 平台需要具备哪些基本的功能呢？</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>Kubernetes</category><category>CICD</category><category>DevOps</category></item><item><title>如何定制自己的 Jenkins 镜像</title><link>https://www.chenshaowen.com/blog/how-to-customize-your-jenkins.html</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-customize-your-jenkins.html</guid><description>1. 如何部署 Jenkins 为了方面进行下面的测试，先介绍两种部署 Jenkins 的方式，这里使用的是 shaowenchen/jenkins:2.277.4 镜像。在生产环境中，需要替换为官方 jenkins/jenkins 镜像或自己定制的镜像。 1.1 docker-compose 运行 docker-compose.yaml 文件 version: &amp;#39;3&amp;#39; services: jenkins: image: shaowenchen/jenkins:2.277.4 container_name: jenkins restart: always network_mode: &amp;#34;bridge&amp;#34; environment: - JAVA_OPTS=&amp;#34;-Xms1Gi -Xmx4Gi&amp;#34; ports: - 8080:8080 - 50000:50000 - 2222:2222 environment: TZ: Asia/Shanghai volumes: - /Volumes/Data/jenkins_home:/var/jenkins_home 在本地创建一个目录 /Volumes/Data/jenkins_home 用于存储 Jenkins 的数据</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>CICD</category><category>Jenkins</category></item><item><title>Jenkins 在 Kubernetes 上的最佳实践</title><link>https://www.chenshaowen.com/blog/best-practices-for-jenkins-on-kubernetes.html</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/best-practices-for-jenkins-on-kubernetes.html</guid><description>1. 配置较大的 -Xms -Xmx 参数 Jenkins 是由 Java 编写的编排引擎, 在 Full GC 时会 Stop The World(STW)。在大规模构建时, STW 可能会导致 Jenkins 无法处理新的请求。 为了避免频繁的 STW, 同时增大并发量, 建议设置较大的堆, -Xms3g -Xmx6g -XX:MaxRAM=6g。具体数值可以根据监控值来设置,</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>CICD</category><category>Jenkins</category></item><item><title>一个通用流水线设计</title><link>https://www.chenshaowen.com/blog/a-universal-design-for-pipeline.html</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 19 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-universal-design-for-pipeline.html</guid><description>1. 解耦引擎释放流水线能力 在设计系统时，我们常面临两难。是内敛复杂度，对外提供单一易用的功能；还是释放复杂度，将灵活归还用户。这非常考验产品能力。 设计 CICD 系统时，我们可以直接将 Jenkinsfile、PipelineRun 等概念直接抛给用户，让</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CloudNative</category><category>DevOps</category><category>CICD</category></item><item><title>Tekton 如何接入物理机进行构建</title><link>https://www.chenshaowen.com/blog/how-to-add-physical-machines-to-tekton.html</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 28 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-physical-machines-to-tekton.html</guid><description>1. 为什么需要物理构建机 在文章《如何接入远程 macOS 物理机进行 Jenkins 流水线构建》中，我描述了在 Jenkins 中添加物理构建机的方法。这并不是我拍脑袋想的需求，而是当时真的有 ToB 的商业客户在咨询方案。 对于多端开发商来说，构建 Android、IOS、macOS、Arm 、</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>云原生</category><category>Kubernetes</category><category>CICD</category><category>DevOps</category></item><item><title>云原生下的 DevOps 平台</title><link>https://www.chenshaowen.com/blog/devops-platform-under-cloud-native.html.html</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 24 Mar 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/devops-platform-under-cloud-native.html.html</guid><description>1. 什么是云原生 云原生是一个快速发展的领域。 2013 年, Pivotal 提出云原生的概念，并不断对其进行解读。下面是 Pivotal 对云原生架构的特征描述: 2015年，12-Factor、面向微服务、抗脆弱 2017年，可观测性、模块化、可替代性、可处理性 2019年，DevOp</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>思考</category><category>云原生</category></item><item><title>DevOps 工具链之 Lighthouse 介绍</title><link>https://www.chenshaowen.com/blog/lighthouse-of-devops-tool-chain.html</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 05 Mar 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/lighthouse-of-devops-tool-chain.html</guid><description>本文介绍一个 ChatOps 工具 Lighthouse, 主要内容来自官方文档 。Kubernetes 社区使用 Prow 驱动其在 GitHub 上的协作, 但是不适用于其他仓库。Lighthouse 普适于更多类型的 Git 仓库。 1. 什么是 Lighthouse Lighthouse 是一个基于 webhooks 的轻量级 ChatOps 工具 , 通过 Git 仓库的 webhooks 可以触发 Jenkins X 流水线 、Tekt</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>DevOps</category><category>Prow</category><category>Kubernetes</category><category>CICD</category><category>Lighthouse</category></item><item><title>基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</title><link>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 25 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</guid><description>从原理上看，在 Kubernetes 集群中，Jenkins 都可以使用 Podman 进行镜像构建，本文主要以 Containerd 为例。 1. 去 Docker 给 CICD 带来新的挑战 在 CICD 场景下, 我们经常需要在流水线中构建和推送镜像。 在之前的文档 《在 Kubernetes 上动态创建 Jenkins Slave》 中, 我描述了通过挂载 /var/run/docker.sock 文件, 允许在 Docker 驱动的 Kubernetes</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category><category>Docker</category><category>Kubernetes</category></item><item><title>Tekton Hub 正式上线 - https://hub.tekton.dev/</title><link>https://www.chenshaowen.com/blog/tekton-hub-is-live.html</link><pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 24 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/tekton-hub-is-live.html</guid><description>原文由来自 Red Hat (CDF 成员) 的 Puneet Punamiya 撰写。 Tekton 是持续交付基金会 (CDF) 下的一个开源项目。它提供了一个以云原生构建 CI/CD 系统的框架。简单点说, 人们可以将整个 CI/CD 流水线定义为 Kubernetes 资源。 Tekton Pipelines 的核心是一个可复用的组件 - Task, 很容易共享。在 Tekton Catalog 仓库中包含了这些 Task 的列表。这些 Task 可</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>Tekton</category><category>CICD</category><category>DevOps</category></item><item><title>老树开新花 - Cloud Native Buildpacks</title><link>https://www.chenshaowen.com/blog/a-sample-intro-to-cloud-native-buildpacks.html</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 05 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-sample-intro-to-cloud-native-buildpacks.html</guid><description>1. Buildpack 老树开新花 Buildpacks 项目最早是由 Heroku 在 2011 年发起, 被以 Cloud Foundry 为代表的 PaaS 平台广泛采用。在之前的文档 《PaaS 部署之 buildpack》 中, 我演示了如何将一个 Django 应用部署到 Heroku 上。 Buildpacks 不足的是产出包是 Droplet 格式, 不能直接适配容器平台。 在 2018 年 1 月, Pivotal 和 Heroku 发起了一个项</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>Buildpack</category><category>容器</category><category>镜像</category></item><item><title>DevOps 工具链之 Argo CD</title><link>https://www.chenshaowen.com/blog/argocd-of-devops-tool-chain.html</link><pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 04 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/argocd-of-devops-tool-chain.html</guid><description>1. Argo CD 能解决什么问题 1.1 从 GitOps 说起 GitOps 起源于 Weaveworks 公司在 2017 年发表的一篇博客， GitOps - Operations by Pull Request 。在文中，Alexis 介绍了一种以 Git 为唯一事实来源的部署方式。 在 GitOps 实践中，我们需要将软件设施定义在 Git 仓库中进行管理。其中的软件设施，包括 IaaS、Kubernet</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>ArgoCD</category><category>Kubernetes</category><category>CICD</category></item><item><title>10 个你该了解的 GitHub Actions 进阶技巧</title><link>https://www.chenshaowen.com/blog/10-tips-of-github-action.html</link><pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Sun, 31 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/10-tips-of-github-action.html</guid><description>如果你已经在使用 GitHub Actions ，那么阅读本文你将获得更多有趣而有用的打开方式。阅读完，我又给仓库新增了几个 workflow 。 1. workflow 执行时，传入参数 在执行 workflow 时, 允许在 GitHub Actions 页面输入参数，控制执行逻辑。我们可以将人工处理的逻辑，在 GitHub Actions 参数化执行，适用于持续部署场景。 1 2 3</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>CICD</category><category>DevOps</category></item><item><title>不限次数，单次最长 6 小时免费在线体验 Kubernetes</title><link>https://www.chenshaowen.com/blog/free-kubernetes-env-using-github-actions.html</link><pubDate>Wed, 20 Jan 2021 01:00:00 +0000</pubDate><atom:modified>Wed, 20 Jan 2021 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/free-kubernetes-env-using-github-actions.html</guid><description>1. 登录 Ngrok 获取一个 Authtoken 1.1 登陆 Ngrok 官网，获取 Authtoken 访问 Ngrok 官网，https://dashboard.ngrok.com/ , 可以使用 GitHub 或者 Google 账户登陆。 进入 Authentication 页面，找到自己的 Authtoken，如下图: 1.2 在 GitHub 项目下，配置 Secrets 在项目的 Settings 页面中，新增 Secrets</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>DevOps</category><category>CICD</category><category>demo</category></item><item><title>debugger-action 更新 v2 版支持 ngrok</title><link>https://www.chenshaowen.com/blog/a-debugger-for-actions-v2.html</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 20 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-debugger-for-actions-v2.html</guid><description>1. 什么是 Ngrok Ngrok 是一个内网穿透工具，能够将内网的服务，发布到公网上。下面这张图，可以很好地展示其功能: 相较于同类工具 Frp (需要同时运行 Server 和 Client )，Ngrok 将内网穿透做成了一个服务。只需要在 Ngrok 注册账户，获得 Authtoken ，启动 Client 就可以对外提供，本地服务的公网地</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>DevOps</category><category>CICD</category><category>demo</category></item><item><title>GitHub Actions 在线调试工具：debugger-action</title><link>https://www.chenshaowen.com/blog/a-debugger-for-actions.html</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 18 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-debugger-for-actions.html</guid><description>1. Debug 到想跑路 GitHub Actions 是 GitHub 在 2018 年 10 月推出的持续集成服务。对于开源项目，免费提供无限时长的构建时间，同时支持 Linux、MacOs、Windows 系统，非常招人喜爱。 但是，最近的一次经历改变了我的看法。我给同事的仓库，提交了一个 improvement: build and ci 的 commit ，用于完</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>DevOps</category><category>CICD</category><category>demo</category></item><item><title>GitHub Actions 三步教你打造 ChatOps 系统</title><link>https://www.chenshaowen.com/blog/using-github-actions-to-build-a-chatops-in-three-steps.html</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 06 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-github-actions-to-build-a-chatops-in-three-steps.html</guid><description>在上一篇文档 《使用 ChatOps 改进研发流程》中，通过 ChatOps 给 Pull Requests 提供预览链接提升了敏捷速度。本篇主要描述如何快速实现这个功能。 1. 第一步: 配置一个触发器 1.1 选择一个触发器 在 GitHub 中有三类 Workflows 触发器，定时、人工、自动触发器。我们需要选择一个自动触发器，用于触发执行逻</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>DevOps</category><category>ChatOps</category></item><item><title>使用 ChatOps 改进研发流程</title><link>https://www.chenshaowen.com/blog/using-chatops-to-improve-the-r-and-d-process.html</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 06 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-chatops-to-improve-the-r-and-d-process.html</guid><description>1. 什么是 ChatOps GitOps、ChatOps、AIOps 等(以下简称 NewOps )是近几年出现的新兴运维理念。NewOps 将 Ops 从混沌的状态离析为两个部分：一个面向用户，趋势是更加人性化、可审计、可回溯；另一个面向基础设施，趋势是更加程序化、自动化、智能化。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>DevOps</category><category>ChatOps</category></item><item><title>DevOps Workshop 复盘总结</title><link>https://www.chenshaowen.com/blog/the-summary-of-devops-workshop.html</link><pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Thu, 24 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-summary-of-devops-workshop.html</guid><description>1. 什么是 Workshop Workshop ( 工作坊 ) 是以领域富有经验的主讲人为核心，通过活动、讨论、演讲等方式，指导成员共同讨论某个话题的学习形式。 相较于传统的方式，Workshop 具有如下特点: 更具有针对性 有点像研习班，可以针对某一类问题，集中、充分地进行讨论。 组织更</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>总结</category><category>思考</category><category>DevOps</category><category>Workshop</category></item><item><title>Tekton 概念篇 - 好大一盘棋</title><link>https://www.chenshaowen.com/blog/the-concept-of-tekton-a-big-game.html</link><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 12 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-concept-of-tekton-a-big-game.html</guid><description>1. 谈谈对 CICD 工具的审美 我在文档 软件产品是团队能力的输出 中提到，软件产品是解决方案的交付承载物，其优劣取决于团队对核心问题的理解。对领域有深入理解，交付的产品才有好的可能。CICD 是一个应用很广泛的领域，在不同的场景下，总有人在琢磨重复造轮子，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>Tekton</category><category>CICD</category><category>思考</category></item><item><title>Daemon-less 镜像构建工具 - Kaniko</title><link>https://www.chenshaowen.com/blog/the-daemon-less-tools-of-kaniko.html</link><pubDate>Fri, 11 Dec 2020 08:00:00 +0000</pubDate><atom:modified>Fri, 11 Dec 2020 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-daemon-less-tools-of-kaniko.html</guid><description>1. daemon-less 镜像构建工具 1.1 什么是 daemon-less 镜像构建工具 在 CICD 流程中，经常会涉及镜像构建，常规的做法是使用 Docker in Docker 或者 Docker out of Docker 进行构建。详情可以参考文档：如何在 Docker 中使用 Docker 实际上，为了避免垄断，促进行业发展，基于 Docker 的镜像格式，早就指定了统一的 OCI 镜像格式规范。也就是</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>镜像</category><category>CICD</category><category>Kubernetes</category></item><item><title>一张画布搞定 DevOps、ServiceMesh、Serverless</title><link>https://www.chenshaowen.com/blog/a-canvas-cover-devops-servicemesh-serverless.html</link><pubDate>Sat, 05 Dec 2020 00:01:00 +0000</pubDate><atom:modified>Sat, 05 Dec 2020 00:01:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-canvas-cover-devops-servicemesh-serverless.html</guid><description>很多云原生的开源组件是先有服务，后有可视化。今天开了个脑洞，反其道而行，先有可视化交互，再设计底层。 1. 一张画布搞定半壁云原生 用户只需要一张画布，定义好 Workflow，就可以自由地游走在各种高大上的 Cloud Native 应用之上。 2. 为什么会这种奇怪的想法 2.1 看</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CloudNative</category><category>DevOps</category><category>ServiceMesh</category><category>Serverless</category></item><item><title>构建 Scalable 团队</title><link>https://www.chenshaowen.com/blog/build-a-scalable-team.html</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-a-scalable-team.html</guid><description>对于互联网行业的工程师，常思考的是系统的 Scalable，例如，流量、计算、存储增长时如何改进系统，有各种水平、垂直扩容的方案。除了服务，团队的 Scalable 也是十分关键的。本篇主要思考的是，如何组织团队，在一定规模下，通过加人能够提升团队的事务处理能</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>思考</category><category>研发</category><category>团队</category><category>DevOps</category></item><item><title>如何给 GitHub Actions 添加自己的 Runner 主机</title><link>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</guid><description>1. 什么是 GitHub Actions 在前面的文档中，我对 GitLab 提供的 CI 功能进行了实践，点击查看 。使用 GitLab 的好处是可以私有化部署、无限的私有仓库数量、CI 配置简单、能接入自建的 Runner 。但随着 GitHub 越来越开放，GitLab 的这些优势在逐步丧失。 从 CICD 的角度看，越接近 Git 仓库的功能，越贴</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>《DevOps 能力成熟度模型》下载</title><link>https://www.chenshaowen.com/blog/capability-maturity-model-of-devops.html</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 27 Nov 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/capability-maturity-model-of-devops.html</guid><description>揭秘《DevOps 能力成熟度模型》 研发运营(DevOps)解决方案能力分级要求 - PDF 下载 第1部分：总体架构 - PDF 下载 第2部分：敏捷开发管理过程 - PDF 下载 第3部分：持续交付过程 - PDF 下载 第4部分：技术运营 - PDF 下载 第5部分：应用设计 - PDF 下载 第6部分：安</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>DevOps</category><category>标准</category><category>模型</category></item><item><title>如何接入远程 macOS 物理机进行 Jenkins 流水线构建</title><link>https://www.chenshaowen.com/blog/how-to-run-the-pipeline-on-remote-osx.html</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 22 Nov 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-run-the-pipeline-on-remote-osx.html</guid><description>本文同样适用于接入 ARM、MIPS 架构，FreeBSD、Windows 系统的物理机，如果 Jenkins 能连上构建机，可以跳过 Frp 部分。 1. 遇到的问题 在以 Kubernetes 为基础设施的场景下，Jenkins 构建流水线时，将为每一条流水线单独创建一个 Pod 用于构建。Pod 中的容器</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>macOS</category><category>CICD</category><category>CI</category><category>DevOps</category></item><item><title>KubeSphere DevOps 3.0 流水线运维指南</title><link>https://www.chenshaowen.com/blog/the-operation-guide-of-kubesphere-devops-3-0-pipeline.html</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 14 Oct 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-operation-guide-of-kubesphere-devops-3-0-pipeline.html</guid><description>本篇主要介绍如何运维 DevOps 流水线，怎么解决一些常见的问题。问题主要分为两大类，一类是 Kubernetes 相关的，具有一定通用性；另一类是与业务相关，需要对领域有所了解，解决问题时才能事半功倍。文档内容，会不断滚动更新。 1. Kubernetes 问题排查 1.1 基本的创建流程 如上图所示，是用</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>KubeSphere</category><category>DevOps</category><category>Jenkins</category><category>运维</category></item><item><title>KubeSphere DevOps 3.0 流水线开发指南</title><link>https://www.chenshaowen.com/blog/the-development-guide-of-kubesphere-devops-3-0-pipeline.html</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 13 Oct 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-development-guide-of-kubesphere-devops-3-0-pipeline.html</guid><description>KubeSphere DevOps 包含 S2I 和 Pipeline 两部分。在社区中，openshift 提供了一个打包应用的工具 S2I，具体请参考 使用 S2I 构建云原生应用 。KubeSphere 将其做成了服务，采用 CRD 使用一个单独的 Operator 对其进行管理，功能比较独立。而在 3.0 中 Pipeline 与 KubeShere Core 耦合依然十分紧密，在搭建</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>KubeSphere</category><category>DevOps</category><category>Jenkins</category><category>开发环境</category></item><item><title>如何使用 Terraform Provider 提供 Iac 级别的应用</title><link>https://www.chenshaowen.com/blog/how-to-use-terraform-to-provide-iac-platform.html</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 22 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-terraform-to-provide-iac-platform.html</guid><description>1. Terraform Vs Kubernetes 基础架构即代码（Iac) 基于不可变的基础架构，使用编排工具将基础架构文本化，允许像管理代码一样管理基础设施。 2018 年，我在从事 SaaS 开发，使用 Kubernetes 平台进行部署，这一年 Terraform 很火。2019 年，我开始从事 Kubernetes 的二次开发，才听说 Terraform 。现在网上 Terraform 相关的文档增</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Terraform</category><category>Iac</category><category>Kubernetes</category><category>DevOps</category><category>CICD</category><category>研发</category></item><item><title>Jenkins X 不是 Jenkins ，而是一个技术栈</title><link>https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 16 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html</guid><description>1. Jenkins X 简介 Jenkins 依靠庞大的插件生态，占据了目前大部分的企业级 CICD 引擎的份额。但在云原生时代，Jenkins 也暴露出很多的问题，单点服务、磁盘存储、内存占用等。 Jenkins X 围绕 Kubernetes，提供了一种更适合云原生时代的 DevOps 方式。Jenkins X 不是 Jenkins</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>技术栈</category><category>Jenkins</category><category>Jenkins-X</category><category>DevOps</category><category>CICD</category><category>Terraform</category></item><item><title>Kubernetes 动态创建 Jenkins Agent 压力测试</title><link>https://www.chenshaowen.com/blog/the-stress-test-about-kubernetes-dynamically-creates-jenkins-agent.html</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 02 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-stress-test-about-kubernetes-dynamically-creates-jenkins-agent.html</guid><description>前面的文档中，我们利用 Kubernetes 提供的弹性，在 Kubernetes 上动态创建 Jenkins Slave 。本篇文档主要是对 Jenkins 进行大规模构建的压力测试。 1. 集群配置 1.1 Kubernetes 版本 这里使用的是 v1.16.7 1 2 3 4 kubectl version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.7&amp;#34;, GitCommit:&amp;#34;be3d344ed06bff7a4fc60656200a93c74f31f9a4&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-02-11T19:34:02Z&amp;#34;, GoVersion:&amp;#34;go1.13.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.7&amp;#34;, GitCommit:&amp;#34;be3d344ed06bff7a4fc60656200a93c74f31f9a4&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-02-11T19:24:46Z&amp;#34;, GoVersion:&amp;#34;go1.13.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} 1.2 节点数量 集群节点总数， 16 个 1 2 3 kubectl get node |grep &amp;#34;Ready&amp;#34; | wc -l 16</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>DevOps</category><category>测试</category></item><item><title>DevOps 精要：业务视角</title><link>https://www.chenshaowen.com/blog/book/the-essentials-of-devops.html</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 23 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/the-essentials-of-devops.html</guid><description>作者:（俄）奥列格·斯克伦尼科（Oleg Skrynnik） 出版社: 清华大学出版社 出版年: 2020-05-01 ISBN: 9787302547143 Notes: 内容如题，书中主要阐述了业务视角中的 DevOps 。从起源到基础，从原则到实践，你都可以从中有所收获。DevOps 的基础是精益生产（丰田流水线）和敏捷开发，</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>DevOps</category><category>CICD</category><category>研发</category></item><item><title>Jenkins 中 Lightweight 拉取代码问题分析</title><link>https://www.chenshaowen.com/blog/the-question-of-lightweight-checkout-in-jenkins.html</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 22 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-question-of-lightweight-checkout-in-jenkins.html</guid><description>1. 遇到了什么问题 Jenkins 执行日志报错： 1 2 3 4 5 6 Started by user admin Lightweight checkout support not available, falling back to full checkout. Checking out git https://github.com/shaowenchen/pipeline-test.git into /var/jenkins_home/workspace/abc@script to read Jenkinsfile ... ... Unable to access &amp;#39;.git/index.lock&amp;#39;: File exists. 原因分析： 简单介绍一下 Jenkins 的部署情况，Jenkins 使用 Helm Chart 部署在 Kubernetes，使用 Kubernetes 动态 Pod 进行构建。Jenkins 的 /var/jenkins_home 挂载到 PV</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Git</category><category>DevOps</category><category>问题</category></item><item><title>Jenkins 中的构建产物与缓存</title><link>https://www.chenshaowen.com/blog/artifacts-and-cache-in-jenkins.html</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 21 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/artifacts-and-cache-in-jenkins.html</guid><description>在 CICD 的流程中，需要保存的产物主要有两类，构建产物和缓存。构建产物是最终的执行结果，缓存是为了优化下一次的构建速度。本篇主要描述的是在 Jenkins 中如何对构建产物和缓存进行归档，并结合对象存储进行实践。有部分示例使用的是 在 Kubernetes 上动态创建 Jenkins Slave 进行构建，配置</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>S3</category><category>DevOps</category><category>Cache</category></item><item><title>Jenkins 插件开发</title><link>https://www.chenshaowen.com/blog/how-to-develop-the-plugin-of-jenkins.html</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 20 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-develop-the-plugin-of-jenkins.html</guid><description>使用 Jenkins 总是离不开各种各样的插件，为了更好的实践 DevOps ，我们也应该具备开发插件的能力，使整个流程都能够在 Jenkins 中汇合。 1. Jenkins 插件 1.1 插件的生态 Jenkins 前身 Hudson 始于 2004 ，历经 16 年，依然作为主流的 CI/CD 引擎。除了，Jenkins 提供了 Master-Agent 分布式构建、Pipeline 编排的功</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category></item><item><title>Kubernetes Windows 节点动态提供 Jenkins Agent</title><link>https://www.chenshaowen.com/blog/windows-node-to-dynamicly-provide-jenkins-agent-on-k8s.html</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 14 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/windows-node-to-dynamicly-provide-jenkins-agent-on-k8s.html</guid><description>在前面两篇文档，在 Kubernetes 上动态创建 Jenkins Slave 和 Kubernetes 添加 Windows 节点提供 Jenkins 构建动态 Agent 的基础之上，本篇文档主要尝试在 Kubernetes 上动态提供 Windows 构建 Agent 。 1. 新增流水线 Kubernetes 与 Jenkins 集成部分可以参考上面的两篇文档，这里直接新建两条流水线进行测试。 windows - jenkins 内置的流水线示例 1 2 3 4 5 6 7 8 9 10</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>Windows</category><category>DevOps</category></item><item><title>GitHub 三种合并代码方式的差别</title><link>https://www.chenshaowen.com/blog/the-difference-of-tree-ways-of-merging-code-in-github.html</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 18 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-difference-of-tree-ways-of-merging-code-in-github.html</guid><description>1. Create a merge commit PR Commit 记录： 1 2 commit c1 commit c2 集成分支 Commit 记录： 1 2 3 commit PR #NUM commit c2 commit c1 Create a merge commit 会将 PR 中的全部 Commit 记录完整带到集成分支中，同时增加一条 PR Commit 信息。 2. Squash and merge PR Commit 记录： 1 2 commit s1 commit s2 集成分支 Commit 记录： 1 commit PR #NUM Squash and merge 合并之后，集成分支只会增加一条 Commit 记录。观感</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>GitHub</category><category>DevOps</category><category>CICD</category></item><item><title>Jenkins 中 Git 操作 not a tree 分析</title><link>https://www.chenshaowen.com/blog/git-reference-not-a-tree-in-jenkins.html</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 17 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/git-reference-not-a-tree-in-jenkins.html</guid><description>1. 问题描述 配置 Webhook 自动触发执行 Jenkins 流水线时，报错： 1 2 3 hudson.plugins.git.GitException: Command &amp;#34;git checkout -f 23b446ea&amp;#34; returned status code 128: stdout: stderr: fatal: reference is not a tree: 23b446ea 2. Git 如何管理版本 Git 是一个内容寻址文件系统。Git 维护着一棵 sha tree ，通过 sha 值可以回溯到任何一个历史节点。先看看提交记录： 执行命令： 1 2 3 4 5 6 7 8 9 10 11 12</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>问题</category><category>Jenkins</category><category>DevOps</category><category>Git</category></item><item><title>DevOps 工具链之 Prow</title><link>https://www.chenshaowen.com/blog/prow-of-devops-tool-chain.html</link><pubDate>Fri, 17 Apr 2020 13:17:44 +0000</pubDate><atom:modified>Fri, 17 Apr 2020 13:17:44 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/prow-of-devops-tool-chain.html</guid><description>1. 关于 Prow 在 Kubernetes、Istio 等知名项目的 Github 仓库中，我们经常会看到 xxx-bot 用户，给 issues 添加标签、合并 PR 。这个机器人账户就是被 Prow 驱动的。 Prow 是 Kubernetes 测试特别兴趣小组的项目，目前是 kubernetes/test-infra 的一部分。Prow 是一个基于 Kubernetes 使用各类事件驱动执行 Job 的 CI/CD 系统。 除</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>Prow</category><category>Kubernetes</category><category>CICD</category></item><item><title>基于 Kubernetes 和 Jenkins 搭建自动化测试系统</title><link>https://www.chenshaowen.com/blog/build-an-automated-test-system-using-kubernetes-and-jenkins.html</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 12 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-an-automated-test-system-using-kubernetes-and-jenkins.html</guid><description>1. 测试分层 测试的目的是为了验证预期的功能，发现潜在的缺陷。测试增强了交付合格产品的信心，也给敏捷迭代带来了可能。可以说，测试决定了产品的开发进度。 网络模型有七层的 OSI 、四层的 TCP，而开发模式有 MTV、MVC、MVP、MVVM 等。高内聚、低耦</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>Kubernetes</category><category>Jenkins</category><category>DevOps</category></item><item><title>使用 Jenkins 进行服务拨测</title><link>https://www.chenshaowen.com/blog/how-to-dial-up-testing-using-jenkins.html</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 04 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-dial-up-testing-using-jenkins.html</guid><description>1. 为什么要拨测 对于系统中的一些关键服务，我们通常会配置监控服务。当故障发生时，能够尽快被检测到，发送通知给关注人。当故障发生后，能够有效地追溯故障过程。 拨测是监控系统中的一个重要环节，能够检测服务的网络质量，并提供实时告警。 在公有云上，云厂</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>拨测</category><category>邮件</category><category>Poste</category><category>DevOps</category></item><item><title>代码质量分析工具 SonarQube</title><link>https://www.chenshaowen.com/blog/sonarqube-of-code-quality-analysis-tool.html</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 21 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/sonarqube-of-code-quality-analysis-tool.html</guid><description>1. 谁需要 SonarQube 代码审查是高质量软件开发过程中不可缺少的重要环节，能帮助开发者及时发现代码中的 Bug，提升代码质量、可维护性。 代码审查的维度包括，语言规范、代码风格、设计合理等。人工检查这些事项，会消耗大量的精力和时间。 代码质量分析工具为此而生，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>SonarQube</category><category>DevOps</category></item><item><title>如何使用 Jenkins、Docker、GitLab 搭建 Django 自动化部署流程</title><link>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 25 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</guid><description>大公司的程序员，容易产生的错觉之一就是，误将平台能力当作自己的能力。在大团队，我们不应仅关注自己的一亩三分地，更需要了解平台的各个环节。一方面，有助于更好地利用平台相关特性，另一方面，也为了自我技术更好地成长。本文，介绍了如何使用 Jekin</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>GitLab</category><category>Jenkins</category><category>Docker</category><category>DevOps</category></item><item><title>如何利用 CDN 进一步的前后端分离 - CI 脚本</title><link>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 15 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>在团队中，开发流程相关的调整一定要相应的自动化工具配合。如果没有足够低的使用成本，这种调整将会是无意义的，因为根本就不会有人去使用。上一篇，我们提到 如何利用 CDN 进一步的前后端分离 , 这一篇主要讲，如何将这个流程结合到 CI 中。后端的配置，之前的 博客</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category><category>脚本</category><category>DevOps</category></item><item><title>Robot Framework 常用库</title><link>https://www.chenshaowen.com/blog/robot-framework-common-library.html</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/robot-framework-common-library.html</guid><description>1. 标准库 Robot Framework 可以直接导入使用的库，在目录 python\Lib\site-packages\robot\libraries 中。详细说明，可以查看说明文档。 Builtin，包含经常需要的关键字。自动导入无需 import，因此总是可用的。 Dialogs，提供了暂停测试执行和从用户的输入方式。 Collections，提供一组</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>Robot Framework 进阶 （2）</title><link>https://www.chenshaowen.com/blog/senior-of-robot-framework-2.html</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/senior-of-robot-framework-2.html</guid><description>配置表 Robot Framework 的配置表主要有两种用途。详细说明，请参考这里。 导入测试、资源文件和变量文件。 定义元数据。 在 Setting 表格中： 1 2 3 4 5 Library 引入库 Resource 引入资源文件 Variables 引入变量文件 Test Setup 指定缺省的 test setup Test Teardown 指定缺省的 test teardown 在测试用例中： 1 2 3 4 5 6 [Documentation] 测试用例描述 [Tags] 测试用</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>Robot Framework 进阶 （1）</title><link>https://www.chenshaowen.com/blog/senior-of-robot-framework-1.html</link><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Wed, 15 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/senior-of-robot-framework-1.html</guid><description>pybot 命令 执行所有测试用例 1 pybot . 执行某个测试套件 1 pybot testsuite.txt 执行某个测试套件中的测试用例 1 pybot --test case_name testsuit.txt 将测试结果输出到固定路径 1 pybot --ouputdir your_ouput_dir testsuit.txt 执行包含某个 tag 的测试用例 1 pybot --include tag_name testsuit.txt 关于日志 默认情况下，Robot Framework 中低于 INFO 级别的日志消息不会写日志。这个阈值可以通过命</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>如何使用 python-gitlab 自动创建 GitLab Label</title><link>https://www.chenshaowen.com/blog/how-to-create-gitlab-label-using-python-gitlab.html</link><pubDate>Sun, 05 Aug 2018 10:00:00 +0000</pubDate><atom:modified>Sun, 05 Aug 2018 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-create-gitlab-label-using-python-gitlab.html</guid><description>利用 Gitlab issue 进行项目管理是一件对 Dev 十分友好的事。录入issue、发起 Merge Request、创建 milestone，这些都是开发过程中动态推进的。但，每个新项目都需要创建一堆 Label ，是件让人头疼的事。本文主要就是为了解决这个问题。 1. GitLab Label 在创建 GitLab Label 之前，我</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>项目管理</category><category>DevOps</category></item><item><title>Jenkins 集成 Robot Framework 自动化测试</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 05 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</guid><description>1. 安装无头浏览器 1.1 CentOS 安装 Phantomjs 下载并解压 访问 Phantomjs ，找到 Download phantomjs-2.1.1-linux-x86_64.tar.bz2 的下载链接，并拷贝。 在 CentOS 执行命令: 1 2 3 4 5 wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 # 如果没有安装 bzip2 可能会报错 yum install bzip2.x86_64 tar -jxvf phantomjs-2.1.1-linux-x86_64.tar.bz2 mv phantomjs-2.1.1-linux-x86_64 /usr/local/ 添加到环境变量 1 vim /etc/profile 在行尾新增，如下内容 1 export PATH=$PATH:/usr/local/phantomjs-2.1.1-linux-x86_64/bin 使环境变量立即生效 1 source /etc/profile 查看 Phantomjs 版本号 1 phantomjs --version 安装完之</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>自动化</category><category>持续集成</category><category>测试</category><category>DevOps</category><category>Jenkins</category></item><item><title>Robot Framework 基础</title><link>https://www.chenshaowen.com/blog/basic-of-robot-framework.html</link><pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 24 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basic-of-robot-framework.html</guid><description>主要介绍 Robot Framework 的一些基本概念，如何写一个测试用例。 1. 基础元素 1.1 关键字 - keywords Robot Framework 关键字类似函数。分为系统关键字和用户自定义关键字。 系统关键字，通过加载 Library 引入 用户关键字，通过加载 Resource 引入 1.2 库 - Library 库用来封装和复用关键字。Robot Framework 库包括系统库和用户自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>测试</category><category>使用</category><category>DevOps</category></item><item><title>常用的一些 CI 脚本</title><link>https://www.chenshaowen.com/blog/some-common-scripts-in-ci.html</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-common-scripts-in-ci.html</guid><description>由于负责小组的 CI 公共事项，经常需要配置 CI 流程，或者帮助其他人解决一些问题，整理了一下常用的 CI 脚本，以方便查阅。 1. .gitlab-ci.yml 结构 下面是， GitLab CI 的配置文件结构。 .gitlab-ci.yml 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 一些前置脚本，完成激活环境等操作 before_script: - source /data/runner/node/bin/activate - which node &amp;amp;&amp;amp; node --version - which npm</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>CI</category><category>DevOps</category><category>持续集成</category></item><item><title>GitLab CI 配置 Runner</title><link>https://www.chenshaowen.com/blog/gitlab-ci-configuring-runner.html</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 08 May 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/gitlab-ci-configuring-runner.html</guid><description>1. 下载并配置 Runner 1.1 下载 Runner GitLab-CI 的 Runner 是一个 Go 写的程序包，可以去官网下载到本地。 1 2 yum install -y wget wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64 增加执行权限 1 chmod +x /usr/local/bin/gitlab-runner 1.2 新增 runner 用户 运行 Runner 时，以 runner:runner 账户运行。 1 2 groupadd -g 1234 runner useradd runner -u 1234 -g 1234 1.3 修改 pip 源 1 2 3 4 cat /etc/pip.conf [global] index-url= http://pypi.doubanio.com/simple/ trusted-host = pypi.doubanio.com 1.4 创建工作目录 1 mkdir -p /data/gitlab-data 2 注册 Runner 在项目</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>CI</category><category>DevOps</category></item><item><title>基于 Git 的前后端开发工作流</title><link>https://www.chenshaowen.com/blog/based-on-git-development-workflow-of-front-and-back.html</link><pubDate>Sat, 31 Mar 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 31 Mar 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/based-on-git-development-workflow-of-front-and-back.html</guid><description>最近参与了一个多人协作开发的项目，在开发过程中遇到不少问题。例如，前端提交冲掉后端代码、代码冲突无法解决直接返工、A 提交 B 分支、直接提交 Master 分支等。本文是记录，也是思考如何更高质量地管理项目、进行多人合作项目的开发。 1. 版本管理的需求 1.1 版本标记</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>效率</category><category>合作</category><category>CI</category><category>DevOps</category></item><item><title>GitLab CI 之前端 Webpack 实践</title><link>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</link><pubDate>Wed, 08 Nov 2017 09:15:56 +0000</pubDate><atom:modified>Wed, 08 Nov 2017 09:15:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</guid><description>从 GitLab 8.0 开始，GitLab 开始集成 CI（持续集成） 功能。只需要在服务器上添加一个 Runner，同时在项目中添加一个 .gitlab-ci.yml 文件，就可以进行 CI。在 GitLab 搭建与配置 中笔者记录了从零开始搭建 GitLab 服务的整个流程。在 GitLab CI 持续集成 中笔者交代了 GitLab CI 的一些基本概念，并</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>持续集成</category><category>工具</category><category>DevOps</category><category>GitLab</category><category>CICD</category></item><item><title>Jenkins Pipeline 使用及调试</title><link>https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html</link><pubDate>Mon, 14 Aug 2017 13:13:55 +0000</pubDate><atom:modified>Mon, 14 Aug 2017 13:13:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html</guid><description>1. 基本概念 master master 就是 Jenkins 安装和运行的地方，它负责解析 job 脚本，处理任务，调度计算资源。 agent agent 负责处理从 master 分发的任务，操作实际上是通过 executor 来执行的。 executor executor 就是执行任务的计算资源，它可以在 master 或者 agent 上运行。多个 executor 也可以合作执行一些任务。 step Jenkins 里面 job 中的最小单元</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>持续集成</category><category>DevOps</category><category>CICD</category><category>调试</category></item><item><title>GitLab CI 持续集成</title><link>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</link><pubDate>Sun, 13 Aug 2017 08:03:17 +0000</pubDate><atom:modified>Sun, 13 Aug 2017 08:03:17 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</guid><description>1. 基本概念 GitLab-CI：GitLab 提供的持续集成系统，管理项目的构建状态，通过 GitLab Runner 来执行构建任务。 GitLab-Runner：用于执行构建任务，.gitlab-ci.yml 的 script 部分的运行就是由 GitLab-Runner 来完成。 .gitlab-ci.yml：</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>工具</category><category>持续集成</category><category>GitLab</category></item><item><title>GitLab 搭建与配置</title><link>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</link><pubDate>Sat, 12 Aug 2017 00:51:07 +0000</pubDate><atom:modified>Sat, 12 Aug 2017 00:51:07 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</guid><description>1. 简介 GitLab 是一个利用 Ruby on Rails 开发的开源应用程序，实现了自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。 它拥有与 GitHub 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Demo</category><category>工具</category><category>管理</category><category>持续集成</category><category>GitLab</category><category>DevOps</category></item><item><title>Docker 基础</title><link>https://www.chenshaowen.com/blog/basis-of-docker.html</link><pubDate>Fri, 28 Jul 2017 15:30:00 +0000</pubDate><atom:modified>Fri, 28 Jul 2017 15:30:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basis-of-docker.html</guid><description>1. 什么是Docker Docker诞生于2013年初，是dotCloud（ Docker.Inc前称）公司内部的一个业余项目，源代码托管在GitHub上，基于Go语言并遵从 Apache 2.0 开源协议。 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础</description><dc:creator>微信公众号</dc:creator><category>PaaS</category><category>DevOps</category><category>Docker</category><category>整理</category></item><item><title>Jenkins 集成 GitHub 开发</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</link><pubDate>Tue, 18 Jul 2017 21:29:41 +0000</pubDate><atom:modified>Tue, 18 Jul 2017 21:29:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</guid><description>1. 基本概念 持续集成，Continuous Integration 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 持续交付，Continuous Delivery 持续交付在持续集成的基础上，将集成后</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>开发</category><category>Jenkins</category><category>GitHub</category><category>DevOps</category></item><item><title>Django自动化测试</title><link>https://www.chenshaowen.com/blog/auto-testing-of-django.html</link><pubDate>Mon, 10 Jul 2017 21:39:27 +0000</pubDate><atom:modified>Mon, 10 Jul 2017 21:39:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/auto-testing-of-django.html</guid><description>Django中写自动化测试可以使用：doctests或unit tests。自动化测试的逻辑是，将测试数据传入待测试函数，执行后，以输出结果与预期是否一致，作为判断测试是否通过的标准。这里有几个关键点，（1）需要测试数据，（2）需要指明待测试</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>测试</category><category>Demo</category><category>DevOps</category><category>CICD</category></item><item><title>第三方登录和单点登录简介</title><link>https://www.chenshaowen.com/blog/third-party-login-and-single-sign-on.html</link><pubDate>Thu, 04 May 2017 20:41:35 +0000</pubDate><atom:modified>Thu, 04 May 2017 20:41:35 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/third-party-login-and-single-sign-on.html</guid><description>登录的会话机制: http 是无状态协议，浏览器的每次请求都是相互独立。但并不是每次 http 请求都与状态无关，为此，浏览器和服务器需要共同维护一个状态，这就是会话机制。一种方法是，浏览器第一次向服务器发起请求，服务器会将浏览器返回 sessionID，后续浏</description><dc:creator>微信公众号</dc:creator><category>安全</category><category>DevOps</category><category>博文</category></item><item><title>什么是 DevOps</title><link>https://www.chenshaowen.com/blog/what-is-devops.html</link><pubDate>Sat, 31 Dec 2016 13:01:05 +0000</pubDate><atom:modified>Sat, 31 Dec 2016 13:01:05 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-devops.html</guid><description>1. 概览 DevOps（Development和Operations的组合词）是一种重视「软件开发人员（Dev）」和「IT运维技术人员（Ops）」之间沟通合作的文化、运动。透过自动化「软件交付」和「架构变更」的流程，来使得构建、测试、发布软件能</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>开发</category><category>思考</category><category>DevOps</category><category>什么是</category></item></channel></rss>
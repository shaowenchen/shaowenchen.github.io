<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Harbor on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/harbor/</link><description>Recent content in Harbor on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/harbor/atom.xml" rel="self" type="application/rss+xml"/><item><title>基于 Harbor 和 Registry 的镜像管理分发方案</title><link>https://www.chenshaowen.com/blog/a-image-management-and-distribution-case-based-on-harbor-and-registry.html</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><atom:modified>Sat, 16 Jul 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-image-management-and-distribution-case-based-on-harbor-and-registry.html</guid><description>1. Harbor 跨区带来的挑战 如果只是简单的存放镜像数据， Registry 作为镜像仓库会是一个很好的选择。Registry 不仅支持多种存储后端，还可以配置 HTTPS 证书，访问凭证。值得一题的是，Harbor 也是使用 Registry 存储镜像数据。 如果团队需要进行角色管理，存储控制，对接 LDAP 认</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Harbor</category><category>Registry</category><category>镜像</category><category>分发</category></item><item><title>Kubernetes 集群规划之规模与节点大小</title><link>https://www.chenshaowen.com/blog/the-scale-and-node-size-of-kubernetes-cluster.html</link><pubDate>Mon, 01 Nov 2021 10:00:00 +0000</pubDate><atom:modified>Mon, 01 Nov 2021 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-scale-and-node-size-of-kubernetes-cluster.html</guid><description>从调研数据来看，大家选择小集群的比较较高。下面是从节点数、节点配置角度提供的一份对比列表。 下面是选择少量大集群，还是多个小集群的对比列表: 特征 少量大集群 多个小集群 资源利用率 高 低 管理节点开销 低 高 资源伸缩范围 大 小 资源调度范围 大 小 应用间通信效率 高</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Harbor</category><category>镜像</category><category>容器</category></item><item><title>Harbor 使用自签证书支持 Https 访问</title><link>https://www.chenshaowen.com/blog/support-https-access-harbor-using-self-signed-cert.html</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 18 Apr 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/support-https-access-harbor-using-self-signed-cert.html</guid><description>在之前的文章 使用 Helm 安装 harbor 中，我已经详细描述了安装 Ingress 、Harbor ，最后成功推送镜像的步骤。其中的域名是公网可以访问的，证书是认证机构签发的。但是在内网环境下，我们需要使用内网域名进行访问。本文主要解决使用自签证书通过 Https 访问 Harbor 的问题。 1. 生成自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Harbor</category><category>Kubernetes</category><category>Https</category><category>镜像</category></item><item><title>镜像管理工具 -- Harbor</title><link>https://www.chenshaowen.com/blog/an-enterprise-class-registry-of-harbor.html</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 12 Sep 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/an-enterprise-class-registry-of-harbor.html</guid><description>1. 搭建 Harbor 的要求 Harbor 硬件要求： CPU，最少 2 核，4 核更好 Mem，最少 4 GB，8 GB 更好 Disk，最少 40 GB，160 GB 更好 Docker 版本要求： 17.06.0 以上 在 Kubernetes 上搭建 Harbor ，可以参考文档，使用 Helm 搭建 harbor 。 2. Harbor 提供的功能 Harbor 是在 Docker Registry 的基础之上，进行了企业级扩展。Harbor</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Harbor</category><category>镜像</category><category>容器</category></item><item><title>使用 Helm 安装 harbor</title><link>https://www.chenshaowen.com/blog/install-harbor-using-helm.html</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 30 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-harbor-using-helm.html</guid><description>前提准备，（1）已经安装 Helm ，参考 Helm 安装 ，（2）集群有默认的动态存储可用，参数 使用StorageClass提供PV动态存储 1. 使用 Helm 安装 Ingress Ingress 由 Ingress 和 Ingress Controller 两部分组成。 在 Kubernetes 中，Ingress 对象描述路由规则；Ingress Controller 通过与 Apiserver 交互，将 Ingress 规则写入</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Harbor</category><category>Ingress</category><category>Helm</category><category>镜像仓库</category><category>镜像</category></item></channel></rss>
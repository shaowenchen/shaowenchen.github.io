<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>PaaS on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/paas/</link><description>Recent content in PaaS on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Fri, 17 Feb 2023 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/paas/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用事件总线改造运维体系</title><link>https://www.chenshaowen.com/blog/transform-ops-system-using-event-bus.html</link><pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Fri, 17 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/transform-ops-system-using-event-bus.html</guid><description>1. 积重难返的运维服务体系 针对明确的运维诉求，开发相应的运维服务以供运维、业务用户使用，本无可厚非。但如果仅满足于此，很容易出现下面的情况: 用户频繁地寻找各个系统的入口，在各个系统之间来回跳转，忙于寻找各种按钮、拷贝参数。 一旦这样的运维服务多</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>运维体系</category><category>PaaS</category><category>平台</category><category>事件</category></item><item><title>应用配置管理之组装模型和模板模型</title><link>https://www.chenshaowen.com/blog/using-assembly-and-template-model-to-manage-app-config.html</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 10 Nov 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-assembly-and-template-model-to-manage-app-config.html</guid><description>应用配置管理强调的是，应用运行时依赖的配置管理，不同于项目的静态配置。本文是实际开发过程中的一些总结，以供大家参考，也欢迎交流。 1. 关于配置管理 1.1 名称解释 配置项 一个 key=value 组合 配置集 一组配置项的集合，key1=value, key2=value2 配置实例 一份完整的，可供</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>配置管理</category><category>PaaS</category><category>平台</category><category>配置</category></item><item><title>珍惜你遇到的蓝鲸</title><link>https://www.chenshaowen.com/blog/blueking-is-a-platform-worth-having.html</link><pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 15 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/blueking-is-a-platform-worth-having.html</guid><description>1. 我的平台建设经历 毕业之后，我加入了腾讯蓝鲸，主要参与 SaaS 的开发。待了近三年之后，回武汉老家，加入青云，负责 DevOps 的研发。待了近两年之后，加入新的公司，参与业务支撑平台建设，思考业务侧对 Kubernetes 的落地实践。 我写过很多关于平台的文档，领域输出才是 PaaS 的核心</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>PaaS</category><category>思考</category><category>平台</category></item><item><title>在 Dell OptiPlex 7080MT 上安装 macOS 操作系统</title><link>https://www.chenshaowen.com/blog/how-to-install-macos-on-dell-optiplex-7080.html</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 26 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-install-macos-on-dell-optiplex-7080.html</guid><description>大概是十年前，我在笔记本上安装过 macOS。当时最头疼的是只有特定的硬件才能安装成功，而且还缺各种驱动程序。后来自己买了 Mac 笔记本，很长时间没有关注如何在通用机器上安装 macOS 。最近拿到了一台 Dell 台式机，配置还不错，又尝试了一下。本文主要是记录这一过</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Docker</category><category>PaaS</category></item><item><title>在 Kubernetes 中面向虚拟机节点分发文件、执行脚本</title><link>https://www.chenshaowen.com/blog/how-to-distribute-files-and-scripts-to-vm-under-kubernetes.html</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-distribute-files-and-scripts-to-vm-under-kubernetes.html</guid><description>1. 本文主要讨论什么 勿在浮沙筑高台。业务量的增长、业务形态的进化都需要坚实强劲的 IT 系统支撑。业务内容对市场是透明的，但是 IT 系统不是一朝一夕能建设完善的。未来公司之间的竞争主要也会来自于 IT 系统之间的竞争，能不能快速响应业务需求是决胜的关键。 IT 系</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Docker</category><category>PaaS</category></item><item><title>PaaS 部署之 buildpack</title><link>https://www.chenshaowen.com/blog/buildpack-for-paas-deployment.html</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 24 Jan 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/buildpack-for-paas-deployment.html</guid><description>最近在学习 Go ，而常用的内部 PaaS 平台正好也支持 Go 以及相关 Web 框架。一套 PaaS 系统支持多种语言，其中就离不开 buildpack 机制。虽然 PaaS 平台不断在升级，但是 buildpack 机制却一直保留。本文主要是一些 buildpack 资料的整理和实践。 1. PaaS 如何部署应用 无论是基于原生 Docker，还是 Kubernetes 的 PaaS 平台</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>PaaS</category><category>Buildpack</category></item><item><title>领域输出才是 PaaS 的核心竞争力</title><link>https://www.chenshaowen.com/blog/domain-knowledge-is-the-key-of-paas.html</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><atom:modified>Sat, 12 Jan 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/domain-knowledge-is-the-key-of-paas.html</guid><description>1. 我在思考什么 在大公司，有更多机会了解行业动态，参与行业变革。 大平台的运行，不是依靠某一个人或几个人。如果这样真的能实现，那也就不能称之为大的平台。一个萝卜一个坑，各自分工，相互协同，才是现代的管理方式。 平台做得好，有影响力，个人也会有加持</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>PaaS</category><category>思考</category></item><item><title>如何利用 CDN 进一步的前后端分离 - CI 脚本</title><link>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 15 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>在团队中，开发流程相关的调整一定要相应的自动化工具配合。如果没有足够低的使用成本，这种调整将会是无意义的，因为根本就不会有人去使用。上一篇，我们提到 如何利用 CDN 进一步的前后端分离 , 这一篇主要讲，如何将这个流程结合到 CI 中。后端的配置，之前的 博客</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category><category>脚本</category><category>DevOps</category></item><item><title>如何利用 CDN 进一步的前后端分离</title><link>https://www.chenshaowen.com/blog/how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 13 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>最近在优化一下项目，梳理整个链路之后，开始逐步优化，发现了很多可以改进的点。下面是对开发模式、部署方式的一些思考，希望对你有所启发。 1. 开发背景 1.1 部署方式 如上图，简单描述一下应用的架构。 采用的是经典三层架构，接入层，逻辑层，存储层。其中，接入</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category></item><item><title>无状态服务</title><link>https://www.chenshaowen.com/blog/stateless-service.html</link><pubDate>Wed, 03 Jan 2018 17:22:45 +0000</pubDate><atom:modified>Wed, 03 Jan 2018 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/stateless-service.html</guid><description>1.问题描述 背景：一个 Django 开发的 SaaS 应用，对外提供文档服务功能。其中，搜索功能通过 Django Haystack 实现。 问题：搜索功能有时可用，有时不可用。多次测试，发现可用和不可用会交替出现，出现概率各占约 50%。 补充一下搜索功能实现的细节： Django Haystack 在提供搜索功能之前，需要</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>服务</category><category>PaaS</category><category>SaaS</category></item><item><title>PaaS 平台提供的免费 APP 域名服务</title><link>https://www.chenshaowen.com/blog/free-app-domain-name-service-of-paas-platform.html</link><pubDate>Tue, 05 Sep 2017 19:00:58 +0000</pubDate><atom:modified>Tue, 05 Sep 2017 19:00:58 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/free-app-domain-name-service-of-paas-platform.html</guid><description>服务商 域名 谷歌 Google App Engine appspot.com 二级域名 新浪 Sina App Engine sinaapp.com 二级域名 百度 Baidu App Engine duapp.com 二级域名 Heroku herokuapp.com 二级域名 AWS Elastic Beanstalk elasticbeanstalk.com 二级域名 OpenShift rhcloud.com 二级域名 DaoCloud daocloud.io 二级域名 时速云 TenxCloud tenxapp.com 二级域名 灵雀云 Alauda myalauda.cn 二级域名</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>域名</category><category>服务</category><category>PaaS</category></item><item><title>Container 和 AI 是 PaaS 未来的发展方向</title><link>https://www.chenshaowen.com/blog/container-and-ai-are-the-future-directions-in-the-development-of-paas.html</link><pubDate>Sun, 03 Sep 2017 15:57:50 +0000</pubDate><atom:modified>Sun, 03 Sep 2017 15:57:50 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/container-and-ai-are-the-future-directions-in-the-development-of-paas.html</guid><description>1. 关于 PaaS 1.1 什么是 PaaS PaaS 是平台即服务（Platform as a Service）的简称，平台即服务是一种云计算服务，提供运算平台与解决方案服务。PaaS 的出现加快了 SaaS 的发展，尤其是加快了 SaaS 应用的开发速度。比如，SaaS 开发时，使用 PaaS 平台统一提供的登录</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>思考</category><category>云服务</category><category>PaaS</category><category>容器</category><category>AI</category></item><item><title>云部署之混合云</title><link>https://www.chenshaowen.com/blog/hybrid-cloud-of-cloud-deployment.html</link><pubDate>Sun, 03 Sep 2017 13:18:17 +0000</pubDate><atom:modified>Sun, 03 Sep 2017 13:18:17 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/hybrid-cloud-of-cloud-deployment.html</guid><description>1. 混合云使用的用户场景 1.1 满足业务的爆发式增长 互联网业务呈指数型增长，很难预测基础设施的储备量。一般在业务成长初期很长一段时间，小规模的物理机托管就能满足业务需求。但是，随着市场的展开，业务规模爆发式增长，原有的物理机托管机房机位有限，只能通</description><dc:creator>微信公众号</dc:creator><category>云</category><category>PaaS</category><category>云服务</category><category>整理</category><category>混合云</category></item><item><title>Docker 基础</title><link>https://www.chenshaowen.com/blog/basis-of-docker.html</link><pubDate>Fri, 28 Jul 2017 15:30:00 +0000</pubDate><atom:modified>Fri, 28 Jul 2017 15:30:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basis-of-docker.html</guid><description>1. 什么是Docker Docker诞生于2013年初，是dotCloud（ Docker.Inc前称）公司内部的一个业余项目，源代码托管在GitHub上，基于Go语言并遵从 Apache 2.0 开源协议。 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础</description><dc:creator>微信公众号</dc:creator><category>PaaS</category><category>DevOps</category><category>Docker</category><category>整理</category></item><item><title>云服务行业观察 - 2017</title><link>https://www.chenshaowen.com/blog/cloud-industry-research-report-of-2017.html</link><pubDate>Sat, 22 Jul 2017 15:00:49 +0000</pubDate><atom:modified>Sat, 22 Jul 2017 15:00:49 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/cloud-industry-research-report-of-2017.html</guid><description>1. 云服务的分类 IaaS，提供计算和存储服务。 PaaS，提供软件运行的平台环境服务。 SaaS，直接提供软件服务。 2. 云服务的应用场景 采用云服务可以显著减少 IT 支出。 在 IaaS 服务中，云主机、存储是用户采用率最高的服务产品，其次是数据库、网络加速。 IaaS 是当</description><dc:creator>微信公众号</dc:creator><category>研究报告</category><category>博文</category><category>PaaS</category><category>观点</category><category>云服务</category></item><item><title>PaaS 平台 App Engine 2.0 介绍</title><link>https://www.chenshaowen.com/blog/app-engine-2-0.html</link><pubDate>Tue, 04 Apr 2017 15:14:40 +0000</pubDate><atom:modified>Tue, 04 Apr 2017 15:14:40 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/app-engine-2-0.html</guid><description>Note: 简单说几句，组内同学的分享。App Engine 将开发从繁琐的部署、配置流程中解脱出来，提供全方位的自动化支持服务。其中的 Controller 是 App Engine 的大脑，协调控制整个引擎的运作。PPT 中主要讲的是 App Engine 的设计方案和演化过程，还对资源调度、故障容灾进行了考虑。 由于其是微</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>PaaS</category><category>架构</category></item><item><title>PaaSer与SaaSer的合作方式思考</title><link>https://www.chenshaowen.com/blog/thinking-on-the-cooperative-way-between-paas-and-saas-team.html</link><pubDate>Tue, 10 Jan 2017 22:13:42 +0000</pubDate><atom:modified>Tue, 10 Jan 2017 22:13:42 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/thinking-on-the-cooperative-way-between-paas-and-saas-team.html</guid><description>1. 工作场景 本人所在的小组，20+人的规模，兼具PaaS和SaaS开发的职责。 开发PaaS的人员PaaSer，主要负责PaaS平台的开发和维护，目标是对SaaS开发提供需要的API和文档。 开发SaaS的人员SaaSer，主要负责开发基于上述P</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>云服务</category><category>思考</category><category>PaaS</category><category>SaaS</category></item></channel></rss>
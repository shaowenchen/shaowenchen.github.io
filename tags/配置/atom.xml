<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>配置 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E9%85%8D%E7%BD%AE/</link><description>Recent content in 配置 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 13 Jan 2024 11:22:55 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E9%85%8D%E7%BD%AE/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用 Dragonfly V2 分发集群的镜像</title><link>https://www.chenshaowen.com/blog/distributing-image-with-dragonfly-v2.html</link><pubDate>Sat, 13 Jan 2024 11:22:55 +0000</pubDate><atom:modified>Sat, 13 Jan 2024 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/distributing-image-with-dragonfly-v2.html</guid><description>1. Dragonfly 简介 Dragonfly 的相关文档在社区 https://d7y.io/zh/docs/ 已经有详细说明。这里只是简单介绍一下，V2 版本的主要组件： Manager，提供 UI 界面、用户管理、集群监控、任务管理等功能 Scheduler，调度 Peer 之间的流量、提供预热等功能 Seed Peer，回源节点，用于从源站（Har</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>Dragonfly</category><category>Image</category><category>Nydus</category><category>配置</category><category>实践</category></item><item><title>Nydus 懒加载镜像配置与实践</title><link>https://www.chenshaowen.com/blog/nydus-configuration-and-practice.html</link><pubDate>Sat, 06 Jan 2024 11:22:55 +0000</pubDate><atom:modified>Sat, 06 Jan 2024 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nydus-configuration-and-practice.html</guid><description>据统计容器中的大部分文件不会被使用。根据这一特征，Nydus 自定义了 Rafs 格式的文件系统，实现了镜像文件的按需加载，以解决大镜像导致的启动慢和占用存储的问题。而在 AI 场景下，无论是推理还是训练，镜像常常都是几个 G 起步，甚至几十个 G，Nydus 非常</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>Nydus</category><category>配置</category><category>实践</category></item><item><title>Istio 中的 EnvoyFilter 配置</title><link>https://www.chenshaowen.com/blog/configurate-envoyfilter-in-istio.html</link><pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate><atom:modified>Sun, 12 Nov 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/configurate-envoyfilter-in-istio.html</guid><description>1. EnvoyFilter 是什么 EnvoyFilter 是 Istio 的 CRD 资源，它允许用户修改 Envoy 的配置，以满足用户针对不同场景的定制需求。 1 2 3 4 5 6 7 8 9 kubectl get envoyfilter -A NAMESPACE NAME AGE istio-system add-request-id-into-ingressgateway 54d istio-system compression-gzip 18d istio-system custom-access-log 3d istio-system ingressgateway-settings 52d istio-system preserve-request-header-us-test-ingress-gateway 95d istio-system preserve-x-request-id 54d 通常在使用 istio 时，或多或少都会用到一些 EnvoyFilter。 EnvoyFilter 提供的功能是基于 Envoy 已有的内</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Istio</category><category>EnvoyFilter</category><category>配置</category></item><item><title>添加 SSH Key 登录及问题排查</title><link>https://www.chenshaowen.com/blog/add-ssh-key-login-os-and-troubleshooting.html</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><atom:modified>Thu, 10 Mar 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/add-ssh-key-login-os-and-troubleshooting.html</guid><description>1. 添加 key 的步骤 1.1 客户端生成 ssh key 有两种格式的 Key: 老格式，私钥以 -----BEGIN RSA PRIVATE KEY----- 开头 1 ssh-keygen -m PEM -t rsa -b 4096 -C &amp;#34;mail@chenshaowen.com&amp;#34; 新格式，私钥以 -----BEGIN OPENSSH PRIVATE KEY----- 开头 1 ssh-keygen -t rsa -b 4096 -C &amp;#34;mail@chenshaowen.com&amp;#34; 由于某些旧的系统不支持新格式的 Key，这里建议生成老格式的 Key。如果你已经在使用新格式的 Key，可以使用 puttygen</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>SSH</category><category>运维</category><category>配置</category></item><item><title>Logstash 配置基础</title><link>https://www.chenshaowen.com/blog/the-basic-configuration-of-logstash.html</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-basic-configuration-of-logstash.html</guid><description>1. Logstash 的基本原理 Logstash 是一个用于数据传输和处理的组件。 通过插件的组合，Logstash 可以满足各种日志采集的场景： logstash-&amp;gt;elasticsearch filebeat-&amp;gt;logstash-&amp;gt;elasticsearch filebeat-&amp;gt;kafka-&amp;gt;logstash-&amp;gt;elasticsearch filebeat-&amp;gt;redis-&amp;gt;logstash-&amp;gt;elasticsearch 2. Logstash 的基本配置 下面是一个 Logstash 的配置格式： 1 2 3 4 5 6 7 8 9 10 11 12 # 数据源，例如 Kafka、MySQL input { } # 过滤器，用于处理数</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>日志</category><category>配置</category><category>实践</category></item><item><title>应用配置管理之组装模型和模板模型</title><link>https://www.chenshaowen.com/blog/using-assembly-and-template-model-to-manage-app-config.html</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 10 Nov 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-assembly-and-template-model-to-manage-app-config.html</guid><description>应用配置管理强调的是，应用运行时依赖的配置管理，不同于项目的静态配置。本文是实际开发过程中的一些总结，以供大家参考，也欢迎交流。 1. 关于配置管理 1.1 名称解释 配置项 一个 key=value 组合 配置集 一组配置项的集合，key1=value, key2=value2 配置实例 一份完整的，可供</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>配置管理</category><category>PaaS</category><category>平台</category><category>配置</category></item><item><title>Nginx 配置问题记录</title><link>https://www.chenshaowen.com/blog/nginx-configuration-problem-record.html</link><pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Wed, 18 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nginx-configuration-problem-record.html</guid><description>1. server_name 无效 现象：Nginx 反向代理了两个应用，配置详情如下。发现访问 b.chenshaowen.com 和 a.chenshaowen.com 时，返回的都是 A 服务的请求。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 server { listen 80; server_name a.chenshaowen.com; location / { proxy_pass http://A; } } server { listen 8080; server_name b.chenshaowen.com; location / { proxy_pass http://B; } } 原因：当所有 server 的规则都不匹配时，Nginx 会采用第一条</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Nginx</category><category>配置</category></item></channel></rss>
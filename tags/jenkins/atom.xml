<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Jenkins on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/jenkins/</link><description>Recent content in Jenkins on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Mon, 18 Jul 2022 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/jenkins/atom.xml" rel="self" type="application/rss+xml"/><item><title>如何劫持 docker.io 的镜像流量到私有仓库</title><link>https://www.chenshaowen.com/blog/hijack-docker-io-req-to-private-repository.html</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><atom:modified>Mon, 18 Jul 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/hijack-docker-io-req-to-private-repository.html</guid><description>1. 自签 *.docker.io 域名证书 1.1 创建 CA 证书 生成 CA 证书私钥 1 openssl genrsa -out ca.key 4096 生成 CA 证书 1 2 3 4 openssl req -x509 -new -nodes -sha512 -days 3650 \ -subj &amp;#34;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=chenshaowen.com&amp;#34; \ -key ca.key \ -out ca.crt 1.2 创建 *.docker.io 域名证书 生成私钥 1 openssl genrsa -out docker.io.key 4096 生成证书签名请求 CSR 1 2 3 4 openssl req -sha512 -new \ -subj &amp;#34;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=*.docker.io&amp;#34; \ -key docker.io.key \ -out docker.io.csr 生成 x509 v3 扩展 1 2 3 4 5 6 7 8 9 10 11 cat &amp;gt; v3.ext &amp;lt;&amp;lt;-EOF authorityKeyIdentifier=keyid,issuer basicConstraints=CA:FALSE</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category></item><item><title>Jenkins Agent 的几种通信方式</title><link>https://www.chenshaowen.com/blog/a-few-communication-methods-of-jenkins-agent.html</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 01 Nov 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-few-communication-methods-of-jenkins-agent.html</guid><description>1. SSH 连接方向: Master 主动连接 Agent 要求: Master 能通过 SSH 直连 Agent Agent 上启动了 SSHD 服务 Jenkins 安装 SSH Credentials Plugin、SSH Build Agents 插件 2. JNLP 连接方向: Agent 主动连接 Master 要求: Agent 能访问 Master Agent 需要 JVM 环境运行 Master 需要放开 50000（默认值）端口用于 Agent 通信 50000 端口是 Jenkins Master 的服务端口，不需要再运行</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>CICD</category></item><item><title>Jenkins为什么一直调度到同一个节点</title><link>https://www.chenshaowen.com/blog/why-does-jenkins-agent-like-going-to-the-same-node.html</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/why-does-jenkins-agent-like-going-to-the-same-node.html</guid><description>1. 问题背景 在 Jenkins 中添加了很多个构建节点使用同一个 Label 以供流水线使用，但是 Jenkins 却每次都倾向于在同一个节点进行构建。 这导致了并发问题，单个节点的压力过大，而其他节点空闲，负载极其不均衡。 2. 业务流水线的设计 上述问题的产生和业务流水线的设计有一定的关系。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>CICD</category><category>DevOps</category></item><item><title>如何定制自己的 Jenkins 镜像</title><link>https://www.chenshaowen.com/blog/how-to-customize-your-jenkins.html</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-customize-your-jenkins.html</guid><description>1. 如何部署 Jenkins 为了方面进行下面的测试，先介绍两种部署 Jenkins 的方式，这里使用的是 shaowenchen/jenkins:2.277.4 镜像。在生产环境中，需要替换为官方 jenkins/jenkins 镜像或自己定制的镜像。 1.1 docker-compose 运行 docker-compose.yaml 文件 version: &amp;#39;3&amp;#39; services: jenkins: image: shaowenchen/jenkins:2.277.4 container_name: jenkins restart: always network_mode: &amp;#34;bridge&amp;#34; environment: - JAVA_OPTS=&amp;#34;-Xms1Gi -Xmx4Gi&amp;#34; ports: - 8080:8080 - 50000:50000 - 2222:2222 environment: TZ: Asia/Shanghai volumes: - /Volumes/Data/jenkins_home:/var/jenkins_home 在本地创建一个目录 /Volumes/Data/jenkins_home 用于存储 Jenkins 的数据</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>CICD</category><category>Jenkins</category></item><item><title>Jenkins 在 Kubernetes 上的最佳实践</title><link>https://www.chenshaowen.com/blog/best-practices-for-jenkins-on-kubernetes.html</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/best-practices-for-jenkins-on-kubernetes.html</guid><description>1. 配置较大的 -Xms -Xmx 参数 Jenkins 是由 Java 编写的编排引擎, 在 Full GC 时会 Stop The World(STW)。在大规模构建时, STW 可能会导致 Jenkins 无法处理新的请求。 为了避免频繁的 STW, 同时增大并发量, 建议设置较大的堆, -Xms3g -Xmx6g -XX:MaxRAM=6g。具体数值可以根据监控值来设置,</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>CICD</category><category>Jenkins</category></item><item><title>Jenkins 与 Tekton 的对比</title><link>https://www.chenshaowen.com/blog/jenkins-vs-tekton.html</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 01 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-vs-tekton.html</guid><description>下面是一个 Jenkins 与 Tekton 对比的列表: 功能 Jenkins Tekton 编程语言 Java Golang 开发插件语言 Java Shell、Yaml 流水线描述语言 Groovy、Shell Yaml、Shell 插件生态 很多插件，LDAP、GitLab 不足 插件数量 1500+ 100+ 插件之间的兼容性 可能会有冲突，不能随便升级 完</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>Jenkins</category><category>Tekton</category></item><item><title>基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</title><link>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 25 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</guid><description>从原理上看，在 Kubernetes 集群中，Jenkins 都可以使用 Podman 进行镜像构建，本文主要以 Containerd 为例。 1. 去 Docker 给 CICD 带来新的挑战 在 CICD 场景下, 我们经常需要在流水线中构建和推送镜像。 在之前的文档 《在 Kubernetes 上动态创建 Jenkins Slave》 中, 我描述了通过挂载 /var/run/docker.sock 文件, 允许在 Docker 驱动的 Kubernetes</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category><category>Docker</category><category>Kubernetes</category></item><item><title>如何接入远程 macOS 物理机进行 Jenkins 流水线构建</title><link>https://www.chenshaowen.com/blog/how-to-run-the-pipeline-on-remote-osx.html</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 22 Nov 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-run-the-pipeline-on-remote-osx.html</guid><description>本文同样适用于接入 ARM、MIPS 架构，FreeBSD、Windows 系统的物理机，如果 Jenkins 能连上构建机，可以跳过 Frp 部分。 1. 遇到的问题 在以 Kubernetes 为基础设施的场景下，Jenkins 构建流水线时，将为每一条流水线单独创建一个 Pod 用于构建。Pod 中的容器</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>macOS</category><category>CICD</category><category>CI</category><category>DevOps</category></item><item><title>白板分享 - Jenkins on Kubernetes</title><link>https://www.chenshaowen.com/blog/whiteboard-jenkins-on-kubernetes.html</link><pubDate>Mon, 19 Oct 2020 00:08:00 +0000</pubDate><atom:modified>Mon, 19 Oct 2020 00:08:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/whiteboard-jenkins-on-kubernetes.html</guid><description/><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>白板分享</category></item><item><title>KubeSphere DevOps 3.0 流水线运维指南</title><link>https://www.chenshaowen.com/blog/the-operation-guide-of-kubesphere-devops-3-0-pipeline.html</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 14 Oct 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-operation-guide-of-kubesphere-devops-3-0-pipeline.html</guid><description>本篇主要介绍如何运维 DevOps 流水线，怎么解决一些常见的问题。问题主要分为两大类，一类是 Kubernetes 相关的，具有一定通用性；另一类是与业务相关，需要对领域有所了解，解决问题时才能事半功倍。文档内容，会不断滚动更新。 1. Kubernetes 问题排查 1.1 基本的创建流程 如上图所示，是用</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>KubeSphere</category><category>DevOps</category><category>Jenkins</category><category>运维</category></item><item><title>KubeSphere DevOps 3.0 流水线开发指南</title><link>https://www.chenshaowen.com/blog/the-development-guide-of-kubesphere-devops-3-0-pipeline.html</link><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 13 Oct 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-development-guide-of-kubesphere-devops-3-0-pipeline.html</guid><description>KubeSphere DevOps 包含 S2I 和 Pipeline 两部分。在社区中，openshift 提供了一个打包应用的工具 S2I，具体请参考 使用 S2I 构建云原生应用 。KubeSphere 将其做成了服务，采用 CRD 使用一个单独的 Operator 对其进行管理，功能比较独立。而在 3.0 中 Pipeline 与 KubeShere Core 耦合依然十分紧密，在搭建</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>KubeSphere</category><category>DevOps</category><category>Jenkins</category><category>开发环境</category></item><item><title>Jenkins X 不是 Jenkins ，而是一个技术栈</title><link>https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 16 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html</guid><description>1. Jenkins X 简介 Jenkins 依靠庞大的插件生态，占据了目前大部分的企业级 CICD 引擎的份额。但在云原生时代，Jenkins 也暴露出很多的问题，单点服务、磁盘存储、内存占用等。 Jenkins X 围绕 Kubernetes，提供了一种更适合云原生时代的 DevOps 方式。Jenkins X 不是 Jenkins</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>技术栈</category><category>Jenkins</category><category>Jenkins-X</category><category>DevOps</category><category>CICD</category><category>Terraform</category></item><item><title>Kubernetes 动态创建 Jenkins Agent 压力测试</title><link>https://www.chenshaowen.com/blog/the-stress-test-about-kubernetes-dynamically-creates-jenkins-agent.html</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 02 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-stress-test-about-kubernetes-dynamically-creates-jenkins-agent.html</guid><description>前面的文档中，我们利用 Kubernetes 提供的弹性，在 Kubernetes 上动态创建 Jenkins Slave 。本篇文档主要是对 Jenkins 进行大规模构建的压力测试。 1. 集群配置 1.1 Kubernetes 版本 这里使用的是 v1.16.7 1 2 3 4 kubectl version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.7&amp;#34;, GitCommit:&amp;#34;be3d344ed06bff7a4fc60656200a93c74f31f9a4&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-02-11T19:34:02Z&amp;#34;, GoVersion:&amp;#34;go1.13.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;16&amp;#34;, GitVersion:&amp;#34;v1.16.7&amp;#34;, GitCommit:&amp;#34;be3d344ed06bff7a4fc60656200a93c74f31f9a4&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-02-11T19:24:46Z&amp;#34;, GoVersion:&amp;#34;go1.13.6&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} 1.2 节点数量 集群节点总数， 16 个 1 2 3 kubectl get node |grep &amp;#34;Ready&amp;#34; | wc -l 16</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>DevOps</category><category>测试</category></item><item><title>Jenkins 中 Lightweight 拉取代码问题分析</title><link>https://www.chenshaowen.com/blog/the-question-of-lightweight-checkout-in-jenkins.html</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 22 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-question-of-lightweight-checkout-in-jenkins.html</guid><description>1. 遇到了什么问题 Jenkins 执行日志报错： 1 2 3 4 5 6 Started by user admin Lightweight checkout support not available, falling back to full checkout. Checking out git https://github.com/shaowenchen/pipeline-test.git into /var/jenkins_home/workspace/abc@script to read Jenkinsfile ... ... Unable to access &amp;#39;.git/index.lock&amp;#39;: File exists. 原因分析： 简单介绍一下 Jenkins 的部署情况，Jenkins 使用 Helm Chart 部署在 Kubernetes，使用 Kubernetes 动态 Pod 进行构建。Jenkins 的 /var/jenkins_home 挂载到 PV</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Git</category><category>DevOps</category><category>问题</category></item><item><title>Jenkins 中的构建产物与缓存</title><link>https://www.chenshaowen.com/blog/artifacts-and-cache-in-jenkins.html</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 21 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/artifacts-and-cache-in-jenkins.html</guid><description>在 CICD 的流程中，需要保存的产物主要有两类，构建产物和缓存。构建产物是最终的执行结果，缓存是为了优化下一次的构建速度。本篇主要描述的是在 Jenkins 中如何对构建产物和缓存进行归档，并结合对象存储进行实践。有部分示例使用的是 在 Kubernetes 上动态创建 Jenkins Slave 进行构建，配置</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>S3</category><category>DevOps</category><category>Cache</category></item><item><title>Jenkins 插件开发</title><link>https://www.chenshaowen.com/blog/how-to-develop-the-plugin-of-jenkins.html</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 20 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-develop-the-plugin-of-jenkins.html</guid><description>使用 Jenkins 总是离不开各种各样的插件，为了更好的实践 DevOps ，我们也应该具备开发插件的能力，使整个流程都能够在 Jenkins 中汇合。 1. Jenkins 插件 1.1 插件的生态 Jenkins 前身 Hudson 始于 2004 ，历经 16 年，依然作为主流的 CI/CD 引擎。除了，Jenkins 提供了 Master-Agent 分布式构建、Pipeline 编排的功</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category></item><item><title>Kubernetes Windows 节点动态提供 Jenkins Agent</title><link>https://www.chenshaowen.com/blog/windows-node-to-dynamicly-provide-jenkins-agent-on-k8s.html</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 14 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/windows-node-to-dynamicly-provide-jenkins-agent-on-k8s.html</guid><description>在前面两篇文档，在 Kubernetes 上动态创建 Jenkins Slave 和 Kubernetes 添加 Windows 节点提供 Jenkins 构建动态 Agent 的基础之上，本篇文档主要尝试在 Kubernetes 上动态提供 Windows 构建 Agent 。 1. 新增流水线 Kubernetes 与 Jenkins 集成部分可以参考上面的两篇文档，这里直接新建两条流水线进行测试。 windows - jenkins 内置的流水线示例 1 2 3 4 5 6 7 8 9 10</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>Windows</category><category>DevOps</category></item><item><title>Jenkins 中 Git 操作 not a tree 分析</title><link>https://www.chenshaowen.com/blog/git-reference-not-a-tree-in-jenkins.html</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 17 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/git-reference-not-a-tree-in-jenkins.html</guid><description>1. 问题描述 配置 Webhook 自动触发执行 Jenkins 流水线时，报错： 1 2 3 hudson.plugins.git.GitException: Command &amp;#34;git checkout -f 23b446ea&amp;#34; returned status code 128: stdout: stderr: fatal: reference is not a tree: 23b446ea 2. Git 如何管理版本 Git 是一个内容寻址文件系统。Git 维护着一棵 sha tree ，通过 sha 值可以回溯到任何一个历史节点。先看看提交记录： 执行命令： 1 2 3 4 5 6 7 8 9 10 11 12</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>问题</category><category>Jenkins</category><category>DevOps</category><category>Git</category></item><item><title>基于 Kubernetes 和 Jenkins 搭建自动化测试系统</title><link>https://www.chenshaowen.com/blog/build-an-automated-test-system-using-kubernetes-and-jenkins.html</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 12 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-an-automated-test-system-using-kubernetes-and-jenkins.html</guid><description>1. 测试分层 测试的目的是为了验证预期的功能，发现潜在的缺陷。测试增强了交付合格产品的信心，也给敏捷迭代带来了可能。可以说，测试决定了产品的开发进度。 网络模型有七层的 OSI 、四层的 TCP，而开发模式有 MTV、MVC、MVP、MVVM 等。高内聚、低耦</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>自动化</category><category>Kubernetes</category><category>Jenkins</category><category>DevOps</category></item><item><title>在 Kubernetes 上动态创建 Jenkins Slave</title><link>https://www.chenshaowen.com/blog/creating-jenkins-slave-dynamically-on-kubernetes.html</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 06 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/creating-jenkins-slave-dynamically-on-kubernetes.html</guid><description>1. Jenkins 的工作模式 Jenkins 是一个单 Master，多 Slave 架构。Master 负责分配任务、管理服务。 Slave 负责执行具体任务。 即使部署了多个 Master，这些 Master 之间依然相互独立，无法协同调度。在高可用的 Jenkins 方案中，需要借助外部的任务分发框架，协调多 Master 之间的调度，比</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category></item><item><title>使用 Jenkins 进行服务拨测</title><link>https://www.chenshaowen.com/blog/how-to-dial-up-testing-using-jenkins.html</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 04 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-dial-up-testing-using-jenkins.html</guid><description>1. 为什么要拨测 对于系统中的一些关键服务，我们通常会配置监控服务。当故障发生时，能够尽快被检测到，发送通知给关注人。当故障发生后，能够有效地追溯故障过程。 拨测是监控系统中的一个重要环节，能够检测服务的网络质量，并提供实时告警。 在公有云上，云厂</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>拨测</category><category>邮件</category><category>Poste</category><category>DevOps</category></item><item><title>如何使用 Jenkins、Docker、GitLab 搭建 Django 自动化部署流程</title><link>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 25 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</guid><description>大公司的程序员，容易产生的错觉之一就是，误将平台能力当作自己的能力。在大团队，我们不应仅关注自己的一亩三分地，更需要了解平台的各个环节。一方面，有助于更好地利用平台相关特性，另一方面，也为了自我技术更好地成长。本文，介绍了如何使用 Jekin</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>GitLab</category><category>Jenkins</category><category>Docker</category><category>DevOps</category></item><item><title>Jenkins 集成 Robot Framework 自动化测试</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 05 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</guid><description>1. 安装无头浏览器 1.1 CentOS 安装 Phantomjs 下载并解压 访问 Phantomjs ，找到 Download phantomjs-2.1.1-linux-x86_64.tar.bz2 的下载链接，并拷贝。 在 CentOS 执行命令: 1 2 3 4 5 wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 # 如果没有安装 bzip2 可能会报错 yum install bzip2.x86_64 tar -jxvf phantomjs-2.1.1-linux-x86_64.tar.bz2 mv phantomjs-2.1.1-linux-x86_64 /usr/local/ 添加到环境变量 1 vim /etc/profile 在行尾新增，如下内容 1 export PATH=$PATH:/usr/local/phantomjs-2.1.1-linux-x86_64/bin 使环境变量立即生效 1 source /etc/profile 查看 Phantomjs 版本号 1 phantomjs --version 安装完之</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>自动化</category><category>持续集成</category><category>测试</category><category>DevOps</category><category>Jenkins</category></item><item><title>Jenkins 集成 GitHub 开发</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</link><pubDate>Tue, 18 Jul 2017 21:29:41 +0000</pubDate><atom:modified>Tue, 18 Jul 2017 21:29:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</guid><description>1. 基本概念 持续集成，Continuous Integration 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 持续交付，Continuous Delivery 持续交付在持续集成的基础上，将集成后</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>开发</category><category>Jenkins</category><category>GitHub</category><category>DevOps</category></item></channel></rss>
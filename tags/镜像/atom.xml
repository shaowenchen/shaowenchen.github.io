<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>镜像 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E9%95%9C%E5%83%8F/</link><description>Recent content in 镜像 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Fri, 17 Jan 2025 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E9%95%9C%E5%83%8F/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用 Nerdctl 构建多架构镜像</title><link>https://www.chenshaowen.com/blog/use-nerdctl-to-build-multi-architecture-images.html</link><pubDate>Fri, 17 Jan 2025 00:00:00 +0000</pubDate><atom:modified>Fri, 17 Jan 2025 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/use-nerdctl-to-build-multi-architecture-images.html</guid><description>1. Nerdctl 安装 安装 Opscli 1 curl -sfL https://raw.githubusercontent.com/shaowenchen/ops/main/getcli.sh |VERSION=latest sh - 安装 Nerdctl 1 opscli task -f install-nerdctl --arch amd64 2. BuildKit 下载 Buildkit 1 wget https://github.com/moby/buildkit/releases/download/v0.19.0-rc2/buildkit-v0.19.0-rc2.linux-amd64.tar.gz 安装 Buildkit 1 2 tar xvf buildkit-*.tar.gz mv bin/* /usr/local/bin/ 配置 Buildkitd 1 mkdir -p /etc/buildkit /data/buildkit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat &amp;gt; /etc/buildkit/buildkitd.toml &amp;lt;&amp;lt;EOF debug = true root = &amp;#34;/data/buildkit&amp;#34; [worker.oci] enabled = false [worker.containerd] address = &amp;#34;/run/containerd/containerd.sock&amp;#34; enabled = true platforms = [ &amp;#34;linux/amd64&amp;#34;, &amp;#34;linux/arm64&amp;#34; ] namespace = &amp;#34;buildkit&amp;#34; gc = true gckeepstorage = 9000 cniPoolSize = 16 EOF 生成 Systemd Unit 文件 1 2 3 4 5 6 7 8</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>多架构</category><category>镜像</category><category>CI</category><category>Nerdctl</category></item><item><title>常用 AI 基础镜像及启动命令</title><link>https://www.chenshaowen.com/blog/common-ai-base-images-and-run-command.html</link><pubDate>Thu, 28 Mar 2024 00:01:00 +0000</pubDate><atom:modified>Thu, 28 Mar 2024 00:01:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-ai-base-images-and-run-command.html</guid><description>1. 镜像 Tag 标识的含义 base/cuda: 包括 CUDA 运行时 runtime: 在 base 的基础上，新增了 CUDA math 库和 NCCL、cuDNN 运行时 devel: 在 runtime 的基础上，新增了头文件和用于构建 CUDA 镜像的开发工具，对于多阶段构建特别有用 cuddn: 在上面基础上，新增了 cuDNN 神经网络加速库 py3: Python 3 环境 2. CUDA 镜像 镜像 AMD64 镜像大小 ARM64 镜</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>镜像</category><category>容器</category></item><item><title>使用 Apline 镜像常见问题</title><link>https://www.chenshaowen.com/blog/common-problems-using-apline.html</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Aug 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-problems-using-apline.html</guid><description>1. DNS 请求超时 原因: alpine 使用的是 musl 库，在 DNS 解析上会有一些限制[1] 解决方式： 不使用 apline 镜像，并在容器 resolv.conf 文件中增加 options single-request-reopen 配置。因为 single-request-reopen 配置项只对 glibc 库生效，但是 apline 镜像使用的是 musl 库 2. Docker 下无法解析 hosts 原因: alpine 没有 /etc/nsswitch.conf，导致依赖 hosts</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>镜像</category><category>问题</category></item><item><title>排查构建镜像时 IO 慢问题</title><link>https://www.chenshaowen.com/blog/troubleshoot-slow-io-when-building-dockerfile.html</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/troubleshoot-slow-io-when-building-dockerfile.html</guid><description>1. 遇到的问题 项目介绍: 文件大小 5.6 GB 文件数量 529352 Dockerfile 1 2 3 FROM golang:1.13 COPY ./ /go/src/code 构建命令及输入如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 time DOCKER_BUILDKIT=1 docker build --no-cache -t test:v3 -f Dockerfile . --progress=plain #1 [internal] load build definition from Dockerfile #1 sha256:2a154d4ad813d1ef3355d055345ad0e7c5e14923755cea703d980ecc1c576ce7 #1 transferring dockerfile: 37B done #1 DONE 0.1s #2 [internal] load .dockerignore #2 sha256:9598c0ddacf682f2cac2be6caedf6786888ec68f009c197523f8b1c2b5257b34 #2 transferring context: 2B</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category><category>CICD</category><category>构建</category></item><item><title>拉取大镜像报错</title><link>https://www.chenshaowen.com/blog/pull-a-large-image-and-get-an-error.html</link><pubDate>Sat, 10 Sep 2022 02:00:00 +0000</pubDate><atom:modified>Sat, 10 Sep 2022 02:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/pull-a-large-image-and-get-an-error.html</guid><description>1，接上一回，共享存储优化海外镜像的拉取 在基于 Harbor 和 Registry 的镜像管理分发方案的基础上，最近又做了一个优化。 之前的方案是，在每个区域，使用一台低配大磁盘的机器，部署一个 Mirror Cache 缓存镜像。这样带来一个问题，就是每个区域都需要拉取一个镜像，如果有 N 个区域，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>镜像仓库</category><category>镜像</category></item><item><title>基于 Harbor 和 Registry 的镜像管理分发方案</title><link>https://www.chenshaowen.com/blog/a-image-management-and-distribution-case-based-on-harbor-and-registry.html</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><atom:modified>Sat, 16 Jul 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-image-management-and-distribution-case-based-on-harbor-and-registry.html</guid><description>1. Harbor 跨区带来的挑战 如果只是简单的存放镜像数据， Registry 作为镜像仓库会是一个很好的选择。Registry 不仅支持多种存储后端，还可以配置 HTTPS 证书，访问凭证。值得一题的是，Harbor 也是使用 Registry 存储镜像数据。 如果团队需要进行角色管理，存储控制，对接 LDAP 认</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Harbor</category><category>Registry</category><category>镜像</category><category>分发</category></item><item><title>面向全球的镜像分发网络</title><link>https://www.chenshaowen.com/blog/a-global-images-distribution-network.html</link><pubDate>Sun, 27 Mar 2022 14:00:00 +0000</pubDate><atom:modified>Sun, 27 Mar 2022 14:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-global-images-distribution-network.html</guid><description>1. 全球的网络规划 很多面向全球的多区域基础设施，在设计之初并没有在网络规划上花费太多心思。当业务复杂到一定程度时，又被逼着进行网络调整和优化。而任何网络上的大调整，都将对业务产生巨大影响。最终会陷入进退两难之地，只能投入更多人力，背上历史包袱</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>镜像</category><category>Habor</category><category>网络</category><category>Kubernetes</category></item><item><title>拉取 Dockerhub 镜像，无法连接 Cloudflare</title><link>https://www.chenshaowen.com/blog/cant-connect-cloudflare-while-pulling-docker-image.html</link><pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 12 Nov 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/cant-connect-cloudflare-while-pulling-docker-image.html</guid><description>1. 错误提示 在拉取镜像时，偶尔会碰到如下错误: 1 2 3 4 5 6 7 8 docker pull node:10.16-alpine 10.16-alpine: Pulling from library/node e7c96db7181b: Already exists 50958466d97a: Pulling fs layer 56174ae7ed1d: Pulling fs layer 284842a36c0d: Pulling fs layer error pulling image configuration: Get https://production.cloudflare.docker.com/registry-v2 /docker/registry/v2/blobs/sha256/b9/b95baba1cfdbfa8b789137179d8e fff08b9768f1906725a8758cf0c431b59621/data? verify=1636603895-lbb1QIruPZBdfgfhBZ95ArGK0wU%3D: dial tcp 104.18.124.25:443: i/o timeout 2. 主要解决办法 2.1 修改 DNS 地址 如果是 CentOS ，直接修改 /etc/resolv.conf 文件，新增一行 nameserver 8.8.8.8 即可。 如果是 Ubuntu ，需要修改 /etc/syste</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>Kubernetes 集群规划之规模与节点大小</title><link>https://www.chenshaowen.com/blog/the-scale-and-node-size-of-kubernetes-cluster.html</link><pubDate>Mon, 01 Nov 2021 10:00:00 +0000</pubDate><atom:modified>Mon, 01 Nov 2021 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-scale-and-node-size-of-kubernetes-cluster.html</guid><description>从调研数据来看，大家选择小集群的比较较高。下面是从节点数、节点配置角度提供的一份对比列表。 下面是选择少量大集群，还是多个小集群的对比列表: 特征 少量大集群 多个小集群 资源利用率 高 低 管理节点开销 低 高 资源伸缩范围 大 小 资源调度范围 大 小 应用间通信效率 高</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Harbor</category><category>镜像</category><category>容器</category></item><item><title>Docker 20.10.6 拉取某些镜像报错 unlinkat</title><link>https://www.chenshaowen.com/blog/pull-images-unlinkat.html</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 29 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/pull-images-unlinkat.html</guid><description>使用的是 CentOS 7，内核版本 3.10.0-327 。 1. 查看当前 Docker 的版本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 docker version Client: Docker Engine - Community Version: 20.10.6 API version: 1.41 Go version: go1.13.15 Git commit: 370c289 Built: Fri Apr 9 22:46:01 2021 OS/Arch: linux/amd64 Context: default Experimental: true Server: Docker Engine - Community Engine: Version: 20.10.6 API version: 1.41 (minimum version 1.12) Go version: go1.13.15 Git commit: 8728dd2 Built: Fri Apr 9 22:44:13 2021 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.4.4 GitCommit: 05f951a3781f4f2c1911b05e61c160e9c30eaa8e runc: Version: 1.0.0-rc93</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>如何搭建一个私有的镜像仓库 mirror</title><link>https://www.chenshaowen.com/blog/how-to-run-a-private-registry-mirror.html</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 29 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-run-a-private-registry-mirror.html</guid><description>Docker 的 Mirror 仅能加速 docker.io 的镜像，而不能加速私有仓库的镜像。 1. 为什么需要一个私有的镜像仓库 mirror 公网限速 dockerhub 拉取限制频率 减少拉取镜像时间 2. 创建一个 Registry 镜像加速服务 生成一个配置文件 version: 0.1 log: fields: service: registry storage: cache: blobdescriptor: inmemory filesystem: rootdirectory: /var/lib/registry http: addr: :5000 headers: X-Content-Type-Options: [nosniff] health: storagedriver: enabled: true interval: 10s threshold: 3 但这样启动的服务只能作为 Registry</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>容器</category><category>镜像</category></item><item><title>老树开新花 - Cloud Native Buildpacks</title><link>https://www.chenshaowen.com/blog/a-sample-intro-to-cloud-native-buildpacks.html</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 05 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-sample-intro-to-cloud-native-buildpacks.html</guid><description>1. Buildpack 老树开新花 Buildpacks 项目最早是由 Heroku 在 2011 年发起, 被以 Cloud Foundry 为代表的 PaaS 平台广泛采用。在之前的文档 《PaaS 部署之 buildpack》 中, 我演示了如何将一个 Django 应用部署到 Heroku 上。 Buildpacks 不足的是产出包是 Droplet 格式, 不能直接适配容器平台。 在 2018 年 1 月, Pivotal 和 Heroku 发起了一个项</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>Buildpack</category><category>容器</category><category>镜像</category></item><item><title>Daemon-less 镜像构建工具 - Kaniko</title><link>https://www.chenshaowen.com/blog/the-daemon-less-tools-of-kaniko.html</link><pubDate>Fri, 11 Dec 2020 08:00:00 +0000</pubDate><atom:modified>Fri, 11 Dec 2020 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-daemon-less-tools-of-kaniko.html</guid><description>1. daemon-less 镜像构建工具 1.1 什么是 daemon-less 镜像构建工具 在 CICD 流程中，经常会涉及镜像构建，常规的做法是使用 Docker in Docker 或者 Docker out of Docker 进行构建。详情可以参考文档：如何在 Docker 中使用 Docker 实际上，为了避免垄断，促进行业发展，基于 Docker 的镜像格式，早就指定了统一的 OCI 镜像格式规范。也就是</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>镜像</category><category>CICD</category><category>Kubernetes</category></item><item><title>如何绕过 DockerHub 拉取镜像限制</title><link>https://www.chenshaowen.com/blog/how-to-cross-the-limit-of-dockerhub.html</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 09 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-cross-the-limit-of-dockerhub.html</guid><description>1. DockerHub 限制 终究还是绕不过下面这个报错: 1 Error response from daemon: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit DockerHub 从 2020 年 11 月 2 日，正式开始限制非付费用户的拉取频率: 匿名用户，每 6 小时只允许 pull 100 次 已登录用户，每 6 小时只允许 pull 200 次 好吧，正常情况下，到这里就友尽了，不让用就不</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category><category>DockerHub</category></item><item><title>使用镜像部署 Hexo 静态页面</title><link>https://www.chenshaowen.com/blog/deploy-static-server-by-docker-image.html</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 16 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/deploy-static-server-by-docker-image.html</guid><description>1. 为什么采用镜像独立部署 更好的 SEO 使用 Github Pages ，部署静态网站非常方便。一次配置，每次提交都可以自动部署更新。再加上 jsDelivr、Cloudflare 加速，在免费方案中，已经生产可用。 无奈的是，百度搜索引擎对 Github Pages 网站，收录极慢，甚至不收录。即使</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Hexo</category><category>镜像</category><category>服务</category><category>静态</category></item><item><title>终于等到你 - GitHub 镜像仓库服务(ghcr.io)</title><link>https://www.chenshaowen.com/blog/github-container-registry.html</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/github-container-registry.html</guid><description>1. Github Container Registry 9 月 1 日，GitHub 宣布 Github Container Registry 开始公测，测试期间提供免费、无限容量的 Docker 镜像仓库服务。 再也不用担心，docker.io 一言不合清理镜像了。真好真香！ GitHub 正在以托管代码仓库为切入点，逐步覆盖整个研发工具链，打造一站式 DevOps 平台。项目管理有 Issues</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>镜像</category><category>服务</category></item><item><title>多架构下的 Docker 镜像</title><link>https://www.chenshaowen.com/blog/docker-image-under-multi-arch.html</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 05 Jul 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/docker-image-under-multi-arch.html</guid><description>1. 开启 Docker 的 experimental 特性 这里先开启 Docker 的 experimental 特性，方便下文使用相关命令。 编辑文件 vim ~/.docker/config.json ，增加如下内容： 1 2 3 4 { &amp;#34;experimental&amp;#34;: &amp;#34;enabled&amp;#34;, &amp;#34;debug&amp;#34;: true } 注意，这里不是 /etc/docker/daemon.json 文件，也不需要重启 Docker 。 2. Docker 镜像 从 Docker 1.10 、 Registry 2.3 开始，Docker 引入了 manifest 用于描述镜像的元数据。 2.1 Dockerfile 如何转换成镜像 如上图，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>Harbor 使用自签证书支持 Https 访问</title><link>https://www.chenshaowen.com/blog/support-https-access-harbor-using-self-signed-cert.html</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 18 Apr 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/support-https-access-harbor-using-self-signed-cert.html</guid><description>在之前的文章 使用 Helm 安装 harbor 中，我已经详细描述了安装 Ingress 、Harbor ，最后成功推送镜像的步骤。其中的域名是公网可以访问的，证书是认证机构签发的。但是在内网环境下，我们需要使用内网域名进行访问。本文主要解决使用自签证书通过 Https 访问 Harbor 的问题。 1. 生成自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Harbor</category><category>Kubernetes</category><category>Https</category><category>镜像</category></item><item><title>开发 Tips（18）</title><link>https://www.chenshaowen.com/blog/developing-tips-18.html</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 22 Dec 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-18.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Azure 镜像代理 在国内的服务器上，拉取某些镜像速度较慢，或根本就无法拉取。Azure 提供了容器仓库的镜像代理服务。 无法拉取的镜像源 替换之后的镜像源 k8s.gcr.io gcr.azk8s.cn/google_containers docker.io dockerhub.azk8s.cn gcr.io gcr.azk8s.cn quay.io quay.azk8s.cn 2. watch 命令 watch 命令可以周期性地执行指定的命令</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>镜像</category><category>字体</category><category>VSCode</category></item><item><title>镜像管理工具 -- Harbor</title><link>https://www.chenshaowen.com/blog/an-enterprise-class-registry-of-harbor.html</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 12 Sep 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/an-enterprise-class-registry-of-harbor.html</guid><description>1. 搭建 Harbor 的要求 Harbor 硬件要求： CPU，最少 2 核，4 核更好 Mem，最少 4 GB，8 GB 更好 Disk，最少 40 GB，160 GB 更好 Docker 版本要求： 17.06.0 以上 在 Kubernetes 上搭建 Harbor ，可以参考文档，使用 Helm 搭建 harbor 。 2. Harbor 提供的功能 Harbor 是在 Docker Registry 的基础之上，进行了企业级扩展。Harbor</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Harbor</category><category>镜像</category><category>容器</category></item><item><title>Docker 如何拉取镜像</title><link>https://www.chenshaowen.com/blog/how-docker-pull-images.html</link><pubDate>Fri, 06 Sep 2019 08:00:00 +0000</pubDate><atom:modified>Fri, 06 Sep 2019 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-docker-pull-images.html</guid><description>1. docker pull 拉取镜像 使用 docker pull {IMAGE_NAME} 拉取镜像时，有两种情况: IMAGE_NAME 前缀指向 registry Docker 会将 IMAGE_NAME 识别为指定仓库提供的镜像。例如，myregistry.io/space1/image1:latest ，Docker 会去 myregistry.io 指向的服务器请求镜像数据。一个 Docker 镜像分为很多层，如果</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>使用 Helm 安装 harbor</title><link>https://www.chenshaowen.com/blog/install-harbor-using-helm.html</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 30 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-harbor-using-helm.html</guid><description>前提准备，（1）已经安装 Helm ，参考 Helm 安装 ，（2）集群有默认的动态存储可用，参数 使用StorageClass提供PV动态存储 1. 使用 Helm 安装 Ingress Ingress 由 Ingress 和 Ingress Controller 两部分组成。 在 Kubernetes 中，Ingress 对象描述路由规则；Ingress Controller 通过与 Apiserver 交互，将 Ingress 规则写入</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Harbor</category><category>Ingress</category><category>Helm</category><category>镜像仓库</category><category>镜像</category></item></channel></rss>
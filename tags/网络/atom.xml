<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>网络 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E7%BD%91%E7%BB%9C/</link><description>Recent content in 网络 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E7%BD%91%E7%BB%9C/atom.xml" rel="self" type="application/rss+xml"/><item><title>常见的几种网络拓扑结构</title><link>https://www.chenshaowen.com/blog/common-network-topology.html</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><atom:modified>Wed, 06 Nov 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-network-topology.html</guid><description>1. Fat-Tree 1985 年 麻省理工学院的 Charles E. Leiserson 发明了 Fat-Tree 胖树网络。如下图，胖树网络是一颗二叉树，从更节点到叶子节点带宽逐步增加。 2008 年 8 月，加州大学圣地亚哥分校的一组计算机科学家发表了一个可扩展的网络架构设计，该设计采用受胖树拓扑启发的拓扑结构，实现了比以前的分</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>网络</category><category>拓扑结构</category></item><item><title>从 CPU 到网络记录一次排查应用慢的过程</title><link>https://www.chenshaowen.com/blog/record-a-troubleshooting-process-for-application-slowness.html</link><pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate><atom:modified>Wed, 08 Nov 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/record-a-troubleshooting-process-for-application-slowness.html</guid><description>1. 现象 业务反馈应用 app-a 的接口慢，查看日志发现是某一个 Pod 慢，删除该 Pod 让其更换节点就好。 从监控指标可以看到，Pod 的 CPU 使用率确实有剧增。 但该 Pod 没有达到 Limit 的限制，没有被限流 CPU。 接着看节点的 CPU 监控，发现节点的 CPU 使用率也有剧增。 并且增加的部分是 System C</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CPU</category><category>网络</category><category>应用</category><category>排查</category><category>故障</category></item><item><title>源码分析 Kubernetes 对 Pod IP 的管理</title><link>https://www.chenshaowen.com/blog/source-analysis-kubernetes-management-of-pod-ip.html</link><pubDate>Thu, 02 Nov 2023 19:45:31 +0000</pubDate><atom:modified>Thu, 02 Nov 2023 19:45:31 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/source-analysis-kubernetes-management-of-pod-ip.html</guid><description>1. kube-controller-manager 对网段的管理 在 kube-controller-manager 有众多控制器，与 Pod IP 相关的是 NodeIpamController。 NodeIpamController 控制器主要是管理节点的 podcidr，当有新节点加入集群时，分配一个子网段给节点；当节点删除时，回收子网段。 每个节点的子网段不会重叠，每个节点都能够独立</description><dc:creator>微信公众号</dc:creator><category>源码分析</category><category>Kubernetes</category><category>Pod</category><category>IP</category><category>网络</category><category>博文</category></item><item><title>Kubernetes 网络流量转发详解</title><link>https://www.chenshaowen.com/blog/kubernetes-network-packets.html</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><atom:modified>Sat, 17 Sep 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/kubernetes-network-packets.html</guid><description>本文翻译自 https://learnk8s.io/kubernetes-network-packets，并没有逐字翻译，带入了些自己的理解。 阅读本文，你可以了解在 Kubernetes 内外，数据包是如何转发的，从原始的 Web 请求开始，到托管应用程序的容器。 Kubernetes 网络要</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>Kubernetes</category><category>网络</category></item><item><title>使用 Kindling 观测 Kubernetes 的网络连接</title><link>https://www.chenshaowen.com/blog/insight-kubernetes-network-by-kindling.html</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><atom:modified>Sat, 10 Sep 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/insight-kubernetes-network-by-kindling.html</guid><description>最近有一个需求，收集 Kubernetes 的外网访问情况。因此对相关项目进行了调用和试用，本篇主要是介绍如何安装 Kindling，配置 Grafana 查看 Kubernetes 网络连接数据。 1. 什么是 Kindling Kindling 解决的是，在不入侵应用的前提下，如何观测网络的问题，其功能主要是通过暴露内核事件来实现观测。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Kindling</category><category>网络</category></item><item><title>面向全球的镜像分发网络</title><link>https://www.chenshaowen.com/blog/a-global-images-distribution-network.html</link><pubDate>Sun, 27 Mar 2022 14:00:00 +0000</pubDate><atom:modified>Sun, 27 Mar 2022 14:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-global-images-distribution-network.html</guid><description>1. 全球的网络规划 很多面向全球的多区域基础设施，在设计之初并没有在网络规划上花费太多心思。当业务复杂到一定程度时，又被逼着进行网络调整和优化。而任何网络上的大调整，都将对业务产生巨大影响。最终会陷入进退两难之地，只能投入更多人力，背上历史包袱</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>镜像</category><category>Habor</category><category>网络</category><category>Kubernetes</category></item><item><title>使用 Cilium 替换 Calico</title><link>https://www.chenshaowen.com/blog/how-to-use-cilium-to-replace-calico.html</link><pubDate>Thu, 16 Sep 2021 08:01:28 +0000</pubDate><atom:modified>Thu, 16 Sep 2021 08:01:28 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-cilium-to-replace-calico.html</guid><description>1. 系统要求 Kubernetes， &amp;gt;= 1.16.0-0 Helm， &amp;gt;= 3.0 Linux 内核 &amp;gt;= 4.9.17 CentOS 7 升级内核过程，可以参考 Calico 下如何切换数据面到 eBPF 。 2. 卸载 Calico 删除集群资源 1 2 3 4 5 6 kubectl -n kube-system delete ds calico-node kubectl -n kube-system delete deploy calico-kube-controllers kubectl -n kube-system delete sa calico-node kubectl -n kube-system delete sa calico-kube-controllers kubectl -n kube-system delete cm calico-config kubectl -n kube-system delete secret calico-config 1 kubectl get crd | grep calico | awk &amp;#39;{print $1}&amp;#39; | xargs</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Cilium</category><category>Calico</category><category>Kubernetes</category><category>容器</category><category>网络</category></item><item><title>Calico 下如何切换数据面到 eBPF</title><link>https://www.chenshaowen.com/blog/how-to-switch-data-plane-to-ebpf.html</link><pubDate>Wed, 15 Sep 2021 07:33:55 +0000</pubDate><atom:modified>Wed, 15 Sep 2021 07:33:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-switch-data-plane-to-ebpf.html</guid><description>1. 环境准备 1.1 Calico eBPF 要求 系统要求 Ubuntu 18.04.4+ Red Hat v8.2 Linux kernel v5.3+ 如果 Calico 没有检测到兼容的内核，将会回退到标准模式。 每个节点的 /sys/fs/bpf 都需要挂载有 BPF 文件系统 Calico 版本不低于 3.13 1.2 升级内核 这里使用的是 CentOS 7 操作系统： 1 2 3 uname -rv 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 内核版本不满足要求，因此需要升级内核</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>网络</category><category>Calico</category><category>eBPF</category><category>Kubernetes</category></item><item><title>在 Kubernetes 中如何给 NodePort 配置 NetworkPolicy</title><link>https://www.chenshaowen.com/blog/how-to-configure-networkpolicy-for-nodeport.html</link><pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 23 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-configure-networkpolicy-for-nodeport.html</guid><description>1. 需求背景 如上图，业务方需要隔离 namespae 的服务，禁止 bar 空间的负载访问，而允许用户从 Load Balancer (LB) 通过 NodePort 访问服务。可以很容易地写出一个网络策略: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: test-network-policy namespace: foo spec: podSelector: matchLabels: {} policyTypes: - Ingress ingress: - from: - ipBlock: cidr: 10.2.3.4/32 - namespaceSelector: matchExpressions: - key: region operator: NotIn values: - bar 然而</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>NetworkPolicy</category><category>网络</category><category>Kubernetes</category></item><item><title>Kubernetes网络权威指南：基础、原理与实践</title><link>https://www.chenshaowen.com/blog/book/the-guide-to-kubernetes-network.html</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 16 Oct 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/the-guide-to-kubernetes-network.html</guid><description>作者: 杜军 出版社: 电子工业出版社 出版年: 2019-10 ISBN: 9787121373398 Notes: 网络是 Kubernetes 中不易掌握的一个难点。网络故障会直接影响现有的负载，通常是十分紧急的问题。而网络相关的知识相较于应用开发更底层，很多的细节，需要长期的积累。 书中相关的要点之前陆续都有所接触，通过阅读这</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>Kubernetes</category><category>网络</category></item><item><title>Django 大文件传输</title><link>https://www.chenshaowen.com/blog/django-big-file-transfer.html</link><pubDate>Tue, 26 Sep 2017 18:28:56 +0000</pubDate><atom:modified>Tue, 26 Sep 2017 18:28:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-big-file-transfer.html</guid><description>1. 直接返回文件 如果静态文件在工程根目录的 media/test.zip，需要先将文件读入内存，再进行传输。代码如下： settings.py 配置 1 2 PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__)) MEDIA_ROOT = os.path.join(PROJECT_ROOT, &amp;#39;media/&amp;#39;) yourapp/views.py 1 2 3 4 5 6 7 8 9 10 11 12 from django.conf import settings from django.http import HttpResponse from django.core.files.storage import FileSystemStorage def download_file_direct_from_file(request): file_system = FileSystemStorage(settings.MEDIA_ROOT) file_name = &amp;#39;test.zip&amp;#39; with file_system.open(file_name) as f: response = HttpResponse(f) response[&amp;#39;Content-Type&amp;#39;] = &amp;#39;application/%s&amp;#39; % file_name.split(&amp;#39;.&amp;#39;)[-1] response[&amp;#39;Content-Disposition&amp;#39;] = &amp;#39;attachment; filename=&amp;#34;%s&amp;#34;&amp;#39;% file_name return</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>Django</category><category>大文件</category><category>网络</category><category>Demo</category></item><item><title>同源策略与跨域访问</title><link>https://www.chenshaowen.com/blog/same-origin-policy.html</link><pubDate>Tue, 13 Jun 2017 17:19:03 +0000</pubDate><atom:modified>Tue, 13 Jun 2017 17:19:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/same-origin-policy.html</guid><description>1. 同源策略 同源策略是浏览器的安全基石。 同源的定义，包括三个方面： 协议相同 域名相同 端口相同 限制范围： Cookie、LocalStorage 和 IndexDB 无法读取 DOM 无法获得 AJAX 请求不能发送 简单说，协议、域名、端口三者任意不同的两个 URL 之间不允许通信，范围包括</description><dc:creator>微信公众号</dc:creator><category>前端</category><category>网络</category><category>安全</category><category>博文</category></item><item><title>DDoS 攻击入门</title><link>https://www.chenshaowen.com/blog/ddos-101.html</link><pubDate>Thu, 23 Feb 2017 20:17:24 +0000</pubDate><atom:modified>Thu, 23 Feb 2017 20:17:24 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ddos-101.html</guid><description>1. 什么是 DDoS 举个栗子，春节买票期间，高铁票一出，全国人民都向12306的服务器发送连接请求。然后，12306的服务器就会不响应或者较慢响应网页请求。这就构成了一次DDoS攻击。通过大量并发的请求，迫使目标服务受到影响，甚至终止。 DDoS攻击是</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>网络</category><category>安全</category><category>DDoS</category><category>入门</category></item><item><title>BWAPP 学习与使用</title><link>https://www.chenshaowen.com/blog/study-of-bwapp.html</link><pubDate>Sun, 25 Dec 2016 15:38:42 +0000</pubDate><atom:modified>Sun, 25 Dec 2016 15:38:42 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/study-of-bwapp.html</guid><description>1. BWAPP简介 buggy web Application，简称BWAPP，这是一个集成了各种常见漏洞和最新漏洞的开源Web应用程序，目的是帮助网络安全爱好者、开发人员和学生发现并防止网络漏洞。包含了超过100种漏洞，涵盖了所有主要的已知Web漏洞，包括O</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>安全</category><category>网络</category><category>学习</category><category>BWAPP</category></item><item><title>Burpsuite 实践与 Web 越权攻击</title><link>https://www.chenshaowen.com/blog/burpsuite-web-attack-detection.html</link><pubDate>Fri, 16 Dec 2016 16:15:54 +0000</pubDate><atom:modified>Fri, 16 Dec 2016 16:15:54 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/burpsuite-web-attack-detection.html</guid><description>1. Burpsuite简介 Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。 所有的工具都共享一个能处理并显示HTTP 消息、持久性、认证、代理、日志、警报的一个强大的可扩展的框架</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>网络</category><category>安全</category><category>攻击</category><category>Web</category><category>Burpsuite</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>对象 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%AF%B9%E8%B1%A1/</link><description>Recent content in 对象 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 28 Jul 2019 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%AF%B9%E8%B1%A1/atom.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 之网络</title><link>https://www.chenshaowen.com/blog/networks-of-kubernetes.html</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 28 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/networks-of-kubernetes.html</guid><description>1. Docker 的网络模型 1.1 bridge 模式 默认使用 bridge 模式，也可以使用 --net=bridge 指定 bridge 模式。 bridge 模式下，容器连接到同一个虚拟网桥 docker0 上。docker0 通常会占用 172.17.0.1/16 网段。同一个网桥上的容器之间，可以通过 ip 直接通信。 1.2 host 模式 使用 --net=host 指定 host 模式。 host 模式，容器与主机共享 Network Namesp</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>API</category><category>对象</category></item><item><title>Kubernetes 之 API</title><link>https://www.chenshaowen.com/blog/api-of-kubernetes.html</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 26 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/api-of-kubernetes.html</guid><description>1. Kubernetes 中的对象 Kubernetes 对象是系统中的持久实体，用于表示集群的状态。用户通过操作对象，与 Kubernetes 进行交互，告诉系统自己期望的工作负载情况。 对象的操作是通过 Kubernetes API 来实现的。每个 Kubernetes 对象包含两个嵌套的对象字段，Spec 和 Status。Spec 描述了期望的对象状态，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>API</category><category>对象</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>研发 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E7%A0%94%E5%8F%91/</link><description>Recent content in 研发 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 27 Apr 2024 10:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E7%A0%94%E5%8F%91/atom.xml" rel="self" type="application/rss+xml"/><item><title>什么是 MLOps</title><link>https://www.chenshaowen.com/blog/what-is-mlops.html</link><pubDate>Sat, 27 Apr 2024 10:00:00 +0000</pubDate><atom:modified>Sat, 27 Apr 2024 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-mlops.html</guid><description>1. 什么是 MLOps MLOps 是 Machine Learning Operations 的缩写，描述的是围绕模型研发整个生命周期过程的标准化和工程化。 MLOps 包括以下几个关键步骤: 数据管理，数据的存储、访问、清洗、转换 模型开发，算法开发、模型构建 模型训练与调优，使用数据训练模型，调整超参数优化模型，微调模型 模型评</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>机器学习</category><category>MLOps</category><category>大模型</category><category>研发</category><category>什么是</category></item><item><title>我的 Restful API 规范</title><link>https://www.chenshaowen.com/blog/my-restful-api-specification.html</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 07 Dec 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/my-restful-api-specification.html</guid><description>主要用来规范自己写的 API，也是为了让 LLM 更好理解我的 API。 1. Domain 尽量单独使用一个域名，例如 api.example.com 。 2. Path 统一使用小写字母。 不用包含 /api 前缀。 不要包含扩展名。 / 不要出现在末尾。 对于 Restful API，/ 用来划分资源层级，末尾的 / 会导致混淆。 使用带版本的路径 /v1 。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>接口</category><category>API</category><category>研发</category><category>规范</category></item><item><title>使用 Nodejs 代理 Https 请求到依赖的研发服务</title><link>https://www.chenshaowen.com/blog/how-to-set-proxy-to-server-using-nodejs.html</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Jun 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-set-proxy-to-server-using-nodejs.html</guid><description>1. 背景 微服务架构下，服务与服务的依赖关系复杂。在开发过程中，多个服务之间经常需要联调。此时有两种方式: 将服务部署到线上开发环境 Kubernetes 集群 使用 telepresence 打通本地与线上集群的通信，这样能获得一个比较稳定的联调环境。 缺点是，需要生成足够权限的凭证、需要研发人</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Nodejs</category><category>Proxy</category><category>研发</category></item><item><title>Go mod 使用问题</title><link>https://www.chenshaowen.com/blog/some-questions-of-using-go-mod.html</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-questions-of-using-go-mod.html</guid><description>1. 升级 Go 版本之后 go.sum 版本不匹配 执行命令 go build 报错。 错误提示： missing go.sum entry for module providing package golang.org/x/time/rate; to add 解决办法： 在 go build 之前更新 go.sum，执行命令 go mod tidy 2. tls 错误 执行命令 go mod download 报错。 错误提示： fatal: unable to access &amp;#39;https://github.com/agiledragon/gomonkey/&amp;#39;: GnuTLS recv error (-110): The TLS connection was non-properly terminated. 解决办法： 禁用证书校验执行命令，export</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>研发</category></item><item><title>Go 中的时间和时区问题</title><link>https://www.chenshaowen.com/blog/the-tips-of-time-and-tz-in-go.html</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-tips-of-time-and-tz-in-go.html</guid><description>1. 时间与时区 1.1 时间标准 UTC，世界标准时间，是现在的时间标准，以原子时计时。 GMT，格林威治时间，是以前的时间标准，规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午 12 点。 UTC 时间更加准确，但如果对精度要求不高，可以视两种标准等</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Go</category><category>研发</category></item><item><title>如何给 Kubernetes Apiserver 新增访问入口</title><link>https://www.chenshaowen.com/blog/how-to-add-entrance-to-kubernetes-apiserver.html</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 08 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-entrance-to-kubernetes-apiserver.html</guid><description>1. 本地怎么访问远程集群 在研发时，需要直接连接远端 Kubernetes 集群。通常的做法是，将 /etc/kubernetes/admin.conf 拷贝到本地 ~/.kube/kubeconfig。 但是 kubeconfig 的 server 地址是 kubernetes.default.svc。因此，我们需要配置一个 hosts: 1 1.1.1.1 kubernetes.default.svc 如果需要在不同集群之间切换</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>研发</category><category>证书</category></item><item><title>如何远程触发 GitHub Action</title><link>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</guid><description>通常，我们需要在 GitHub 上进行一些操作，才能触发 GitHub Action。本篇将介绍一种通过 API 远程调用触发 GitHub Action 的方法。 1. 常见的几种触发 GitHub Action 的方式 下面是一个 GitHub Action 的示例: 1 2 3 4 5 6 7 name: GitHub Actions Demo on: [push, pull_request] jobs: Explore-GitHub-Actions: runs-on: ubuntu-latest steps: - run: echo &amp;#34;Hello World!&amp;#34; 在 on 关键字下，定义的就是触发 Workflow 执行的事件。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>国内访问 GitHub 的若干方法</title><link>https://www.chenshaowen.com/blog/some-tips-to-access-github.html</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 14 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-tips-to-access-github.html</guid><description>由于众所周知的原因，在国内的网络环境下，访问 Github 时，网络会阻断或者很慢。本文提供了若干访问方法。 1. 使用 Github Mirror 下载 直接在 GitHub 仓库前面拼接 Proxy 地址，不同的 Mirror 拼接方式可能有所不同。下面以拉取 https://github.com/shaowenchen/scripts 仓库为例。 https://ghproxy.chenshaowen.com 1 git clone https://ghproxy.chenshaowen.com/https://github.com/shaowenchen/ops 2. 通过 Gitee 导入 GitHub 项目 可以参考文档: GitHu</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Github</category><category>研发</category></item><item><title>一些常见的计算机面试题</title><link>https://www.chenshaowen.com/blog/some-common-computer-interview-questions.html</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 26 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-common-computer-interview-questions.html</guid><description>计算机基础 堆和栈 什么时候用堆？什么时候用栈？栈有什么作用？Golang 的变量在栈还是堆？堆、栈有没有上限？有的话和什么有关？ 数据结构 Slice 空间是怎样分配的？双倍扩容，原来数据复制过去。 Golang 的 map 是什么结构 Golang 的 map 是什么结构，遍历是否有序， 什么是 Hash 表？</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>面试</category></item><item><title>GitHub Actions 三步教你打造 ChatOps 系统</title><link>https://www.chenshaowen.com/blog/using-github-actions-to-build-a-chatops-in-three-steps.html</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 06 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-github-actions-to-build-a-chatops-in-three-steps.html</guid><description>在上一篇文档 《使用 ChatOps 改进研发流程》中，通过 ChatOps 给 Pull Requests 提供预览链接提升了敏捷速度。本篇主要描述如何快速实现这个功能。 1. 第一步: 配置一个触发器 1.1 选择一个触发器 在 GitHub 中有三类 Workflows 触发器，定时、人工、自动触发器。我们需要选择一个自动触发器，用于触发执行逻</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>DevOps</category><category>ChatOps</category></item><item><title>使用 ChatOps 改进研发流程</title><link>https://www.chenshaowen.com/blog/using-chatops-to-improve-the-r-and-d-process.html</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 06 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-chatops-to-improve-the-r-and-d-process.html</guid><description>1. 什么是 ChatOps GitOps、ChatOps、AIOps 等(以下简称 NewOps )是近几年出现的新兴运维理念。NewOps 将 Ops 从混沌的状态离析为两个部分：一个面向用户，趋势是更加人性化、可审计、可回溯；另一个面向基础设施，趋势是更加程序化、自动化、智能化。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>DevOps</category><category>ChatOps</category></item><item><title>构建 Scalable 团队</title><link>https://www.chenshaowen.com/blog/build-a-scalable-team.html</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-a-scalable-team.html</guid><description>对于互联网行业的工程师，常思考的是系统的 Scalable，例如，流量、计算、存储增长时如何改进系统，有各种水平、垂直扩容的方案。除了服务，团队的 Scalable 也是十分关键的。本篇主要思考的是，如何组织团队，在一定规模下，通过加人能够提升团队的事务处理能</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>思考</category><category>研发</category><category>团队</category><category>DevOps</category></item><item><title>如何给 GitHub Actions 添加自己的 Runner 主机</title><link>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</guid><description>1. 什么是 GitHub Actions 在前面的文档中，我对 GitLab 提供的 CI 功能进行了实践，点击查看 。使用 GitLab 的好处是可以私有化部署、无限的私有仓库数量、CI 配置简单、能接入自建的 Runner 。但随着 GitHub 越来越开放，GitLab 的这些优势在逐步丧失。 从 CICD 的角度看，越接近 Git 仓库的功能，越贴</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>实用的算法之布隆过滤</title><link>https://www.chenshaowen.com/blog/practical-algorithm-of-bloom-filter.html</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 01 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practical-algorithm-of-bloom-filter.html</guid><description>1. 什么是布隆过滤 布隆过滤（Bloom Filter）是布隆在 1970 年提出的一种数据结构。 将元素（x、y、z）通过一系列函数，映射到一个二进制向量（0101 序列），用于快速判断元素 w 是否在一个集合当中。如下图（来自维基百科）: 相较于使用单个映射函数</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>实用的算法</category><category>研发</category><category>Go</category><category>优化</category><category>布隆过滤</category></item><item><title>什么是白板分享</title><link>https://www.chenshaowen.com/blog/what-is-whiteboard-sharing.html</link><pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 17 Oct 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-whiteboard-sharing.html</guid><description>1. 曾经的尝试 在博文没有标签的你，让人无法想起中，我强调在趋同的群体中，个体成为了背景噪声，而标签成为了有效的信息。 在下面这张图中，我们很难记住某一个人，但是却很容易通过 A、B、C、D、E 标签找到某一个人。 标记之后，人与人之间会形成网络，而所</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>思考</category><category>团队</category><category>研发</category><category>白板分享</category><category>什么是</category></item><item><title>如何使用 Terraform Provider 提供 Iac 级别的应用</title><link>https://www.chenshaowen.com/blog/how-to-use-terraform-to-provide-iac-platform.html</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 22 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-terraform-to-provide-iac-platform.html</guid><description>1. Terraform Vs Kubernetes 基础架构即代码（Iac) 基于不可变的基础架构，使用编排工具将基础架构文本化，允许像管理代码一样管理基础设施。 2018 年，我在从事 SaaS 开发，使用 Kubernetes 平台进行部署，这一年 Terraform 很火。2019 年，我开始从事 Kubernetes 的二次开发，才听说 Terraform 。现在网上 Terraform 相关的文档增</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Terraform</category><category>Iac</category><category>Kubernetes</category><category>DevOps</category><category>CICD</category><category>研发</category></item><item><title>一面面试官总结</title><link>https://www.chenshaowen.com/blog/some-summaries-of-the-interviewer.html</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 26 Jul 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-summaries-of-the-interviewer.html</guid><description>最近离职的小伙伴有点多，比较缺人。陆陆续续面试了近十位候选人，一面通过率大约 50 % ，还没有确定的 HC 。 1. 准备工作 搜集简历。发帖、邮件公告、朋友圈、招聘网站，都是简历来源。离开的人有各种各样的理由，待遇差、不喜欢的工作方式、不开心、不受重视，当然</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>面试</category></item><item><title>CentOS 7 安装 Java 开发环境</title><link>https://www.chenshaowen.com/blog/install-jdk-in-centos-7.html</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 01 Jul 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/install-jdk-in-centos-7.html</guid><description>1. 编译报错：java.nio.file.NoSuchFileException 在编译 Jenkins 插件时，提示错误信息如下： 1 2 3 4 mvn package Compilation failure [ERROR] java.nio.file.NoSuchFileException: /root/java/target/classes/META-INF/annotations/hudson.Extension 原来 Maven 使用的是 JAVA_HOME 而不是 PATH，找不到 Java 运行环境导致，而且 Java 11 不行，Java 1.8 才能正常编译。 2. 安装 JDK 安装 Java</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Java</category><category>环境</category><category>CentOS</category><category>研发</category></item><item><title>DevOps 精要：业务视角</title><link>https://www.chenshaowen.com/blog/book/the-essentials-of-devops.html</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 23 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/the-essentials-of-devops.html</guid><description>作者:（俄）奥列格·斯克伦尼科（Oleg Skrynnik） 出版社: 清华大学出版社 出版年: 2020-05-01 ISBN: 9787302547143 Notes: 内容如题，书中主要阐述了业务视角中的 DevOps 。从起源到基础，从原则到实践，你都可以从中有所收获。DevOps 的基础是精益生产（丰田流水线）和敏捷开发，</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>DevOps</category><category>CICD</category><category>研发</category></item><item><title>研发如练兵，运营如用兵</title><link>https://www.chenshaowen.com/blog/the-strategy-for-rd-and-ops.html</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 14 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-strategy-for-rd-and-ops.html</guid><description>1. 思想驱动行为 思想驱动行为，行为产生效益。接人、待物、处事来源于文化，不会因为技术的迅猛发展而产生跃变。拥有悠久历史的中华民族，沉淀了极具韧性的思想智慧。王朝更迭，政治更替，都打不到她。即使用武力征服，最终也会被同化。 汲取更多先哲智慧、历史</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>思考</category></item><item><title>为什么要使用远端构建</title><link>https://www.chenshaowen.com/blog/why-should-we-use-remote-build.html</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Thu, 04 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/why-should-we-use-remote-build.html</guid><description>1. 提高自动化水平 远端构建通常需要借助一定的 CI 工具，比如 Github Actions 、Travis CI 等。如果是内网环境，可以借助 GitLab CI ，添加一个 CI 节点进行自动化构建，可以参考 我的 GitLab 文档 。 自动化的好处不言而喻，能规范流程、节约大量时间，具有明显的收益。 2. 有利于其他人参与</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>思考</category><category>研发</category><category>构建</category></item><item><title>一个完整的 Git 提交流程</title><link>https://www.chenshaowen.com/blog/a-complete-git-submission-process.html</link><pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 19 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-complete-git-submission-process.html</guid><description>这也是一个给开源项目提交 PR 的完整 Git 流程。 1. 本地配置 提交用户信息 1 2 git config --global user.name &amp;#34;username&amp;#34; git config --global user.email &amp;#34;user@email.com&amp;#34; GPG 配置 参考：GPG 验证提交 2. 克隆代码 首先 fork 原仓库 克隆 fork 的仓库代码 1 git clone https://github.com/yourname/django-xss-cleaner.git 添加原仓库 1 git remote add upstream https://github.com/shaowenchen/django-xss-cleaner.git 查看本地配置的远程源 1 2 3 4 git remote -v origin xxx upstream xxx 3. 日常开发 拉取最新</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Git</category><category>研发</category></item><item><title>GitHub 三种合并代码方式的差别</title><link>https://www.chenshaowen.com/blog/the-difference-of-tree-ways-of-merging-code-in-github.html</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 18 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-difference-of-tree-ways-of-merging-code-in-github.html</guid><description>1. Create a merge commit PR Commit 记录： 1 2 commit c1 commit c2 集成分支 Commit 记录： 1 2 3 commit PR #NUM commit c2 commit c1 Create a merge commit 会将 PR 中的全部 Commit 记录完整带到集成分支中，同时增加一条 PR Commit 信息。 2. Squash and merge PR Commit 记录： 1 2 commit s1 commit s2 集成分支 Commit 记录： 1 commit PR #NUM Squash and merge 合并之后，集成分支只会增加一条 Commit 记录。观感</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>GitHub</category><category>DevOps</category><category>CICD</category></item><item><title>当我们值工单时，在值什么</title><link>https://www.chenshaowen.com/blog/how-to-process-work-order.html</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 18 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-process-work-order.html</guid><description>1. 当我们值工单时，在值什么 一般人可能只提过工单，没值过工单。值过工单的人一般不会轻易提工单。 工单就是客户花钱买产品，赠送的一服务，专门解决各种使用上的问题。在云基础设施的厂商很常见，IaaS、CDN、Domain、Container 等，不会</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工单</category><category>研发</category><category>思考</category></item><item><title>使用 PyGithub 自动创建 Label</title><link>https://www.chenshaowen.com/blog/how-to-create-labels-by-pygithub.html</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 01 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-create-labels-by-pygithub.html</guid><description>1. 关于 Label 在前面的文档 如何使用 python-gitlab 自动创建 GitLab Label 中，我已经阐述了 Label 可以用于简单的项目管理。 一个团队，通常不止一个代码仓库，为了减轻沟通和学习成本，除了使用一致的工具链，还应该达成一定的基础共识。这些基础共识，促使大家达成最佳的实践方式。同一个大项</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>流程</category><category>研发</category></item><item><title>搭建远程 Kubernetes 开发环境</title><link>https://www.chenshaowen.com/blog/building-a-remote-kubernetes-development-environment.html</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 18 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/building-a-remote-kubernetes-development-environment.html</guid><description>Minikube 是 Kubernetes 的单机发行版本，适用于产品体验和日常开发。这里使用 Minikube 搭建开发环境，将 Kubernetes 搭建在 CentOS 云服务器，本地使用 OS X 进行远程开发。 1. 云服务器安装 Minikube 在 Minikube 的 GitHub 版本页面，找到合适的版本，进行安装。 以 CentOS 为例，执行命令: 1 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.2.0/minikube-linux-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo cp minikube /usr/local/bin/ &amp;amp;&amp;amp; rm minikube minikube 是一</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>研发</category><category>环境</category><category>实践</category></item><item><title>打造一致性的团队</title><link>https://www.chenshaowen.com/blog/build-an-overall-team.html</link><pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate><atom:modified>Sat, 02 Mar 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-an-overall-team.html</guid><description>1. 认知一致 在大的组织中，我们可以将小团队理解为一个微服务。 早在 1967 年，康威提出了微服务的概念。康威认为任何组织在设计一套系统时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。 在开发复杂系统时，我们通常会对系统进行模块拆分。一方面，个体</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>思考</category><category>团队</category><category>研发</category></item><item><title>开发 Tips（1）</title><link>https://www.chenshaowen.com/blog/developing-tips-1.html</link><pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 19 Oct 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-1.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. warning: LF will be replaced by CRLF Windows、Linux 和 Mac 在处理文件换行时，标示符是不一致的。Windows 使用 CRLF 作为结束符，而 Linux 和 Mac 使用 LF 作为结束符。 对待换行符，Git 有两种模式。查看 Git 配置。 1 git config core.autocrlf 如果显示</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>研发</category></item><item><title>Django 开发规范(一)</title><link>https://www.chenshaowen.com/blog/development-specification-1-of-django.html</link><pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 27 Jan 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/development-specification-1-of-django.html</guid><description>本文主要约定在 Django 开发过程中，需要注意的一些事项。统一的编码风格，良好的设计理念，有利于项目的开发和维护，值得开发人员不断地研究和探讨。 1. 编码声明 在 Python 解释器执行代码时，需要告诉解释器代码的编码方式。Python 代码实际上是文本数据，如果代码的</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Python</category><category>规范</category><category>研发</category></item><item><title>API 接口规范</title><link>https://www.chenshaowen.com/blog/api-interface-specification.html</link><pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate><atom:modified>Fri, 01 Dec 2017 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/api-interface-specification.html</guid><description>在 Web 应用开发的过程中，后端开发人员需要频繁的交付 API 接口，前端开发人员需要频繁的调用 API 接口。为了降低沟通成本、预防可能的安全风险，遵循约定优于配置的原则，有必要规范 API 的接口规范。Restful API 是以资源为核心的 API 设计思路，所有的操作都是针对特</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>接口</category><category>API</category><category>研发</category><category>规范</category></item><item><title>Django 中对静态文件版本的控制</title><link>https://www.chenshaowen.com/blog/control-of-static-file-version-in-django.html</link><pubDate>Fri, 06 Oct 2017 09:58:43 +0000</pubDate><atom:modified>Fri, 06 Oct 2017 09:58:43 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/control-of-static-file-version-in-django.html</guid><description>为了快速地响应用户的需求、满足运营活动的需要，互联网产品通常有着非常高的发布频率。采用敏捷开发的方式，缩短了交付的周期，加快了产品的迭代，也给项目的文件管理带来了挑战。前端工程直接面向用户，首当其冲，最值得重视。频繁更新的图片、样式、交互，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>前端</category><category>JavaScript</category><category>文件</category><category>研发</category><category>版本</category></item><item><title>Atom 打造轻量级的 Python 全栈 IDE</title><link>https://www.chenshaowen.com/blog/atom-create-lightweight-python-full-stack-ide.html</link><pubDate>Sun, 06 Aug 2017 14:51:16 +0000</pubDate><atom:modified>Sun, 06 Aug 2017 14:51:16 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/atom-create-lightweight-python-full-stack-ide.html</guid><description>目前，本人使用的是 PyCharm ，作为前后端的集成开发工具。主要的技术栈有，JavaScript，CSS，ECMAScript 6，Vue，Python，Django，Mako，Markdown。近期的前端开发工作逐渐增加，PyCharm 似乎有些力不从心</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>Python</category><category>研发</category><category>IDE</category><category>Atom</category><category>全栈</category></item><item><title>跨部门合作课程笔记</title><link>https://www.chenshaowen.com/blog/cross-departmental-collaborative-curriculum-notes.html</link><pubDate>Fri, 14 Jul 2017 20:55:29 +0000</pubDate><atom:modified>Fri, 14 Jul 2017 20:55:29 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/cross-departmental-collaborative-curriculum-notes.html</guid><description>合作是一场旅程。 1. 跨部门合作的障碍 对新业务合作的抵触 职责存在模糊地带 员工的合作能力 信息不对称 跨部门合作的管理机制 目标和利益不一致 资源有限 2. 合作的核心理念 双赢思维 开放心态 合作核心的三个方面 寻找共同利益 学会换位思考 巩固长期合作关系 3. 合作关系核心</description><dc:creator>微信公众号</dc:creator><category>管理</category><category>合作</category><category>研发</category></item><item><title>Apidoc 实践和自动化生成</title><link>https://www.chenshaowen.com/blog/practice-and-automation-generation-of-apidoc.html</link><pubDate>Wed, 14 Jun 2017 17:22:45 +0000</pubDate><atom:modified>Wed, 14 Jun 2017 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practice-and-automation-generation-of-apidoc.html</guid><description>在前后端分离框架中，API 文档频繁交接。如果涉及到第三方接口调用，多方合作场景下，API 和文档变更可能会更快。为了方便维护 API 和交接文档，这里给大家推荐一款文档生成工具 - apidoc 1.apidoc 简介 apidoc 是一个基于 nodejs 的 API 文档生成工具，从代码注释中提取特定格式的内容，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>接口</category><category>API</category><category>文档</category><category>研发</category></item><item><title>一个成功的 Git 分支模型</title><link>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</link><pubDate>Sun, 04 Dec 2016 20:34:03 +0000</pubDate><atom:modified>Sun, 04 Dec 2016 20:34:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-successful-git-branching-model.html</guid><description>这篇围绕全部源代码的控制工具Git展开。 1. 为什么是Git? 为了深入探讨git和集中式源码版本控制系统的利弊，参见这里。这方面有太多的激烈争论。作为一个开发者，相比其他工具，当前我更喜欢Git。Git的确改变了开发者关于合并与分支的思考方式。</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>工具</category><category>Git</category><category>研发</category></item></channel></rss>
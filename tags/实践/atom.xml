<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>实践 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%AE%9E%E8%B7%B5/</link><description>Recent content in 实践 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Mon, 05 Feb 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%AE%9E%E8%B7%B5/atom.xml" rel="self" type="application/rss+xml"/><item><title>kind 实用指南</title><link>https://www.chenshaowen.com/blog/practice-guide-to-kind.html</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><atom:modified>Mon, 05 Feb 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practice-guide-to-kind.html</guid><description>1. 项目简介 kind 是使用容器管理 Kubernetes 集群的工具。项目地址 https://github.com/kubernetes-sigs/kind 。 主要用在: 本地开发环境 学习时的临时环境 自动化测试 2. 安装 kind macOS 1 brew install kind Linux 1 2 curl -Lo /usr/local/bin/kind https://kind.sigs.k8s.io/dl/v0.21.0/kind-linux-amd64 chmod +x /usr/local/bin/kind 3. 创建 kind 集群 如果你本地配置有 PROXY，在创建之间建议重新设置一下环境变量： 1 2 export https_proxy=http://x.x.x.x:7890 export http_proxy=http://x.x.x.x:7890 本地代理通常设</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>kind</category><category>实践</category></item><item><title>使用 Dragonfly V2 分发集群的镜像</title><link>https://www.chenshaowen.com/blog/distributing-image-with-dragonfly-v2.html</link><pubDate>Sat, 13 Jan 2024 11:22:55 +0000</pubDate><atom:modified>Sat, 13 Jan 2024 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/distributing-image-with-dragonfly-v2.html</guid><description>1. Dragonfly 简介 Dragonfly 的相关文档在社区 https://d7y.io/zh/docs/ 已经有详细说明。这里只是简单介绍一下，V2 版本的主要组件： Manager，提供 UI 界面、用户管理、集群监控、任务管理等功能 Scheduler，调度 Peer 之间的流量、提供预热等功能 Seed Peer，回源节点，用于从源站（Har</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>Dragonfly</category><category>Image</category><category>Nydus</category><category>配置</category><category>实践</category></item><item><title>Nydus 懒加载镜像配置与实践</title><link>https://www.chenshaowen.com/blog/nydus-configuration-and-practice.html</link><pubDate>Sat, 06 Jan 2024 11:22:55 +0000</pubDate><atom:modified>Sat, 06 Jan 2024 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nydus-configuration-and-practice.html</guid><description>据统计容器中的大部分文件不会被使用。根据这一特征，Nydus 自定义了 Rafs 格式的文件系统，实现了镜像文件的按需加载，以解决大镜像导致的启动慢和占用存储的问题。而在 AI 场景下，无论是推理还是训练，镜像常常都是几个 G 起步，甚至几十个 G，Nydus 非常</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>AI</category><category>Nydus</category><category>配置</category><category>实践</category></item><item><title>混沌工程与落地实践</title><link>https://www.chenshaowen.com/blog/chaos-engineering-and-practice.html</link><pubDate>Sat, 16 Dec 2023 11:15:11 +0000</pubDate><atom:modified>Sat, 16 Dec 2023 11:15:11 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/chaos-engineering-and-practice.html</guid><description>两个月前，我在业务团队有过一次关于混沌工程实践的分享，这里主要整理下讲稿的内容。 点击查看演示文稿 1. 混沌产生 1.1 混沌学科的产生 在讲混沌之前，我们可以先思考一下混沌、混沌工程和我们线上服务之间的关联。 我们经常听到的故事是，一只在亚马逊河流中的蝴蝶</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Chaos</category><category>实践</category><category>流程</category><category>规范</category></item><item><title>常用的清理 Kubernetes 集群资源命令</title><link>https://www.chenshaowen.com/blog/common-commands-for-cleaning-up-kubernetes-cluster-resources.html</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 08 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-commands-for-cleaning-up-kubernetes-cluster-resources.html</guid><description>长时间运行的集群，常会面临各种资源耗尽的问题，另外磁盘不足时 Kubelet 还会主动清理镜像增加不确定因素，本文提供了一些命令片段用于清理工作。 1. Kubernetes 基础对象清理 清理 Evicted 状态的 Pod 1 sudo kubectl get pods --all-namespaces -o wide | grep Evicted | awk &amp;#39;{print $1,$2}&amp;#39; | sudo xargs -L1 kubectl delete pod -n 清理 Error 状态的 Pod 1 sudo kubectl get pods --all-namespaces -o wide | grep</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>实践</category><category>清理</category><category>运维</category></item><item><title>Logstash 配置基础</title><link>https://www.chenshaowen.com/blog/the-basic-configuration-of-logstash.html</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Dec 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-basic-configuration-of-logstash.html</guid><description>1. Logstash 的基本原理 Logstash 是一个用于数据传输和处理的组件。 通过插件的组合，Logstash 可以满足各种日志采集的场景： logstash-&amp;gt;elasticsearch filebeat-&amp;gt;logstash-&amp;gt;elasticsearch filebeat-&amp;gt;kafka-&amp;gt;logstash-&amp;gt;elasticsearch filebeat-&amp;gt;redis-&amp;gt;logstash-&amp;gt;elasticsearch 2. Logstash 的基本配置 下面是一个 Logstash 的配置格式： 1 2 3 4 5 6 7 8 9 10 11 12 # 数据源，例如 Kafka、MySQL input { } # 过滤器，用于处理数</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>日志</category><category>配置</category><category>实践</category></item><item><title>Kubernetes 复杂有状态应用管理框架 -- Operator</title><link>https://www.chenshaowen.com/blog/complex-application-management-framework-operator-for-kubernetes.html</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 25 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/complex-application-management-framework-operator-for-kubernetes.html</guid><description>1. 缘起 最初，有两名 CoreOS 的员工，为了更方便部署 etcd 集群，在 etcdCluster 对象的增、删、改事件上绑定了相应的逻辑操作，借助 Kubernetes 来自动化管理 etcd 集群。 在几个月之后的 KubeCon 大会上，他们分享了这种称之为 Operator 的方案，得到社区的强烈回响。随后，大量项目宣布支持以 Operator 的方式进行运行和</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>Helm</category><category>实践</category></item><item><title>Kubernetes 的包管理器 -- Helm</title><link>https://www.chenshaowen.com/blog/package-manager-helm-of-kubernetes.html</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 24 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/package-manager-helm-of-kubernetes.html</guid><description>1. 为什么需要 Helm Kubernetes 中一个重要的设计理念就是，声明式的操作。用户通过设置系统的预期状态来改变系统。例如，现在的副本数量是 2 ，需要调整为 3。声明式的处理方式是，修改配置文件中副本数量为 3 ；命令式的处理方式是，发送增加一个副本的命令，+1。 使用申明</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Helm</category><category>实践</category></item><item><title>kubectl 实用指南</title><link>https://www.chenshaowen.com/blog/practice-guide-to-kubectl.html</link><pubDate>Fri, 19 Jul 2019 01:00:00 +0000</pubDate><atom:modified>Fri, 19 Jul 2019 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practice-guide-to-kubectl.html</guid><description>1. 什么是 kubectl kubectl 是 Kubernetes 的命令行工具，通过 API server 与集群进行交互。 2. 配置 kubectl kubectl 可以通过 ~/.kube/config 配置连接到一个或多个集群。 具体如何配置可以参考: 配置对多集群的访问 。如果需要配置远程集群，可以参考: 搭建远程 Kubernetes 开发环境。 查看配置的集群: 1 2 3 kubectl config get-contexts CURRENT NAME CLUSTER AUTHINFO NAMESPACE * minikube minikube minikube</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>kubectl</category><category>实践</category></item><item><title>搭建远程 Kubernetes 开发环境</title><link>https://www.chenshaowen.com/blog/building-a-remote-kubernetes-development-environment.html</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 18 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/building-a-remote-kubernetes-development-environment.html</guid><description>Minikube 是 Kubernetes 的单机发行版本，适用于产品体验和日常开发。这里使用 Minikube 搭建开发环境，将 Kubernetes 搭建在 CentOS 云服务器，本地使用 OS X 进行远程开发。 1. 云服务器安装 Minikube 在 Minikube 的 GitHub 版本页面，找到合适的版本，进行安装。 以 CentOS 为例，执行命令: 1 curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.2.0/minikube-linux-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo cp minikube /usr/local/bin/ &amp;amp;&amp;amp; rm minikube minikube 是一</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>研发</category><category>环境</category><category>实践</category></item></channel></rss>
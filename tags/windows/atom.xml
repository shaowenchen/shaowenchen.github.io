<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Windows on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/windows/</link><description>Recent content in Windows on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 14 Jun 2020 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/windows/atom.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Windows 节点动态提供 Jenkins Agent</title><link>https://www.chenshaowen.com/blog/windows-node-to-dynamicly-provide-jenkins-agent-on-k8s.html</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 14 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/windows-node-to-dynamicly-provide-jenkins-agent-on-k8s.html</guid><description>在前面两篇文档，在 Kubernetes 上动态创建 Jenkins Slave 和 Kubernetes 添加 Windows 节点提供 Jenkins 构建动态 Agent 的基础之上，本篇文档主要尝试在 Kubernetes 上动态提供 Windows 构建 Agent 。 1. 新增流水线 Kubernetes 与 Jenkins 集成部分可以参考上面的两篇文档，这里直接新建两条流水线进行测试。 windows - jenkins 内置的流水线示例 1 2 3 4 5 6 7 8 9 10</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>Kubernetes</category><category>Windows</category><category>DevOps</category></item><item><title>Kubernetes 添加 Windows 节点</title><link>https://www.chenshaowen.com/blog/add-windows-node-for-k8s.html</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 13 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/add-windows-node-for-k8s.html</guid><description>这里主要使用 Windows 节点作为 Worker，而 Master 控制平面依然在 Linux 。 1. 系统配置 1.1 Kubernetes 控制平面 Kubernetes 自 1.14 版本，增加了对 Windows 节点生产级的支持。由于微软官方文档主要提供的是 flannel 网络插件的安装方式，这里建议 Kubernetes 也采用 flannel 插件。 查看当前集群 Kubernetes 版本 1 2 3 4 kubectl version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;17&amp;#34;, GitVersion:&amp;#34;v1.17.6&amp;#34;, GitCommit:&amp;#34;d32e40e20d167e103faf894261614c5b45c44198&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-05-20T13:16:24Z&amp;#34;,</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Windows</category><category>节点</category><category>安装</category></item><item><title>Windows 7 下使用 MiniKube 学习 Kubernetes</title><link>https://www.chenshaowen.com/blog/how-to-use-minikube-under-windows7.html</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 23 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-minikube-under-windows7.html</guid><description>1. 基本概念 1.1 Kubernetes Kubernetes（简称，K8s），前身是 Google 的 Borg，是用于自动部署、扩展和管理容器化应用程序的开源系统。 提供的功能有： 容器的自动化部署 自动化扩缩容 自动化应用/服务升级 容器成组，对外提供服务，支持负载均衡 服务的健康检查，自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Kubernetes</category><category>Windows</category><category>MiniKube</category></item><item><title>Windows 7 下 Docker 使用问题</title><link>https://www.chenshaowen.com/blog/some-tips-under-windows7-using-docker.html</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 21 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-tips-under-windows7-using-docker.html</guid><description>1. 自定义 docker-machine 位置 Windows 7 下使用 docker ，默认将 docker-machine 存放在 C:\users\your name\.docker\machine\machines 目录。 为了不占用系统盘存储空间，可以通过如下方法修改： 如果还没有创建虚拟机，可以通过设置 MACHINE_STORAGE_PATH 环境变量指定。 然后，运行 Docker Quickstart Termina，创建运行 docker-machine。 如果已经创建虚拟机，则</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Windows</category><category>问题</category></item><item><title>Windows 下正确使用 Vim 的方式</title><link>https://www.chenshaowen.com/blog/correct-way-to-use-vim-on-windows.html</link><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 12 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/correct-way-to-use-vim-on-windows.html</guid><description>之前使用过 Gygwin，也是用过 Git Bash。但在 Vim 面前，这两货都不好使，最终选择了 MSYS2 作为 Console 端。 1. Cygwin、MinGW、MSYS2 比较 在 Windows 下，使用 Vim 的关键在于找到一个合适的 Console。在安装 Vim 插件时，合适的 Console，能帮你避开大</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Vim</category><category>工具</category><category>Windows</category></item><item><title>Windows 下 Vim 安装与配置</title><link>https://www.chenshaowen.com/blog/vim-installation-and-configuration-on-windows-os.html</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Mon, 06 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/vim-installation-and-configuration-on-windows-os.html</guid><description>1. Vim 简介 Vim 是基于 vi 发展出来的一个编辑器，第一个版本由布萊姆·米勒在 1991 年发布。最初的名称是 Vi IMitation，随着功能的不断增加，正式更名为 Vi IMproved。 上面是常见编辑器的学习曲线。对于大多数用户， Vim 有着比较陡峭的学习曲线。也就是说刚</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Vim</category><category>工具</category><category>Windows</category></item><item><title>Python2 源码学习之 Windows 编译</title><link>https://www.chenshaowen.com/blog/compiling-python2-source-code-under-windows.html</link><pubDate>Fri, 09 Mar 2018 11:22:55 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/compiling-python2-source-code-under-windows.html</guid><description>1. 编译器准备 准备 Python 源码 在 Python 的官网，下载需要进行编译的 Python 版本源代码。这里选择的是 Python 2 的最新版本 Python-2.7.14.tar.xz，点击前往。 准备编译器 在 Windows 上，Python 2.7 的源代码内置的项目工程，支持 Visual Studio 2008、2010 打开。当然，V</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>源码</category><category>Windows</category></item></channel></rss>
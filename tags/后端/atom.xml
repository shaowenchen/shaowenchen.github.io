<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>后端 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%90%8E%E7%AB%AF/</link><description>Recent content in 后端 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Thu, 15 Nov 2018 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%90%8E%E7%AB%AF/atom.xml" rel="self" type="application/rss+xml"/><item><title>Django 全栈优化指南</title><link>https://www.chenshaowen.com/blog/django-full-stack-optimization-guide.html</link><pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 15 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-full-stack-optimization-guide.html</guid><description>由于数据量剧增，系统响应很慢。对应用系统进行了一系列的优化工作，系统响应时间得到了数量级级别的优化效果。总体看，在压缩文件、加快网络访问方面的优化，对前端性能有显著提升效果。在存储过程、缓存、逻辑代码方面的优化，对后端性能提升有显著效果。本</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>优化</category><category>前端</category><category>后端</category><category>指南</category></item><item><title>前后端对称加密传输 - AES</title><link>https://www.chenshaowen.com/blog/symmetric-encrypted-transmission-of-aes.html</link><pubDate>Wed, 26 Jul 2017 18:52:18 +0000</pubDate><atom:modified>Wed, 26 Jul 2017 18:52:18 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/symmetric-encrypted-transmission-of-aes.html</guid><description>1.基本概念 对称加密： 对称加密是，采用单密钥密码系统的加密方法，同一个密钥同时用作信息的加密和解密。由于速度快，常用于加密大量数据的传输。 DES（Data Encryption Standard），数据加密标准： DES的密钥长度是56比特，算法的理论安全强度是\</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>安全</category><category>前端</category><category>后端</category></item><item><title>Django 信号</title><link>https://www.chenshaowen.com/blog/signal-of-django.html</link><pubDate>Thu, 13 Jul 2017 13:06:10 +0000</pubDate><atom:modified>Thu, 13 Jul 2017 13:06:10 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/signal-of-django.html</guid><description>1. 基本概念 Django内置了一个信号分发器。信号可以帮助解耦程序模块。在应用中其他地方发生某事件时，通知指定函数。信号允许某些 senders 通知一组 receivers 已经发生的行为。 2. 信号使用 2.1 声明信号 在使用信号之前，首先得创建信号实例，声明信号的接收参数列表。dja</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>后端</category><category>Python</category></item><item><title>Django 类视图</title><link>https://www.chenshaowen.com/blog/class-based-view-of-django.html</link><pubDate>Tue, 11 Jul 2017 16:36:56 +0000</pubDate><atom:modified>Tue, 11 Jul 2017 16:36:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/class-based-view-of-django.html</guid><description>Django中有两种视图，一种是函数式视图，另一种是类视图。视图的作用主要是，用于填充逻辑，返回响应体。函数式视图难以扩展，代码复用率低。而类视图可以利用继承、Mixins，快速复用、扩展功能。本文主要讨论了，Django对类视图的处理逻辑</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>后端</category><category>Python</category><category>类视图</category></item><item><title>Django REST Framework 权限管理</title><link>https://www.chenshaowen.com/blog/permissions-of-django-rest-framework.html</link><pubDate>Fri, 07 Jul 2017 06:47:19 +0000</pubDate><atom:modified>Fri, 07 Jul 2017 06:47:19 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/permissions-of-django-rest-framework.html</guid><description>1. DRF的权限管理 Django REST Framework的权限管理包括两个部分。 一个是认证Authentication方式。指定对用户进行鉴权的方式，获取request.user。 一个是权限控制Permissions。针对Django资源、用户类别进行权限</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>后端</category><category>安全</category><category>API</category><category>权限</category></item><item><title>Django 第三方组件 List</title><link>https://www.chenshaowen.com/blog/third-party-component-list-of-django.html</link><pubDate>Thu, 06 Jul 2017 09:27:50 +0000</pubDate><atom:modified>Thu, 06 Jul 2017 09:27:50 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/third-party-component-list-of-django.html</guid><description>Awesome-Django Django应用、项目和资源集合 Django-Packages 大量Django第三方组件。 Django-Mptt 在数据库中存储层级数据结构。 Django-Rest-Framework 自动生成 RESTful API。 Django-Rest-Framework-Jwt 为Django-Rest-Framework提供Token鉴权。 Django-Tastypie 自动生成 RESTful API。 Django-Cors-Headers 解决跨域访问的问题。 Django-Ckeditor Django富文</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>后端</category><category>组件</category></item><item><title>Django REST Framework 入门</title><link>https://www.chenshaowen.com/blog/101-of-django-rest-framework.html</link><pubDate>Thu, 22 Jun 2017 23:50:15 +0000</pubDate><atom:modified>Thu, 22 Jun 2017 23:50:15 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/101-of-django-rest-framework.html</guid><description>笔者从事的SaaS开发，对开发效率有着比较高的要求。从项目立项、原型设计评估、需求确定、前端设计、后台开发到最后的验收，几个星期完成一次迭代。在敏捷开发的指导下，开始推行前后端分离模式。前端专注于页面和交互，后端专注于API接口。后端提供A</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>数据</category><category>后端</category><category>接口</category><category>Django</category><category>API</category></item><item><title>在前后端开发分离模式中，后端应该提升哪些能力</title><link>https://www.chenshaowen.com/blog/how-to-reflect-backend-value-in-front-and-backend-separation-mode.html</link><pubDate>Thu, 22 Jun 2017 11:14:21 +0000</pubDate><atom:modified>Thu, 22 Jun 2017 11:14:21 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-reflect-backend-value-in-front-and-backend-separation-mode.html</guid><description>最近几年，随着单页面Web应用的崛起，各种框架也不断涌现。 前端开始进入工程化、组件化的发展阶段。 单页面Web技术，扩展了前端的技术边界，前端也可以路由、渲染页面，不需要依赖后端。 后端的工作重点转向了单纯的数据API服务。 随着各种BaaS云服</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>管理</category><category>后端</category><category>价值</category></item><item><title>前后端分离 - Mock数据</title><link>https://www.chenshaowen.com/blog/mock-server.html</link><pubDate>Fri, 16 Jun 2017 21:10:54 +0000</pubDate><atom:modified>Fri, 16 Jun 2017 21:10:54 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/mock-server.html</guid><description>前后端分离开发中，当后端 API 没有完成时，前端无法继续调试。为了前后端能并行开发，前端需要一套 API 的接口环境，这个就是 Mock API 。下面的图，对开发流程进行了很好的顺理。如果没有 Mock 数据的环节，前后端的联调会消耗非常多的时间。 1. 何为 Mock ，模拟也 通常，后端提供</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>后端</category></item></channel></rss>
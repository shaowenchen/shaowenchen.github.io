<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>开发 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E5%BC%80%E5%8F%91/</link><description>Recent content in 开发 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 18 Sep 2021 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E5%BC%80%E5%8F%91/atom.xml" rel="self" type="application/rss+xml"/><item><title>多环境下的应用运行时定义</title><link>https://www.chenshaowen.com/blog/the-definition-of-application-runtime-under-multiple-env.html</link><pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 18 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-definition-of-application-runtime-under-multiple-env.html</guid><description>1. 为什么需要定义应用运行时 运行时更多选择。传统的应用运行时有，物理机、虚拟机、云主机。容器时代，常见的运行时有 Docker、Kubernetes。这些运行时，提供给我们的不再是一个单一的运行时选择。 应用拓扑更复杂。如果由 CMDB 统一存储应用的拓扑</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>标签</category><category>开发</category><category>环境</category></item><item><title>Vagrant 搭建 Django 开发环境</title><link>https://www.chenshaowen.com/blog/build-django-development-environment-using-vagrant.html</link><pubDate>Mon, 25 Sep 2017 21:56:05 +0000</pubDate><atom:modified>Mon, 25 Sep 2017 21:56:05 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-django-development-environment-using-vagrant.html</guid><description>Docker 解决了同一机器上的环境隔离问题，提高了运维部署的效率。 Vagrant 给开发提供一个统一的开发、测试、接近于完全隔离的环境。本文，主要讨论如何使用 Vagrant 搭建 Django 开发环境。版本：VirtualBox 5.0，Vagrant 1.8。 1. 基本概念 1.1 Vagrant Vagrant 是一个用来构建虚</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>Vagrant</category><category>工具</category><category>开发</category></item><item><title>程序员的编辑器 - Atom</title><link>https://www.chenshaowen.com/blog/programming-editor-atom.html</link><pubDate>Fri, 04 Aug 2017 23:46:56 +0000</pubDate><atom:modified>Fri, 04 Aug 2017 23:46:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/programming-editor-atom.html</guid><description>1. Atom 简介 Atom 是支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且在 GitHub 上开源的代码编辑器。立即前往 1.1 优缺点 主要优点 开发维护团队强大，开源项目，修复 Bug 速度快，生态圈成长速度快。 快捷键支持特别好，熟悉了各种快捷键后可以成倍提高生成效</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>开发</category></item><item><title>Jenkins 集成 GitHub 开发</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</link><pubDate>Tue, 18 Jul 2017 21:29:41 +0000</pubDate><atom:modified>Tue, 18 Jul 2017 21:29:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-github-development.html</guid><description>1. 基本概念 持续集成，Continuous Integration 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 持续交付，Continuous Delivery 持续交付在持续集成的基础上，将集成后</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>工具</category><category>开发</category><category>Jenkins</category><category>GitHub</category><category>DevOps</category></item><item><title>Django的权限控制</title><link>https://www.chenshaowen.com/blog/django-permissions-control.html</link><pubDate>Sun, 22 Jan 2017 09:23:45 +0000</pubDate><atom:modified>Sun, 22 Jan 2017 09:23:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-permissions-control.html</guid><description>1. Django内置权限管理 1.1 权限分类 Permission 用来定义用户User A对任务Task的权限。 User 如果User A 对Model B有权限，那么User A 对Mode B中的全部实例都有相应权限。User对象的user_permission 字段用于管理用户的权限。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>开发</category><category>权限</category><category>Python</category></item><item><title>什么是 DevOps</title><link>https://www.chenshaowen.com/blog/what-is-devops.html</link><pubDate>Sat, 31 Dec 2016 13:01:05 +0000</pubDate><atom:modified>Sat, 31 Dec 2016 13:01:05 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-devops.html</guid><description>1. 概览 DevOps（Development和Operations的组合词）是一种重视「软件开发人员（Dev）」和「IT运维技术人员（Ops）」之间沟通合作的文化、运动。透过自动化「软件交付」和「架构变更」的流程，来使得构建、测试、发布软件能</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>开发</category><category>思考</category><category>DevOps</category><category>什么是</category></item><item><title>Chrome 扩展开发</title><link>https://www.chenshaowen.com/blog/how-to-develop-chrome-plugin.html</link><pubDate>Sun, 04 Dec 2016 15:19:06 +0000</pubDate><atom:modified>Sun, 04 Dec 2016 15:19:06 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-develop-chrome-plugin.html</guid><description>1. Chrome增强功能的方式：扩展、插件、应用 Google Chrome（谷歌浏览器）发展至今，已经不仅仅是一个浏览器，更像一个平台，可以个性化的安装自己需要的服务，同时也可以通过它来发布自己提供的服务。目前主要有三种方式来扩展浏览器的功能： 2. 扩展（E</description><dc:creator>微信公众号</dc:creator><category>开发</category><category>前端</category><category>Chrome</category><category>扩展</category></item></channel></rss>
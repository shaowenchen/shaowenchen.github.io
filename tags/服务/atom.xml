<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>服务 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%9C%8D%E5%8A%A1/</link><description>Recent content in 服务 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Wed, 16 Sep 2020 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%9C%8D%E5%8A%A1/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用镜像部署 Hexo 静态页面</title><link>https://www.chenshaowen.com/blog/deploy-static-server-by-docker-image.html</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 16 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/deploy-static-server-by-docker-image.html</guid><description>1. 为什么采用镜像独立部署 更好的 SEO 使用 Github Pages ，部署静态网站非常方便。一次配置，每次提交都可以自动部署更新。再加上 jsDelivr、Cloudflare 加速，在免费方案中，已经生产可用。 无奈的是，百度搜索引擎对 Github Pages 网站，收录极慢，甚至不收录。即使</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Hexo</category><category>镜像</category><category>服务</category><category>静态</category></item><item><title>终于等到你 - GitHub 镜像仓库服务(ghcr.io)</title><link>https://www.chenshaowen.com/blog/github-container-registry.html</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Sep 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/github-container-registry.html</guid><description>1. Github Container Registry 9 月 1 日，GitHub 宣布 Github Container Registry 开始公测，测试期间提供免费、无限容量的 Docker 镜像仓库服务。 再也不用担心，docker.io 一言不合清理镜像了。真好真香！ GitHub 正在以托管代码仓库为切入点，逐步覆盖整个研发工具链，打造一站式 DevOps 平台。项目管理有 Issues</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>镜像</category><category>服务</category></item><item><title>微服务设计</title><link>https://www.chenshaowen.com/blog/book/microservice-design.html</link><pubDate>Tue, 16 Apr 2019 08:47:38 +0000</pubDate><atom:modified>Tue, 16 Apr 2019 08:47:38 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/microservice-design.html</guid><description>作者: [英] Sam Newman 出版年: 2016-5 ISBN: 9787115420268 Notes: 主要回答了一系列关于微服务的问题。什么是微服务，微服务具有什么特点，系统是如何演化的，如何划分服务，集成、部署、测试策略。 对整个微服务介绍比较全面，很多观点能引起我的共鸣。适合对现有项目不满，准备尝试微服务的</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>服务</category><category>架构</category></item><item><title>无状态服务</title><link>https://www.chenshaowen.com/blog/stateless-service.html</link><pubDate>Wed, 03 Jan 2018 17:22:45 +0000</pubDate><atom:modified>Wed, 03 Jan 2018 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/stateless-service.html</guid><description>1.问题描述 背景：一个 Django 开发的 SaaS 应用，对外提供文档服务功能。其中，搜索功能通过 Django Haystack 实现。 问题：搜索功能有时可用，有时不可用。多次测试，发现可用和不可用会交替出现，出现概率各占约 50%。 补充一下搜索功能实现的细节： Django Haystack 在提供搜索功能之前，需要</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>服务</category><category>PaaS</category><category>SaaS</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (6) uWSGI、Django</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-6.html</link><pubDate>Sun, 24 Sep 2017 18:03:22 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 18:03:22 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-6.html</guid><description>1. 目录结构 django-devops-uwsgi 目录是打包 uWSGI 和 Django 的镜像编译文件。在镜像中安装 uWSGI、pip、virtualenv等必要的程序包。 在使用镜像创建容器时，执行 start.sh 脚本， 创建 Python 虚拟运行环境，从 Django 的 requirements.txt 安装依赖包，最后启动 uWSGI 监听端口，等待请求。 django-devops-compose/www/app 目录，用于放置 Django 的代码</description><dc:creator>微信公众号</dc:creator><category>Docker</category><category>Django</category><category>服务</category><category>工具</category><category>博文</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (5) Nginx</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-5.html</link><pubDate>Sun, 24 Sep 2017 14:34:35 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 14:34:35 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-5.html</guid><description>1. 目录结构 1 2 3 4 5 6 7 8 9 10 11 12 ├── django-devops-nginx │ ├── Dockerfile │ └── nginx.repo ├── django-devops-compose │ ├── docker-compose.yml │ ├── www │ ├── conf │ │ ├── nginx.conf │ ├── log │ │ ├── nginx │ │ │ ├── access.log │ │ │ ├── error.log 每个服务的镜像 Dockerfile，单独放在一个文件夹。django-devo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category><category>Nginx</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (4) 项目组织</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-4.html</link><pubDate>Sun, 24 Sep 2017 13:32:40 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 13:32:40 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-4.html</guid><description>1. 部署架构 浏览器访问一个页面的程序处理流程： (1)，浏览器向 Nginx 发起一个请求，如果匹配到 Nginx 的静态 URL，比如 /static 目录下的 js、css、404.html 等文件，那么 Nginx 直接返回文件。其他请求 URL，通过 uwsgi_pass 配置转给 uWSGI 处理。 (2)，uWSGI 解析请求头</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (3) Docker Compose</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-3.html</link><pubDate>Sat, 23 Sep 2017 19:56:03 +0000</pubDate><atom:modified>Sat, 23 Sep 2017 19:56:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-3.html</guid><description>1. 基本概念 Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。使用 Docker Compose，可以在一个文件中定义一个多容器应用，然后使用一条命令来启动你的应用，完成一切准备工作。 Docker Compose 定位是 &amp;lsquo;defining and running complex applications with Docker&amp;rsquo;，前身是 Fig，兼容 Fig 的模板文件</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (2) Dockerfile</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-2.html</link><pubDate>Fri, 22 Sep 2017 19:52:27 +0000</pubDate><atom:modified>Fri, 22 Sep 2017 19:52:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-2.html</guid><description>1. 基本概念 Dockerfile 是一些列构建 Docker 镜像的指令集合。Docker 通过读取 Dockerfile 指令自动构建镜像。Dockerfile 类似于 Makefile，都是一种文本文件，按照构建镜像顺序组织所有的指令。 Docker 镜像的构建命令： 1 docker build . 这条命令中，Docker CLI 的处理流程如</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (1) 环境搭建</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-1.html</link><pubDate>Thu, 21 Sep 2017 09:38:47 +0000</pubDate><atom:modified>Thu, 21 Sep 2017 09:38:47 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-1.html</guid><description>Vagrant 适合用来管理虚拟机，而 Docker 适合用来管理应用环境。为了更好地模拟真实运行环境，本系列文章借助 Docker 和 Docker Compose 搭建 Nginx + uWSGI+ Django + MySQL + Redis + Rabbit 的开发环境。 1. 基本概念 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包应用以及依赖</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>PaaS 平台提供的免费 APP 域名服务</title><link>https://www.chenshaowen.com/blog/free-app-domain-name-service-of-paas-platform.html</link><pubDate>Tue, 05 Sep 2017 19:00:58 +0000</pubDate><atom:modified>Tue, 05 Sep 2017 19:00:58 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/free-app-domain-name-service-of-paas-platform.html</guid><description>服务商 域名 谷歌 Google App Engine appspot.com 二级域名 新浪 Sina App Engine sinaapp.com 二级域名 百度 Baidu App Engine duapp.com 二级域名 Heroku herokuapp.com 二级域名 AWS Elastic Beanstalk elasticbeanstalk.com 二级域名 OpenShift rhcloud.com 二级域名 DaoCloud daocloud.io 二级域名 时速云 TenxCloud tenxapp.com 二级域名 灵雀云 Alauda myalauda.cn 二级域名</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>域名</category><category>服务</category><category>PaaS</category></item><item><title>统一登录服务</title><link>https://www.chenshaowen.com/blog/unified-login-service.html</link><pubDate>Tue, 04 Apr 2017 10:20:45 +0000</pubDate><atom:modified>Tue, 04 Apr 2017 10:20:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/unified-login-service.html</guid><description>平台目前包括多个子系统、多个版本，不同版本都是使用相同的运营系统。为了方便用户使用多个版本，我们需要绑定用户的QQ、微信帐号。此外，为了最大限度地防止由于某个登录系统故障而导致用户无法使用APP的情况，我们需要一个统一的帐号管理&amp;amp;登</description><dc:creator>微信公众号</dc:creator><category>转载</category><category>服务</category></item><item><title>微服务架构</title><link>https://www.chenshaowen.com/blog/micro-service.html</link><pubDate>Sun, 25 Dec 2016 00:19:01 +0000</pubDate><atom:modified>Sun, 25 Dec 2016 00:19:01 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/micro-service.html</guid><description>1. SOA 面向服务架构（SOA），阐述了对于复杂的企业IT系统，应按照不同的、可重用的粒度划分，将功能相关的一组功能提供者组织在一起为消费者提供服务，其目的是为了解决企业内部不同IT资源之间无法互联而导致的信息孤岛问题。 SOA的基本设计思想是：对</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>服务</category><category>架构</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>持续集成 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</link><description>Recent content in 持续集成 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 05 Aug 2018 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/atom.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins 集成 Robot Framework 自动化测试</title><link>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 05 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-integrated-robot-framework-testing.html</guid><description>1. 安装无头浏览器 1.1 CentOS 安装 Phantomjs 下载并解压 访问 Phantomjs ，找到 Download phantomjs-2.1.1-linux-x86_64.tar.bz2 的下载链接，并拷贝。 在 CentOS 执行命令: 1 2 3 4 5 wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 # 如果没有安装 bzip2 可能会报错 yum install bzip2.x86_64 tar -jxvf phantomjs-2.1.1-linux-x86_64.tar.bz2 mv phantomjs-2.1.1-linux-x86_64 /usr/local/ 添加到环境变量 1 vim /etc/profile 在行尾新增，如下内容 1 export PATH=$PATH:/usr/local/phantomjs-2.1.1-linux-x86_64/bin 使环境变量立即生效 1 source /etc/profile 查看 Phantomjs 版本号 1 phantomjs --version 安装完之</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>自动化</category><category>持续集成</category><category>测试</category><category>DevOps</category><category>Jenkins</category></item><item><title>常用的一些 CI 脚本</title><link>https://www.chenshaowen.com/blog/some-common-scripts-in-ci.html</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Jul 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-common-scripts-in-ci.html</guid><description>由于负责小组的 CI 公共事项，经常需要配置 CI 流程，或者帮助其他人解决一些问题，整理了一下常用的 CI 脚本，以方便查阅。 1. .gitlab-ci.yml 结构 下面是， GitLab CI 的配置文件结构。 .gitlab-ci.yml 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 一些前置脚本，完成激活环境等操作 before_script: - source /data/runner/node/bin/activate - which node &amp;amp;&amp;amp; node --version - which npm</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitLab</category><category>CI</category><category>DevOps</category><category>持续集成</category></item><item><title>GitLab CI 之前端 Webpack 实践</title><link>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</link><pubDate>Wed, 08 Nov 2017 09:15:56 +0000</pubDate><atom:modified>Wed, 08 Nov 2017 09:15:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</guid><description>从 GitLab 8.0 开始，GitLab 开始集成 CI（持续集成） 功能。只需要在服务器上添加一个 Runner，同时在项目中添加一个 .gitlab-ci.yml 文件，就可以进行 CI。在 GitLab 搭建与配置 中笔者记录了从零开始搭建 GitLab 服务的整个流程。在 GitLab CI 持续集成 中笔者交代了 GitLab CI 的一些基本概念，并</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>持续集成</category><category>工具</category><category>DevOps</category><category>GitLab</category><category>CICD</category></item><item><title>Jenkins Pipeline 使用及调试</title><link>https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html</link><pubDate>Mon, 14 Aug 2017 13:13:55 +0000</pubDate><atom:modified>Mon, 14 Aug 2017 13:13:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html</guid><description>1. 基本概念 master master 就是 Jenkins 安装和运行的地方，它负责解析 job 脚本，处理任务，调度计算资源。 agent agent 负责处理从 master 分发的任务，操作实际上是通过 executor 来执行的。 executor executor 就是执行任务的计算资源，它可以在 master 或者 agent 上运行。多个 executor 也可以合作执行一些任务。 step Jenkins 里面 job 中的最小单元</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>持续集成</category><category>DevOps</category><category>CICD</category><category>调试</category></item><item><title>GitLab CI 持续集成</title><link>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</link><pubDate>Sun, 13 Aug 2017 08:03:17 +0000</pubDate><atom:modified>Sun, 13 Aug 2017 08:03:17 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-practice-of-using-gitlab.html</guid><description>1. 基本概念 GitLab-CI：GitLab 提供的持续集成系统，管理项目的构建状态，通过 GitLab Runner 来执行构建任务。 GitLab-Runner：用于执行构建任务，.gitlab-ci.yml 的 script 部分的运行就是由 GitLab-Runner 来完成。 .gitlab-ci.yml：</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>工具</category><category>持续集成</category><category>GitLab</category></item><item><title>GitLab 搭建与配置</title><link>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</link><pubDate>Sat, 12 Aug 2017 00:51:07 +0000</pubDate><atom:modified>Sat, 12 Aug 2017 00:51:07 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/build-and-configure-of-gitlab.html</guid><description>1. 简介 GitLab 是一个利用 Ruby on Rails 开发的开源应用程序，实现了自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。 它拥有与 GitHub 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Demo</category><category>工具</category><category>管理</category><category>持续集成</category><category>GitLab</category><category>DevOps</category></item></channel></rss>
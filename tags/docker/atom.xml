<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Docker on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/docker/</link><description>Recent content in Docker on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Thu, 02 Feb 2023 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/docker/atom.xml" rel="self" type="application/rss+xml"/><item><title>排查构建镜像时 IO 慢问题</title><link>https://www.chenshaowen.com/blog/troubleshoot-slow-io-when-building-dockerfile.html</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/troubleshoot-slow-io-when-building-dockerfile.html</guid><description>1. 遇到的问题 项目介绍: 文件大小 5.6 GB 文件数量 529352 Dockerfile 1 2 3 FROM golang:1.13 COPY ./ /go/src/code 构建命令及输入如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 time DOCKER_BUILDKIT=1 docker build --no-cache -t test:v3 -f Dockerfile . --progress=plain #1 [internal] load build definition from Dockerfile #1 sha256:2a154d4ad813d1ef3355d055345ad0e7c5e14923755cea703d980ecc1c576ce7 #1 transferring dockerfile: 37B done #1 DONE 0.1s #2 [internal] load .dockerignore #2 sha256:9598c0ddacf682f2cac2be6caedf6786888ec68f009c197523f8b1c2b5257b34 #2 transferring context: 2B</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category><category>CICD</category><category>构建</category></item><item><title>Dockerfile 中 Run mv 比 cp 慢</title><link>https://www.chenshaowen.com/blog/run-mv-is-slower-than-cp-in-dockerfile.html</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><atom:modified>Mon, 30 Jan 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/run-mv-is-slower-than-cp-in-dockerfile.html</guid><description>不同于 CentOS、Ubuntu，我们感受到 mv 比 cp 快；在使用 Dockerfile 构建镜像时，使用 Run cp 会比 Run mv 更快。本篇将给出相关的一些测试、验证的数据结果。 1. 测试准备 机器环境 Ubuntu 20.04.1 LTS 32C 125Gi 由于是生产机器，上面会有些负载，因此测试会有偏差。我会多次测试，等结果稳定</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>容器</category><category>CICD</category></item><item><title>如何设置端口仅对指定 IP 开放访问</title><link>https://www.chenshaowen.com/blog/set-port-to-be-accessible-only-to-a-specified-ip.html</link><pubDate>Sat, 20 Aug 2022 08:00:00 +0000</pubDate><atom:modified>Sat, 20 Aug 2022 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/set-port-to-be-accessible-only-to-a-specified-ip.html</guid><description>1. 主机服务端口 1 2 iptables -I INPUT -p tcp --dport 80 -j DROP iptables -I INPUT -p tcp -s 1.2.3.4 --dport 80 -j ACCEPT 这里仅允许 1.2.3.4 访问本地主机的 80 端口。 2. Docker 服务端口 对于类似 docker run -d -p 80:80 shaowenchen/demo-whoami 运行的服务，上面的方法无效，需要在 DOCKER-USER 链中添加规则。 Docker 会将 iptables 规则添加到 DOCKER 链中，如果需要在 Docker 之前添加规则需要添加到 DOCKER-USER 链中</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Linux</category><category>安全</category><category>限制</category></item><item><title>迁移 Docker 存储到新的硬盘</title><link>https://www.chenshaowen.com/blog/how-to-migrate-docker-storage-to-new-disk.html</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Thu, 24 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-migrate-docker-storage-to-new-disk.html</guid><description>1. 硬盘格式化 查看新磁盘 1 fdisk -l 通常，第二块硬盘的名字会是 /dev/sdb 。 磁盘分区 1 fdisk /dev/sdb 会有提示输入参数： command (m for help):n Partition number(1-4):1 First cylinder (1-22800,default 1):Enter command (m for help):w 格式化磁盘为 ext4 1 mkfs.ext4 /dev/sdb 将磁盘挂载到指定目录 1 2 mkdir /data mount -t ext4 /dev/sdb /data 开机自动挂载目录 先找到设备的 UUID。 1 2 3 blkid |grep /dev/sdb /dev/sdb: UUID=&amp;#34;328a9d32-abb6-492a-aabe-b6a63583674d&amp;#34; TYPE=&amp;#34;ext4&amp;#34; 编辑 /etc/fstab 新</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>运维</category><category>硬盘</category></item><item><title>拉取 Dockerhub 镜像，无法连接 Cloudflare</title><link>https://www.chenshaowen.com/blog/cant-connect-cloudflare-while-pulling-docker-image.html</link><pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 12 Nov 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/cant-connect-cloudflare-while-pulling-docker-image.html</guid><description>1. 错误提示 在拉取镜像时，偶尔会碰到如下错误: 1 2 3 4 5 6 7 8 docker pull node:10.16-alpine 10.16-alpine: Pulling from library/node e7c96db7181b: Already exists 50958466d97a: Pulling fs layer 56174ae7ed1d: Pulling fs layer 284842a36c0d: Pulling fs layer error pulling image configuration: Get https://production.cloudflare.docker.com/registry-v2 /docker/registry/v2/blobs/sha256/b9/b95baba1cfdbfa8b789137179d8e fff08b9768f1906725a8758cf0c431b59621/data? verify=1636603895-lbb1QIruPZBdfgfhBZ95ArGK0wU%3D: dial tcp 104.18.124.25:443: i/o timeout 2. 主要解决办法 2.1 修改 DNS 地址 如果是 CentOS ，直接修改 /etc/resolv.conf 文件，新增一行 nameserver 8.8.8.8 即可。 如果是 Ubuntu ，需要修改 /etc/syste</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>/var/lib/docker 能不能挂载远端存储</title><link>https://www.chenshaowen.com/blog/can-we-mount-var-lib-docker-to-remote-storage.html</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/can-we-mount-var-lib-docker-to-remote-storage.html</guid><description>不能 1. 问题背景 基于 Kubernetes 构建可靠、稳定的运维系统时，虚拟机 (VM) 的销毁和新建是一种常态。VM 提供的是计算和内存资源，而使用外部存储，通过 StorageClass 提供给集群中的 PVC 消费。 在这样的背景下，如何快速初始化 VM 成为新的挑战。常见的思路是制作 Node 节点的 VM 镜像，提前将依赖</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>容器</category><category>存储</category><category>Kubernetes</category><category>能不能</category></item><item><title>Docker 20.10.6 拉取某些镜像报错 unlinkat</title><link>https://www.chenshaowen.com/blog/pull-images-unlinkat.html</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 29 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/pull-images-unlinkat.html</guid><description>使用的是 CentOS 7，内核版本 3.10.0-327 。 1. 查看当前 Docker 的版本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 docker version Client: Docker Engine - Community Version: 20.10.6 API version: 1.41 Go version: go1.13.15 Git commit: 370c289 Built: Fri Apr 9 22:46:01 2021 OS/Arch: linux/amd64 Context: default Experimental: true Server: Docker Engine - Community Engine: Version: 20.10.6 API version: 1.41 (minimum version 1.12) Go version: go1.13.15 Git commit: 8728dd2 Built: Fri Apr 9 22:44:13 2021 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.4.4 GitCommit: 05f951a3781f4f2c1911b05e61c160e9c30eaa8e runc: Version: 1.0.0-rc93</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>如何搭建一个私有的镜像仓库 mirror</title><link>https://www.chenshaowen.com/blog/how-to-run-a-private-registry-mirror.html</link><pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 29 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-run-a-private-registry-mirror.html</guid><description>Docker 的 Mirror 仅能加速 docker.io 的镜像，而不能加速私有仓库的镜像。 1. 为什么需要一个私有的镜像仓库 mirror 公网限速 dockerhub 拉取限制频率 减少拉取镜像时间 2. 创建一个 Registry 镜像加速服务 生成一个配置文件 version: 0.1 log: fields: service: registry storage: cache: blobdescriptor: inmemory filesystem: rootdirectory: /var/lib/registry http: addr: :5000 headers: X-Content-Type-Options: [nosniff] health: storagedriver: enabled: true interval: 10s threshold: 3 但这样启动的服务只能作为 Registry</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>容器</category><category>镜像</category></item><item><title>在 Dell OptiPlex 7080MT 上安装 macOS 操作系统</title><link>https://www.chenshaowen.com/blog/how-to-install-macos-on-dell-optiplex-7080.html</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 26 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-install-macos-on-dell-optiplex-7080.html</guid><description>大概是十年前，我在笔记本上安装过 macOS。当时最头疼的是只有特定的硬件才能安装成功，而且还缺各种驱动程序。后来自己买了 Mac 笔记本，很长时间没有关注如何在通用机器上安装 macOS 。最近拿到了一台 Dell 台式机，配置还不错，又尝试了一下。本文主要是记录这一过</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Docker</category><category>PaaS</category></item><item><title>在 Kubernetes 中面向虚拟机节点分发文件、执行脚本</title><link>https://www.chenshaowen.com/blog/how-to-distribute-files-and-scripts-to-vm-under-kubernetes.html</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-distribute-files-and-scripts-to-vm-under-kubernetes.html</guid><description>1. 本文主要讨论什么 勿在浮沙筑高台。业务量的增长、业务形态的进化都需要坚实强劲的 IT 系统支撑。业务内容对市场是透明的，但是 IT 系统不是一朝一夕能建设完善的。未来公司之间的竞争主要也会来自于 IT 系统之间的竞争，能不能快速响应业务需求是决胜的关键。 IT 系</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Docker</category><category>PaaS</category></item><item><title>基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</title><link>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 25 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</guid><description>从原理上看，在 Kubernetes 集群中，Jenkins 都可以使用 Podman 进行镜像构建，本文主要以 Containerd 为例。 1. 去 Docker 给 CICD 带来新的挑战 在 CICD 场景下, 我们经常需要在流水线中构建和推送镜像。 在之前的文档 《在 Kubernetes 上动态创建 Jenkins Slave》 中, 我描述了通过挂载 /var/run/docker.sock 文件, 允许在 Docker 驱动的 Kubernetes</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category><category>Docker</category><category>Kubernetes</category></item><item><title>如何在主机上调试容器、在容器中操作主机</title><link>https://www.chenshaowen.com/blog/operate-host-in-container-and-debug-container-on-host.html</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 11 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/operate-host-in-container-and-debug-container-on-host.html</guid><description>1. 一个奇怪的需求 老板有个奇怪的需求，通过一个 kubeconfig 文件，获取主机的各种状态信息，比如进程列表、进程状态等。 第一反应就是，老板是不是不懂容器，容器怎么能这样玩，这样玩还要什么容器，内心万马奔腾。 直到最近遇到了一个命令行工具，才发现原来小丑是我自己</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>容器</category><category>安全</category><category>Kubernetes</category><category>Docker</category></item><item><title>如何绕过 DockerHub 拉取镜像限制</title><link>https://www.chenshaowen.com/blog/how-to-cross-the-limit-of-dockerhub.html</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 09 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-cross-the-limit-of-dockerhub.html</guid><description>1. DockerHub 限制 终究还是绕不过下面这个报错: 1 Error response from daemon: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit DockerHub 从 2020 年 11 月 2 日，正式开始限制非付费用户的拉取频率: 匿名用户，每 6 小时只允许 pull 100 次 已登录用户，每 6 小时只允许 pull 200 次 好吧，正常情况下，到这里就友尽了，不让用就不</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category><category>DockerHub</category></item><item><title>如何在 Docker 中使用 Docker</title><link>https://www.chenshaowen.com/blog/how-to-use-docker-in-docker.html</link><pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 21 Nov 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-docker-in-docker.html</guid><description>1. 典型适用场景 在 CI 中，通常会有一个 CI Engine 负责解析流程，控制整个构建过程，而将真正的构建交给 Agent 去完成。例如，Jenkins 、GitLab 均是如此。 如下图, 连接 CI Engine 的 Agent, 种类很多。这是为了满足不同项目对构建环境的要求。 同时 Agent 是动态的，构建时才需要，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Kubernetes</category><category>Containers</category><category>CI</category></item><item><title>多架构下的 Docker 镜像</title><link>https://www.chenshaowen.com/blog/docker-image-under-multi-arch.html</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 05 Jul 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/docker-image-under-multi-arch.html</guid><description>1. 开启 Docker 的 experimental 特性 这里先开启 Docker 的 experimental 特性，方便下文使用相关命令。 编辑文件 vim ~/.docker/config.json ，增加如下内容： 1 2 3 4 { &amp;#34;experimental&amp;#34;: &amp;#34;enabled&amp;#34;, &amp;#34;debug&amp;#34;: true } 注意，这里不是 /etc/docker/daemon.json 文件，也不需要重启 Docker 。 2. Docker 镜像 从 Docker 1.10 、 Registry 2.3 开始，Docker 引入了 manifest 用于描述镜像的元数据。 2.1 Dockerfile 如何转换成镜像 如上图，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>给 Kubernetes 配置 Proxy</title><link>https://www.chenshaowen.com/blog/how-to-set-proxy-for-kubernetes.html</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 03 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-set-proxy-for-kubernetes.html</guid><description>通常，我们在主机上执行 export http_proxy/https_proxy 格式的命令，即可设置 Proxy 。但是主机上的设置在容器中并不会生效，下面提供了几种配置方法。 1. 配置 Docker 的代理 - Node 级 在需要使用 Proxy 的节点进行配置，下面以 Docker 为例： 创建配置文件 1 2 mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/https-proxy.conf 编辑配置文件，配置代理 [Service] Environment=&amp;#34;HTTP_PROXY=http://proxy.example.com:80/&amp;#34; Environment=&amp;#34;HTTPS_PROXY=https://proxy.example.com:443/&amp;#34; Environment=&amp;#34;NO_PROXY=localhost,127.0.0.1&amp;#34; 重启 Docker 1 2 systemctl</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Kubernetes</category><category>代理</category></item><item><title>你不知道的 Docker 使用技巧</title><link>https://www.chenshaowen.com/blog/docker-skills-you-do-not-notice.html</link><pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate><atom:modified>Wed, 18 Mar 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/docker-skills-you-do-not-notice.html</guid><description>1. 分阶段构建 编译项目需要借助一系列特定的工具，但在运行阶段并不需要这些工具。为了减小镜像体积，可以分阶段构建。在第一阶段进行构建，然后将编译生成的文件传入下一个阶段，生成更小体积的镜像。 1 2 3 4 5 6 7 8 9 10 11 FROM golang:1.12 as builder COPY / /go/src/github.com/shaowenchen/goproject WORKDIR /go/src/github.com/shaowenchen/goproject RUN CGO_ENABLED=0 GO111MODULE=on GOOS=linux GOARCH=amd64 GOFLAGS=-mod=vendor go</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Tips</category></item><item><title>使用 Docker 运行 Tensorflow</title><link>https://www.chenshaowen.com/blog/run-tensorflow-on-docker.html</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate><atom:modified>Thu, 05 Mar 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/run-tensorflow-on-docker.html</guid><description>前面写过一篇文档，如何在 CentOS 安装 GPU 驱动 ，这篇就来看看怎么利用 Docker 运行 Tensorflow 。 1. 检查当前 CPU 支持的 Tensorflow 版本 在不支持 AVX 指令的 CPU 上，运行 Tensorflow &amp;gt; 1.15 版本时，会报错，Illegal instruction (core dumped)。 执行检测命令： 1 2 3 cat /proc/cpuinfo | grep avx flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GPU</category><category>Tensorflow</category><category>Docker</category></item><item><title>如何在 CentOS 安装 GPU 驱动</title><link>https://www.chenshaowen.com/blog/how-to-install-gpu-driver-in-centos.html</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 15 Feb 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-install-gpu-driver-in-centos.html</guid><description>以 CentOS 7.7，Tesla P100 GPU 为例。 1. 基础环境准备 安装 lspci 命令 1 yum install -y pciutils 检查 GPU 是否支持 CUDA 1 2 3 lspci | grep -i nvidia 00:09.0 3D controller: NVIDIA Corporation GP100GL [Tesla P100 PCIe 12GB] (rev a1) 支持 CUDA 的 GPU 列表：https://developer.nvidia.com/cuda-gpus 检查系统是否支持 CUDA 1 2 3 4</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>GPU</category></item><item><title>开发 Tips（19）</title><link>https://www.chenshaowen.com/blog/developing-tips-19.html</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Jan 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-19.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. macOS 快速切换不同 Kubernetes 环境 涉及 Kubernetes 相关开发时，经常需要在多个集群之间切换。配置多集群 context 是一个选择，但是如果集群在不断重置，可以试下如下方法： 在 ~/.profile 文件中定义一系列相关 function，切换时只需要执行 on_cluster_name 即可</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Kubernetes</category><category>环境</category><category>Docker</category></item><item><title>Docker 如何拉取镜像</title><link>https://www.chenshaowen.com/blog/how-docker-pull-images.html</link><pubDate>Fri, 06 Sep 2019 08:00:00 +0000</pubDate><atom:modified>Fri, 06 Sep 2019 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-docker-pull-images.html</guid><description>1. docker pull 拉取镜像 使用 docker pull {IMAGE_NAME} 拉取镜像时，有两种情况: IMAGE_NAME 前缀指向 registry Docker 会将 IMAGE_NAME 识别为指定仓库提供的镜像。例如，myregistry.io/space1/image1:latest ，Docker 会去 myregistry.io 指向的服务器请求镜像数据。一个 Docker 镜像分为很多层，如果</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category></item><item><title>使用 S2I 构建云原生应用</title><link>https://www.chenshaowen.com/blog/using-s2i-to-build-cloud-native-applications.html</link><pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Mon, 26 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-s2i-to-build-cloud-native-applications.html</guid><description>1. S2I 能解决什么问题 可以预见的是，未来大量的应用会以容器的方式进行部署。 容器平台关注的是镜像和容器，应用开发关注的是业务代码，而最终代码需要以镜像的方式进行部署。从代码到镜像，就是 Source To Image ，即 S2I 。 在前面的文章 PaaS 部署之 buildpack 中，描述到一个应用运行起来</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>S2I</category><category>Docker</category></item><item><title>如何使用 Jenkins、Docker、GitLab 搭建 Django 自动化部署流程</title><link>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</link><pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 25 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-jenkins-docker-gitlab-to-build-django-automated-deployment-process.html</guid><description>大公司的程序员，容易产生的错觉之一就是，误将平台能力当作自己的能力。在大团队，我们不应仅关注自己的一亩三分地，更需要了解平台的各个环节。一方面，有助于更好地利用平台相关特性，另一方面，也为了自我技术更好地成长。本文，介绍了如何使用 Jekin</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>GitLab</category><category>Jenkins</category><category>Docker</category><category>DevOps</category></item><item><title>开发 Tips（5）</title><link>https://www.chenshaowen.com/blog/developing-tips-5.html</link><pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 24 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-5.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. Python 内存分析方法 主要涉及四个工具： memory_profile：分析每一行代码的内存使用量 objgraph：跟踪内存中的对象的关系 guppy：在运行时跟踪堆的使用情况 pyrasite：向进程中注入代</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>Python</category><category>Docker</category><category>CentOS</category><category>性能</category></item><item><title>开发 Tips（4）</title><link>https://www.chenshaowen.com/blog/developing-tips-4.html</link><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 11 Nov 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/developing-tips-4.html</guid><description>主要记录最近遇到的一些开发问题，解决方法。 1. WhiteNoise 转发静态文件 Django 内置的静态文件服务器效率很低，而 WhiteNoise 是一个不错的替代品。具有如下特点： 通常用于 PaaS 服务 支持 wsgi 应用程序，针对 Django 进行了特殊适配 配合 CDN 使用，更佳 在 Gunicorn 配合下，使用 sendfile 系统调用，处理效率非常高 相比</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tips</category><category>文件</category><category>Django</category><category>CentOS</category><category>Docker</category></item><item><title>Windows 7 下使用 MiniKube 学习 Kubernetes</title><link>https://www.chenshaowen.com/blog/how-to-use-minikube-under-windows7.html</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sun, 23 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-minikube-under-windows7.html</guid><description>1. 基本概念 1.1 Kubernetes Kubernetes（简称，K8s），前身是 Google 的 Borg，是用于自动部署、扩展和管理容器化应用程序的开源系统。 提供的功能有： 容器的自动化部署 自动化扩缩容 自动化应用/服务升级 容器成组，对外提供服务，支持负载均衡 服务的健康检查，自</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Kubernetes</category><category>Windows</category><category>MiniKube</category></item><item><title>Windows 7 下 Docker 使用问题</title><link>https://www.chenshaowen.com/blog/some-tips-under-windows7-using-docker.html</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 21 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-tips-under-windows7-using-docker.html</guid><description>1. 自定义 docker-machine 位置 Windows 7 下使用 docker ，默认将 docker-machine 存放在 C:\users\your name\.docker\machine\machines 目录。 为了不占用系统盘存储空间，可以通过如下方法修改： 如果还没有创建虚拟机，可以通过设置 MACHINE_STORAGE_PATH 环境变量指定。 然后，运行 Docker Quickstart Termina，创建运行 docker-machine。 如果已经创建虚拟机，则</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Windows</category><category>问题</category></item><item><title>如何打包一个 Robot Framework 的 Docker 镜像</title><link>https://www.chenshaowen.com/blog/how-to-package-a-docker-image-of-robot-framework.html</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 18 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-a-docker-image-of-robot-framework.html</guid><description>为了方便 CI 集成 UI 自动化测试，需要将 Robot Framework 运行环境打包为 Docker 镜像。本篇主要内容是一些与打包过程相关的配置和脚本。 1. 打包目录结构 1 2 3 4 5 6 tree . ├── docker-compose.yml ├── Dockerfile ├── google-chrome.repo ├── requirements_base.txt 1.1 Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 FROM centos:7 ADD ./google-chrome.repo /etc/yum.repos.d/google-chrome.repo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>测试</category></item><item><title>如何使用 Docker 开发个人项目</title><link>https://www.chenshaowen.com/blog/how-to-use-docker-to-help-individual-projects.html</link><pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Mon, 16 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-docker-to-help-individual-projects.html</guid><description>1. 关于个人项目 为什么强调是个人项目？商业项目对代码托管、开发、运维部署等环节有着冗长的流程。而对于个人开发者，这样的流程成本过高，不利于快速项目迭代。 个人项目可能是一次学习的 Demo。完成一个领域 Demo 是很好的技术学习思路。从零开始搭建一个完整</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>Git</category></item><item><title>Prometheus</title><link>https://www.chenshaowen.com/blog/monitor-about-prometheus.html</link><pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate><atom:modified>Wed, 07 Feb 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/monitor-about-prometheus.html</guid><description>互联网的服务常依赖于成千上万的主机，而这些主机又部署在世界各地，再加上错综复杂的用户环境，要保证服务的稳定可靠，就需要对服务进行监控。监控的目的可以从这几个方面考虑：从系统维度，了解CPU、内存、硬盘使用情况；从网络监控维度，了解网络上行、</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>监控</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (6) uWSGI、Django</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-6.html</link><pubDate>Sun, 24 Sep 2017 18:03:22 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 18:03:22 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-6.html</guid><description>1. 目录结构 django-devops-uwsgi 目录是打包 uWSGI 和 Django 的镜像编译文件。在镜像中安装 uWSGI、pip、virtualenv等必要的程序包。 在使用镜像创建容器时，执行 start.sh 脚本， 创建 Python 虚拟运行环境，从 Django 的 requirements.txt 安装依赖包，最后启动 uWSGI 监听端口，等待请求。 django-devops-compose/www/app 目录，用于放置 Django 的代码</description><dc:creator>微信公众号</dc:creator><category>Docker</category><category>Django</category><category>服务</category><category>工具</category><category>博文</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (5) Nginx</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-5.html</link><pubDate>Sun, 24 Sep 2017 14:34:35 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 14:34:35 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-5.html</guid><description>1. 目录结构 1 2 3 4 5 6 7 8 9 10 11 12 ├── django-devops-nginx │ ├── Dockerfile │ └── nginx.repo ├── django-devops-compose │ ├── docker-compose.yml │ ├── www │ ├── conf │ │ ├── nginx.conf │ ├── log │ │ ├── nginx │ │ │ ├── access.log │ │ │ ├── error.log 每个服务的镜像 Dockerfile，单独放在一个文件夹。django-devo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category><category>Nginx</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (4) 项目组织</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-4.html</link><pubDate>Sun, 24 Sep 2017 13:32:40 +0000</pubDate><atom:modified>Sun, 24 Sep 2017 13:32:40 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-4.html</guid><description>1. 部署架构 浏览器访问一个页面的程序处理流程： (1)，浏览器向 Nginx 发起一个请求，如果匹配到 Nginx 的静态 URL，比如 /static 目录下的 js、css、404.html 等文件，那么 Nginx 直接返回文件。其他请求 URL，通过 uwsgi_pass 配置转给 uWSGI 处理。 (2)，uWSGI 解析请求头</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (3) Docker Compose</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-3.html</link><pubDate>Sat, 23 Sep 2017 19:56:03 +0000</pubDate><atom:modified>Sat, 23 Sep 2017 19:56:03 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-3.html</guid><description>1. 基本概念 Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。使用 Docker Compose，可以在一个文件中定义一个多容器应用，然后使用一条命令来启动你的应用，完成一切准备工作。 Docker Compose 定位是 &amp;lsquo;defining and running complex applications with Docker&amp;rsquo;，前身是 Fig，兼容 Fig 的模板文件</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (2) Dockerfile</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-2.html</link><pubDate>Fri, 22 Sep 2017 19:52:27 +0000</pubDate><atom:modified>Fri, 22 Sep 2017 19:52:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-2.html</guid><description>1. 基本概念 Dockerfile 是一些列构建 Docker 镜像的指令集合。Docker 通过读取 Dockerfile 指令自动构建镜像。Dockerfile 类似于 Makefile，都是一种文本文件，按照构建镜像顺序组织所有的指令。 Docker 镜像的构建命令： 1 docker build . 这条命令中，Docker CLI 的处理流程如</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>从零开始使用 Docker 打包 Django 开发环境 (1) 环境搭建</title><link>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-1.html</link><pubDate>Thu, 21 Sep 2017 09:38:47 +0000</pubDate><atom:modified>Thu, 21 Sep 2017 09:38:47 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-package-django-development-environments-using-docker-1.html</guid><description>Vagrant 适合用来管理虚拟机，而 Docker 适合用来管理应用环境。为了更好地模拟真实运行环境，本系列文章借助 Docker 和 Docker Compose 搭建 Nginx + uWSGI+ Django + MySQL + Redis + Rabbit 的开发环境。 1. 基本概念 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包应用以及依赖</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>服务</category><category>工具</category><category>Django</category></item><item><title>基于 Docker 的 Django 应用性能测试</title><link>https://www.chenshaowen.com/blog/django-application-performance-test-based-on-docker.html</link><pubDate>Thu, 07 Sep 2017 19:08:09 +0000</pubDate><atom:modified>Thu, 07 Sep 2017 19:08:09 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-application-performance-test-based-on-docker.html</guid><description>1. 网站性能基础指标 并发数： 服务器单位时间内处理的会话数量 吞吐率： 服务器单位时间内处理的请求数 响应时间： 用户从发出请求到接受完响应之间的总耗时，由网络传输耗时、服务处理耗时等多个部分组成 平均响应时间： 所有请求响应时间的平均值 2. 测试工具 性能测试</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>测试</category><category>Demo</category><category>Docker</category><category>Django</category></item><item><title>Docker 基础</title><link>https://www.chenshaowen.com/blog/basis-of-docker.html</link><pubDate>Fri, 28 Jul 2017 15:30:00 +0000</pubDate><atom:modified>Fri, 28 Jul 2017 15:30:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basis-of-docker.html</guid><description>1. 什么是Docker Docker诞生于2013年初，是dotCloud（ Docker.Inc前称）公司内部的一个业余项目，源代码托管在GitHub上，基于Go语言并遵从 Apache 2.0 开源协议。 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础</description><dc:creator>微信公众号</dc:creator><category>PaaS</category><category>DevOps</category><category>Docker</category><category>整理</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>CICD on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/cicd/</link><description>Recent content in CICD on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Thu, 28 Sep 2023 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/cicd/atom.xml" rel="self" type="application/rss+xml"/><item><title>一些程序构建的优化技巧</title><link>https://www.chenshaowen.com/blog/some-tips-for-optimizing-program-building.html</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 28 Sep 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-tips-for-optimizing-program-building.html</guid><description>持续更新中&amp;hellip; 1. Golang 使用 trimpath 移除编译路径，避免暴露编译路径信息 1 go build -gcflags=&amp;#34;all=-trimpath=${PWD}&amp;#34; -asmflags=&amp;#34;all=-trimpath=${PWD}&amp;#34; -o ./bin/opscli ./cmd/cli/main.go 添加之前异常输出路径 /Users/shaowenchen/Code/Github/ops/main.go，添加之后异常输出路径 main.go 。 -ldflags &amp;ldquo;-w -s&amp;rdquo; 移除调试信息，减小</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>DevOps</category><category>最佳实践</category></item><item><title>流水线构建时，凭证作用域问题</title><link>https://www.chenshaowen.com/blog/the-scope-of-credential-in-building.html</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 06 Jul 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-scope-of-credential-in-building.html</guid><description>在 client 中已经看到 Docker CLI 在给 Docker Daemon 发生构建上下文时，通过设置 X-Registry-Config 传递凭证，但在最近的构建反馈中，还是会出现一些无法解释的现象，本篇主要是进行一些基础的测试，以便于更好排查问题。 1. 宿主机 Docker 下构建 Docker Daemon 以 root 用户权限启动。 未登录任何账户 1 2 3 4 su ansible echo &amp;#34;FROM harbor.chenshaowen.com/private/test:v1&amp;#34; | sudo</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>DevOps</category><category>凭证</category><category>Kubernetes</category></item><item><title>Tekton 优化之定制集群调度器</title><link>https://www.chenshaowen.com/blog/custom-cluster-scheduler-to-optimize-tekton.html</link><pubDate>Wed, 26 Apr 2023 10:00:00 +0000</pubDate><atom:modified>Wed, 26 Apr 2023 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/custom-cluster-scheduler-to-optimize-tekton.html</guid><description>1. 受限的构建环境无法满足构建需求 Tekton 是基于 Kubernetes 集群的 CICD 引擎，相较于 Jenkins 更加云原生。说人话就是，更好开发插件、更好扩容、更好可观测性、更好玩儿。 由于代码仅能落盘公司内网，导致构建集群仅能部署于办公内网。这导致了很多受限： 硬件资源，没有弹性扩容能力 网</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>优化</category><category>Tekton</category><category>CICD</category><category>DevOps</category></item><item><title>Tekton 优化之无限 IO 能力</title><link>https://www.chenshaowen.com/blog/infinite-io-capability-for-tekton.html</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><atom:modified>Wed, 26 Apr 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/infinite-io-capability-for-tekton.html</guid><description>1. 关闭 affinity-assistant 之后 在前面的博文中，我通过关闭 affinity-assistant、使用 NFS 存储，平均每条流水线执行时间节约了近 30 秒。[1] affinity-assistant 的影响 在关闭之前，创建 Pod 的时序图如下: 由于 affinity-assistant 开启，每条流水线绑定在一个节点执行。 在关闭之后，创建 Pod 的时序图如</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>云原生</category><category>CICD</category><category>云原生</category></item><item><title>优化 Tekton 执行克隆任务慢问题，节省约 30 秒</title><link>https://www.chenshaowen.com/blog/optimizing-the-slow-of-tekton-clone-task.html</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/optimizing-the-slow-of-tekton-clone-task.html</guid><description>1. 现象 - Tekton 克隆代码任务慢 在执行克隆任务时，Tekton 很费时间，多仓库下一般都需要 2 分 30 秒左右。如下图: 仅克隆的流水线就需要执行 2 分钟 16 秒，而克隆脚本实际上仅执行 1-3 秒。其中大部分时间花在了哪里？能不能减少？这是本篇主要想讨论的问题。 2. 分析克</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>Kubernetes</category><category>CI</category><category>CICD</category><category>DevOps</category></item><item><title>排查构建镜像时 IO 慢问题</title><link>https://www.chenshaowen.com/blog/troubleshoot-slow-io-when-building-dockerfile.html</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/troubleshoot-slow-io-when-building-dockerfile.html</guid><description>1. 遇到的问题 项目介绍: 文件大小 5.6 GB 文件数量 529352 Dockerfile 1 2 3 FROM golang:1.13 COPY ./ /go/src/code 构建命令及输入如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 time DOCKER_BUILDKIT=1 docker build --no-cache -t test:v3 -f Dockerfile . --progress=plain #1 [internal] load build definition from Dockerfile #1 sha256:2a154d4ad813d1ef3355d055345ad0e7c5e14923755cea703d980ecc1c576ce7 #1 transferring dockerfile: 37B done #1 DONE 0.1s #2 [internal] load .dockerignore #2 sha256:9598c0ddacf682f2cac2be6caedf6786888ec68f009c197523f8b1c2b5257b34 #2 transferring context: 2B</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>镜像</category><category>CICD</category><category>构建</category></item><item><title>Dockerfile 中 Run mv 比 cp 慢</title><link>https://www.chenshaowen.com/blog/run-mv-is-slower-than-cp-in-dockerfile.html</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><atom:modified>Mon, 30 Jan 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/run-mv-is-slower-than-cp-in-dockerfile.html</guid><description>不同于 CentOS、Ubuntu，我们感受到 mv 比 cp 快；在使用 Dockerfile 构建镜像时，使用 Run cp 会比 Run mv 更快。本篇将给出相关的一些测试、验证的数据结果。 1. 测试准备 机器环境 Ubuntu 20.04.1 LTS 32C 125Gi 由于是生产机器，上面会有些负载，因此测试会有偏差。我会多次测试，等结果稳定</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Docker</category><category>容器</category><category>CICD</category></item><item><title>分阶段构建如何缓存第三方依赖</title><link>https://www.chenshaowen.com/blog/how-to-cache-third-party-package-whilie-building-in-stage.html</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-cache-third-party-package-whilie-building-in-stage.html</guid><description>非分阶段构建场景下，使用容器进行构建时，我们可以将容器中的缓存目录挂载到构建主机上，执行构建任务；然后将产物拷贝到运行镜像，制作应用镜像。但是在分阶段构建时，构建镜像和运行镜像在同一个 Dockerfile 中，这给优化第三方依赖的缓存带来了难度。 1. 创建一个 Vue 实</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>CI</category><category>DevOps</category><category>缓存</category><category>优化</category></item><item><title>Jenkins Agent 的几种通信方式</title><link>https://www.chenshaowen.com/blog/a-few-communication-methods-of-jenkins-agent.html</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 01 Nov 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-few-communication-methods-of-jenkins-agent.html</guid><description>1. SSH 连接方向: Master 主动连接 Agent 要求: Master 能通过 SSH 直连 Agent Agent 上启动了 SSHD 服务 Jenkins 安装 SSH Credentials Plugin、SSH Build Agents 插件 2. JNLP 连接方向: Agent 主动连接 Master 要求: Agent 能访问 Master Agent 需要 JVM 环境运行 Master 需要放开 50000（默认值）端口用于 Agent 通信 50000 端口是 Jenkins Master 的服务端口，不需要再运行</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>CICD</category></item><item><title>Jenkins为什么一直调度到同一个节点</title><link>https://www.chenshaowen.com/blog/why-does-jenkins-agent-like-going-to-the-same-node.html</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 02 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/why-does-jenkins-agent-like-going-to-the-same-node.html</guid><description>1. 问题背景 在 Jenkins 中添加了很多个构建节点使用同一个 Label 以供流水线使用，但是 Jenkins 却每次都倾向于在同一个节点进行构建。 这导致了并发问题，单个节点的压力过大，而其他节点空闲，负载极其不均衡。 2. 业务流水线的设计 上述问题的产生和业务流水线的设计有一定的关系。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>CICD</category><category>DevOps</category></item><item><title>使用腾讯云 Serverless 开发公众号后端</title><link>https://www.chenshaowen.com/blog/develop-a-wechat-backend-using-tencent-serverless.html</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 28 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/develop-a-wechat-backend-using-tencent-serverless.html</guid><description>1. Serverless 的使用场景 如果说云计算是希望资源能够像自来水一样，隋开随用、随关随停，那么 Serverless 就是云计算的未来方向之一。相较于 IaaS、Kubernetes 这些运行时，Serverless 提供更细粒度资源控制的同时，还能提供更大的弹性，允许开发者快速交付</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>Serverless</category><category>微信</category></item><item><title>基于 Tekton 的 CICD 平台</title><link>https://www.chenshaowen.com/blog/a-cicd-system-based-on-tekton.html</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-cicd-system-based-on-tekton.html</guid><description>1.背景 1.1 目前使用 Jenkins 遇到的问题 编排引擎不稳定 Jenkins 是由 Java 编写的编排引擎，在 Full GC 时会 Stop The World(STW)。在大规模构建时，STW 可能会导致 Jenkins 无法处理新的请求。 大量构建卡顿 Jenkins 使用磁盘文件存储数据，每条流水线、每次构建都会占用一个文件目录，产生大</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>DevOps</category><category>Tekton</category></item><item><title>如何远程触发 GitHub Action</title><link>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 25 Aug 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-trigger-github-action-remotely.html</guid><description>通常，我们需要在 GitHub 上进行一些操作，才能触发 GitHub Action。本篇将介绍一种通过 API 远程调用触发 GitHub Action 的方法。 1. 常见的几种触发 GitHub Action 的方式 下面是一个 GitHub Action 的示例: 1 2 3 4 5 6 7 name: GitHub Actions Demo on: [push, pull_request] jobs: Explore-GitHub-Actions: runs-on: ubuntu-latest steps: - run: echo &amp;#34;Hello World!&amp;#34; 在 on 关键字下，定义的就是触发 Workflow 执行的事件。</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>在 Tekton 中如何实现审批功能</title><link>https://www.chenshaowen.com/blog/how-to-implement-approval-function-in-tekton.html</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 24 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-implement-approval-function-in-tekton.html</guid><description>1. CICD 平台的基本功能 常见的 CICD 引擎并不适合直接提供给业务方使用。主要原因在于用户学习成本高、缺乏必要的鉴权、维护升级难度大。 我们通常会基于流程引擎，针对业务进行适配提高易用性，针对场景进行封装收敛复杂度，那么一个 CICD 平台需要具备哪些基本的功能呢？</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>Kubernetes</category><category>CICD</category><category>DevOps</category></item><item><title>如何定制自己的 Jenkins 镜像</title><link>https://www.chenshaowen.com/blog/how-to-customize-your-jenkins.html</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 05 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-customize-your-jenkins.html</guid><description>1. 如何部署 Jenkins 为了方面进行下面的测试，先介绍两种部署 Jenkins 的方式，这里使用的是 shaowenchen/jenkins:2.277.4 镜像。在生产环境中，需要替换为官方 jenkins/jenkins 镜像或自己定制的镜像。 1.1 docker-compose 运行 docker-compose.yaml 文件 version: &amp;#39;3&amp;#39; services: jenkins: image: shaowenchen/jenkins:2.277.4 container_name: jenkins restart: always network_mode: &amp;#34;bridge&amp;#34; environment: - JAVA_OPTS=&amp;#34;-Xms1Gi -Xmx4Gi&amp;#34; ports: - 8080:8080 - 50000:50000 - 2222:2222 environment: TZ: Asia/Shanghai volumes: - /Volumes/Data/jenkins_home:/var/jenkins_home 在本地创建一个目录 /Volumes/Data/jenkins_home 用于存储 Jenkins 的数据</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>CICD</category><category>Jenkins</category></item><item><title>Jenkins 在 Kubernetes 上的最佳实践</title><link>https://www.chenshaowen.com/blog/best-practices-for-jenkins-on-kubernetes.html</link><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Jun 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/best-practices-for-jenkins-on-kubernetes.html</guid><description>1. 配置较大的 -Xms -Xmx 参数 Jenkins 是由 Java 编写的编排引擎, 在 Full GC 时会 Stop The World(STW)。在大规模构建时, STW 可能会导致 Jenkins 无法处理新的请求。 为了避免频繁的 STW, 同时增大并发量, 建议设置较大的堆, -Xms3g -Xmx6g -XX:MaxRAM=6g。具体数值可以根据监控值来设置,</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>CICD</category><category>Jenkins</category></item><item><title>一个通用流水线设计</title><link>https://www.chenshaowen.com/blog/a-universal-design-for-pipeline.html</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 19 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-universal-design-for-pipeline.html</guid><description>1. 解耦引擎释放流水线能力 在设计系统时，我们常面临两难。是内敛复杂度，对外提供单一易用的功能；还是释放复杂度，将灵活归还用户。这非常考验产品能力。 设计 CICD 系统时，我们可以直接将 Jenkinsfile、PipelineRun 等概念直接抛给用户，让</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CloudNative</category><category>DevOps</category><category>CICD</category></item><item><title>Jenkins 与 Tekton 的对比</title><link>https://www.chenshaowen.com/blog/jenkins-vs-tekton.html</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><atom:modified>Sat, 01 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-vs-tekton.html</guid><description>下面是一个 Jenkins 与 Tekton 对比的列表: 功能 Jenkins Tekton 编程语言 Java Golang 开发插件语言 Java Shell、Yaml 流水线描述语言 Groovy、Shell Yaml、Shell 插件生态 很多插件，LDAP、GitLab 不足 插件数量 1500+ 100+ 插件之间的兼容性 可能会有冲突，不能随便升级 完</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CICD</category><category>Jenkins</category><category>Tekton</category></item><item><title>Tekton 如何接入物理机进行构建</title><link>https://www.chenshaowen.com/blog/how-to-add-physical-machines-to-tekton.html</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 28 Apr 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-physical-machines-to-tekton.html</guid><description>1. 为什么需要物理构建机 在文章《如何接入远程 macOS 物理机进行 Jenkins 流水线构建》中，我描述了在 Jenkins 中添加物理构建机的方法。这并不是我拍脑袋想的需求，而是当时真的有 ToB 的商业客户在咨询方案。 对于多端开发商来说，构建 Android、IOS、macOS、Arm 、</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Tekton</category><category>云原生</category><category>Kubernetes</category><category>CICD</category><category>DevOps</category></item><item><title>DevOps 工具链之 Lighthouse 介绍</title><link>https://www.chenshaowen.com/blog/lighthouse-of-devops-tool-chain.html</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 05 Mar 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/lighthouse-of-devops-tool-chain.html</guid><description>本文介绍一个 ChatOps 工具 Lighthouse, 主要内容来自官方文档 。Kubernetes 社区使用 Prow 驱动其在 GitHub 上的协作, 但是不适用于其他仓库。Lighthouse 普适于更多类型的 Git 仓库。 1. 什么是 Lighthouse Lighthouse 是一个基于 webhooks 的轻量级 ChatOps 工具 , 通过 Git 仓库的 webhooks 可以触发 Jenkins X 流水线 、Tekt</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>DevOps</category><category>Prow</category><category>Kubernetes</category><category>CICD</category><category>Lighthouse</category></item><item><title>基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</title><link>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 25 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html</guid><description>从原理上看，在 Kubernetes 集群中，Jenkins 都可以使用 Podman 进行镜像构建，本文主要以 Containerd 为例。 1. 去 Docker 给 CICD 带来新的挑战 在 CICD 场景下, 我们经常需要在流水线中构建和推送镜像。 在之前的文档 《在 Kubernetes 上动态创建 Jenkins Slave》 中, 我描述了通过挂载 /var/run/docker.sock 文件, 允许在 Docker 驱动的 Kubernetes</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category><category>Docker</category><category>Kubernetes</category></item><item><title>Tekton Hub 正式上线 - https://hub.tekton.dev/</title><link>https://www.chenshaowen.com/blog/tekton-hub-is-live.html</link><pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 24 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/tekton-hub-is-live.html</guid><description>原文由来自 Red Hat (CDF 成员) 的 Puneet Punamiya 撰写。 Tekton 是持续交付基金会 (CDF) 下的一个开源项目。它提供了一个以云原生构建 CI/CD 系统的框架。简单点说, 人们可以将整个 CI/CD 流水线定义为 Kubernetes 资源。 Tekton Pipelines 的核心是一个可复用的组件 - Task, 很容易共享。在 Tekton Catalog 仓库中包含了这些 Task 的列表。这些 Task 可</description><dc:creator>微信公众号</dc:creator><category>翻译</category><category>Tekton</category><category>CICD</category><category>DevOps</category></item><item><title>DevOps 工具链之 Argo CD</title><link>https://www.chenshaowen.com/blog/argocd-of-devops-tool-chain.html</link><pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Thu, 04 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/argocd-of-devops-tool-chain.html</guid><description>1. Argo CD 能解决什么问题 1.1 从 GitOps 说起 GitOps 起源于 Weaveworks 公司在 2017 年发表的一篇博客， GitOps - Operations by Pull Request 。在文中，Alexis 介绍了一种以 Git 为唯一事实来源的部署方式。 在 GitOps 实践中，我们需要将软件设施定义在 Git 仓库中进行管理。其中的软件设施，包括 IaaS、Kubernet</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>ArgoCD</category><category>Kubernetes</category><category>CICD</category></item><item><title>本地执行没问题, GitHub Actions 却一直报错</title><link>https://www.chenshaowen.com/blog/local-is-fine-but-error-in-github-actions.html</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 02 Feb 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/local-is-fine-but-error-in-github-actions.html</guid><description>1. 一个令人困惑的问题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name: Go on: [push, pull_request] jobs: build: name: CI runs-on: ubuntu-latest steps: - name: Set up Go 1.13 uses: actions/setup-go@v1 with: go-version: 1.13 - name: Check out code into the Go module directory uses: actions/checkout@v2 - name: Check pr is properly formatted run: diff -u &amp;lt;(echo -n) &amp;lt;(gofmt -d ./pkg ./cmd ./tools ./test) - name: Test &amp;amp; Build run: make all 上面是项目中 workflow 的一部分, 主要用来检测代码风格、执行单元测试、</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>CICD</category></item><item><title>10 个你该了解的 GitHub Actions 进阶技巧</title><link>https://www.chenshaowen.com/blog/10-tips-of-github-action.html</link><pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Sun, 31 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/10-tips-of-github-action.html</guid><description>如果你已经在使用 GitHub Actions ，那么阅读本文你将获得更多有趣而有用的打开方式。阅读完，我又给仓库新增了几个 workflow 。 1. workflow 执行时，传入参数 在执行 workflow 时, 允许在 GitHub Actions 页面输入参数，控制执行逻辑。我们可以将人工处理的逻辑，在 GitHub Actions 参数化执行，适用于持续部署场景。 1 2 3</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>CICD</category><category>DevOps</category></item><item><title>不限次数，单次最长 6 小时免费在线体验 Kubernetes</title><link>https://www.chenshaowen.com/blog/free-kubernetes-env-using-github-actions.html</link><pubDate>Wed, 20 Jan 2021 01:00:00 +0000</pubDate><atom:modified>Wed, 20 Jan 2021 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/free-kubernetes-env-using-github-actions.html</guid><description>1. 登录 Ngrok 获取一个 Authtoken 1.1 登陆 Ngrok 官网，获取 Authtoken 访问 Ngrok 官网，https://dashboard.ngrok.com/ , 可以使用 GitHub 或者 Google 账户登陆。 进入 Authentication 页面，找到自己的 Authtoken，如下图: 1.2 在 GitHub 项目下，配置 Secrets 在项目的 Settings 页面中，新增 Secrets</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>DevOps</category><category>CICD</category><category>demo</category></item><item><title>debugger-action 更新 v2 版支持 ngrok</title><link>https://www.chenshaowen.com/blog/a-debugger-for-actions-v2.html</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Wed, 20 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-debugger-for-actions-v2.html</guid><description>1. 什么是 Ngrok Ngrok 是一个内网穿透工具，能够将内网的服务，发布到公网上。下面这张图，可以很好地展示其功能: 相较于同类工具 Frp (需要同时运行 Server 和 Client )，Ngrok 将内网穿透做成了一个服务。只需要在 Ngrok 注册账户，获得 Authtoken ，启动 Client 就可以对外提供，本地服务的公网地</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>DevOps</category><category>CICD</category><category>demo</category></item><item><title>GitHub Actions 在线调试工具：debugger-action</title><link>https://www.chenshaowen.com/blog/a-debugger-for-actions.html</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Mon, 18 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-debugger-for-actions.html</guid><description>1. Debug 到想跑路 GitHub Actions 是 GitHub 在 2018 年 10 月推出的持续集成服务。对于开源项目，免费提供无限时长的构建时间，同时支持 Linux、MacOs、Windows 系统，非常招人喜爱。 但是，最近的一次经历改变了我的看法。我给同事的仓库，提交了一个 improvement: build and ci 的 commit ，用于完</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>Actions</category><category>DevOps</category><category>CICD</category><category>demo</category></item><item><title>使用 Terraform 和 GitHub Actions 对基础设施进行自动化安装测试</title><link>https://www.chenshaowen.com/blog/using-terraform-and-github-actions-to-test-iac.html</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 13 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/using-terraform-and-github-actions-to-test-iac.html</guid><description>1. 测试是海上的航标 项目越复杂、规模越大，越能体现测试的价值和重要性。 测试保证了方向的正确性。就像航行时，海上出现的航标，可以用来检验、纠正路线。便于掌舵人，随时了解动态，做出调整。 测试决定了迭代的速度。随着 Scrum 等敏捷开发方法的实践，交付的节奏</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Terraform</category><category>GitHub</category><category>CICD</category><category>Kubernetes</category></item><item><title>Tekton 概念篇 - 好大一盘棋</title><link>https://www.chenshaowen.com/blog/the-concept-of-tekton-a-big-game.html</link><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 12 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-concept-of-tekton-a-big-game.html</guid><description>1. 谈谈对 CICD 工具的审美 我在文档 软件产品是团队能力的输出 中提到，软件产品是解决方案的交付承载物，其优劣取决于团队对核心问题的理解。对领域有深入理解，交付的产品才有好的可能。CICD 是一个应用很广泛的领域，在不同的场景下，总有人在琢磨重复造轮子，</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>Tekton</category><category>CICD</category><category>思考</category></item><item><title>Daemon-less 镜像构建工具 - Kaniko</title><link>https://www.chenshaowen.com/blog/the-daemon-less-tools-of-kaniko.html</link><pubDate>Fri, 11 Dec 2020 08:00:00 +0000</pubDate><atom:modified>Fri, 11 Dec 2020 08:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-daemon-less-tools-of-kaniko.html</guid><description>1. daemon-less 镜像构建工具 1.1 什么是 daemon-less 镜像构建工具 在 CICD 流程中，经常会涉及镜像构建，常规的做法是使用 Docker in Docker 或者 Docker out of Docker 进行构建。详情可以参考文档：如何在 Docker 中使用 Docker 实际上，为了避免垄断，促进行业发展，基于 Docker 的镜像格式，早就指定了统一的 OCI 镜像格式规范。也就是</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>镜像</category><category>CICD</category><category>Kubernetes</category></item><item><title>如何给 GitHub Actions 添加自己的 Runner 主机</title><link>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 04 Dec 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-add-self-hosted-runners-to-github-action.html</guid><description>1. 什么是 GitHub Actions 在前面的文档中，我对 GitLab 提供的 CI 功能进行了实践，点击查看 。使用 GitLab 的好处是可以私有化部署、无限的私有仓库数量、CI 配置简单、能接入自建的 Runner 。但随着 GitHub 越来越开放，GitLab 的这些优势在逐步丧失。 从 CICD 的角度看，越接近 Git 仓库的功能，越贴</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>GitHub</category><category>CICD</category><category>DevOps</category><category>工具</category><category>研发</category></item><item><title>如何接入远程 macOS 物理机进行 Jenkins 流水线构建</title><link>https://www.chenshaowen.com/blog/how-to-run-the-pipeline-on-remote-osx.html</link><pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 22 Nov 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-run-the-pipeline-on-remote-osx.html</guid><description>本文同样适用于接入 ARM、MIPS 架构，FreeBSD、Windows 系统的物理机，如果 Jenkins 能连上构建机，可以跳过 Frp 部分。 1. 遇到的问题 在以 Kubernetes 为基础设施的场景下，Jenkins 构建流水线时，将为每一条流水线单独创建一个 Pod 用于构建。Pod 中的容器</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>macOS</category><category>CICD</category><category>CI</category><category>DevOps</category></item><item><title>如何使用 Terraform Provider 提供 Iac 级别的应用</title><link>https://www.chenshaowen.com/blog/how-to-use-terraform-to-provide-iac-platform.html</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 22 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-terraform-to-provide-iac-platform.html</guid><description>1. Terraform Vs Kubernetes 基础架构即代码（Iac) 基于不可变的基础架构，使用编排工具将基础架构文本化，允许像管理代码一样管理基础设施。 2018 年，我在从事 SaaS 开发，使用 Kubernetes 平台进行部署，这一年 Terraform 很火。2019 年，我开始从事 Kubernetes 的二次开发，才听说 Terraform 。现在网上 Terraform 相关的文档增</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Terraform</category><category>Iac</category><category>Kubernetes</category><category>DevOps</category><category>CICD</category><category>研发</category></item><item><title>Jenkins X 不是 Jenkins ，而是一个技术栈</title><link>https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><atom:modified>Sun, 16 Aug 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html</guid><description>1. Jenkins X 简介 Jenkins 依靠庞大的插件生态，占据了目前大部分的企业级 CICD 引擎的份额。但在云原生时代，Jenkins 也暴露出很多的问题，单点服务、磁盘存储、内存占用等。 Jenkins X 围绕 Kubernetes，提供了一种更适合云原生时代的 DevOps 方式。Jenkins X 不是 Jenkins</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>技术栈</category><category>Jenkins</category><category>Jenkins-X</category><category>DevOps</category><category>CICD</category><category>Terraform</category></item><item><title>DevOps 精要：业务视角</title><link>https://www.chenshaowen.com/blog/book/the-essentials-of-devops.html</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Tue, 23 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/book/the-essentials-of-devops.html</guid><description>作者:（俄）奥列格·斯克伦尼科（Oleg Skrynnik） 出版社: 清华大学出版社 出版年: 2020-05-01 ISBN: 9787302547143 Notes: 内容如题，书中主要阐述了业务视角中的 DevOps 。从起源到基础，从原则到实践，你都可以从中有所收获。DevOps 的基础是精益生产（丰田流水线）和敏捷开发，</description><dc:creator>微信公众号</dc:creator><category>书籍</category><category>DevOps</category><category>CICD</category><category>研发</category></item><item><title>Jenkins 插件开发</title><link>https://www.chenshaowen.com/blog/how-to-develop-the-plugin-of-jenkins.html</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><atom:modified>Sat, 20 Jun 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-develop-the-plugin-of-jenkins.html</guid><description>使用 Jenkins 总是离不开各种各样的插件，为了更好的实践 DevOps ，我们也应该具备开发插件的能力，使整个流程都能够在 Jenkins 中汇合。 1. Jenkins 插件 1.1 插件的生态 Jenkins 前身 Hudson 始于 2004 ，历经 16 年，依然作为主流的 CI/CD 引擎。除了，Jenkins 提供了 Master-Agent 分布式构建、Pipeline 编排的功</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Jenkins</category><category>DevOps</category><category>CICD</category></item><item><title>GitHub 三种合并代码方式的差别</title><link>https://www.chenshaowen.com/blog/the-difference-of-tree-ways-of-merging-code-in-github.html</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><atom:modified>Mon, 18 May 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-difference-of-tree-ways-of-merging-code-in-github.html</guid><description>1. Create a merge commit PR Commit 记录： 1 2 commit c1 commit c2 集成分支 Commit 记录： 1 2 3 commit PR #NUM commit c2 commit c1 Create a merge commit 会将 PR 中的全部 Commit 记录完整带到集成分支中，同时增加一条 PR Commit 信息。 2. Squash and merge PR Commit 记录： 1 2 commit s1 commit s2 集成分支 Commit 记录： 1 commit PR #NUM Squash and merge 合并之后，集成分支只会增加一条 Commit 记录。观感</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>研发</category><category>GitHub</category><category>DevOps</category><category>CICD</category></item><item><title>DevOps 工具链之 Prow</title><link>https://www.chenshaowen.com/blog/prow-of-devops-tool-chain.html</link><pubDate>Fri, 17 Apr 2020 13:17:44 +0000</pubDate><atom:modified>Fri, 17 Apr 2020 13:17:44 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/prow-of-devops-tool-chain.html</guid><description>1. 关于 Prow 在 Kubernetes、Istio 等知名项目的 Github 仓库中，我们经常会看到 xxx-bot 用户，给 issues 添加标签、合并 PR 。这个机器人账户就是被 Prow 驱动的。 Prow 是 Kubernetes 测试特别兴趣小组的项目，目前是 kubernetes/test-infra 的一部分。Prow 是一个基于 Kubernetes 使用各类事件驱动执行 Job 的 CI/CD 系统。 除</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>DevOps</category><category>Prow</category><category>Kubernetes</category><category>CICD</category></item><item><title>GitLab CI 之前端 Webpack 实践</title><link>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</link><pubDate>Wed, 08 Nov 2017 09:15:56 +0000</pubDate><atom:modified>Wed, 08 Nov 2017 09:15:56 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/front-webpack-practice-of-gitlab-ci.html</guid><description>从 GitLab 8.0 开始，GitLab 开始集成 CI（持续集成） 功能。只需要在服务器上添加一个 Runner，同时在项目中添加一个 .gitlab-ci.yml 文件，就可以进行 CI。在 GitLab 搭建与配置 中笔者记录了从零开始搭建 GitLab 服务的整个流程。在 GitLab CI 持续集成 中笔者交代了 GitLab CI 的一些基本概念，并</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>前端</category><category>持续集成</category><category>工具</category><category>DevOps</category><category>GitLab</category><category>CICD</category></item><item><title>Jenkins Pipeline 使用及调试</title><link>https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html</link><pubDate>Mon, 14 Aug 2017 13:13:55 +0000</pubDate><atom:modified>Mon, 14 Aug 2017 13:13:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html</guid><description>1. 基本概念 master master 就是 Jenkins 安装和运行的地方，它负责解析 job 脚本，处理任务，调度计算资源。 agent agent 负责处理从 master 分发的任务，操作实际上是通过 executor 来执行的。 executor executor 就是执行任务的计算资源，它可以在 master 或者 agent 上运行。多个 executor 也可以合作执行一些任务。 step Jenkins 里面 job 中的最小单元</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>持续集成</category><category>DevOps</category><category>CICD</category><category>调试</category></item><item><title>Django自动化测试</title><link>https://www.chenshaowen.com/blog/auto-testing-of-django.html</link><pubDate>Mon, 10 Jul 2017 21:39:27 +0000</pubDate><atom:modified>Mon, 10 Jul 2017 21:39:27 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/auto-testing-of-django.html</guid><description>Django中写自动化测试可以使用：doctests或unit tests。自动化测试的逻辑是，将测试数据传入待测试函数，执行后，以输出结果与预期是否一致，作为判断测试是否通过的标准。这里有几个关键点，（1）需要测试数据，（2）需要指明待测试</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Django</category><category>测试</category><category>Demo</category><category>DevOps</category><category>CICD</category></item></channel></rss>
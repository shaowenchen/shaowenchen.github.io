<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>指标 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%8C%87%E6%A0%87/</link><description>Recent content in 指标 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 04 Feb 2024 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%8C%87%E6%A0%87/atom.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 集群中 AI 相关的采集器</title><link>https://www.chenshaowen.com/blog/ai-related-exporters-in-kubernetes.html</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><atom:modified>Sun, 04 Feb 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ai-related-exporters-in-kubernetes.html</guid><description>1. dcgm-exporter dcgm-exporter 是 NVIDIA 官方社区提供的 GPU 监控工具。 项目地址 https://github.com/NVIDIA/dcgm-exporter 1.1 安装方式 添加 Helm 镜像仓库 1 helm repo add gpu-helm-charts https://nvidia.github.io/dcgm-exporter/helm-charts 1 helm repo update 安装 1 2 3 4 5 6 helm install dcgm-exporter gpu-helm-charts/dcgm-exporter --namespace monitor --create-namespace \ --set serviceMonitor.enabled=false \ --set image.repository=hubimage/nvidia-dcgm-exporter \ --set image.tag=3.3.3-3.3.0-ubuntu22.04 \ --set nodeSelector.&amp;#34;accelerator\/provider&amp;#34;=nvidia-gpu \ --version 3.3.1 需要给 NVIDIA GPU 节点打上标签 1 kubectl label node &amp;lt;node-name&amp;gt; accelerator/provider=nvidia-gpu 1.2 指标 GPU 利用率 指标名称 指标类型 单位 描述 DCGM_FI_DEV_GPU_UTIL Gauge % GPU 利用率 DCGM_FI_DEV_MEM_COPY_UTIL Gauge</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>AI</category><category>指标</category><category>采集</category></item><item><title>如何查看 Tekton 的流水线指标</title><link>https://www.chenshaowen.com/blog/how-to-insight-the-pipeline-of-tekton.html</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 07 Jun 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-insight-the-pipeline-of-tekton.html</guid><description>1. 抓取 Tekton Metrics 新增 ConfigMap 配置文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat &amp;lt;&amp;lt;EOF | kubectl apply -f - apiVersion: v1 kind: ConfigMap metadata: name: config-observability namespace: tekton-pipelines labels: app.kubernetes.io/instance: default app.kubernetes.io/part-of: tekton-pipelines data: metrics.backend-destination: prometheus metrics.taskrun.level: &amp;#34;task&amp;#34; metrics.taskrun.duration-type: &amp;#34;histogram&amp;#34; metrics.pipelinerun.level: &amp;#34;pipeline&amp;#34; metrics.pipelinerun.duration-type: &amp;#34;histogram&amp;#34; EOF 修改 data 中的配置，会改变上报指标的粒度，甚至会严重影响 Prometheus 的性能，需要谨慎修改。 重启 Tekton 1 kubectl -n tekton-pipelines rollout restart deployment tekton-pipelines-controller [可选] 将 tekton-pipelines-controller 设置为 NodePort</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>Tekton</category><category>监控</category><category>指标</category></item><item><title>如何采集 Kubernetes 对象的 labels 和 annotations</title><link>https://www.chenshaowen.com/blog/how-to-collect-labels-and-annotations-of-kubernetes-objects.html</link><pubDate>Thu, 02 Jun 2022 01:00:00 +0000</pubDate><atom:modified>Thu, 02 Jun 2022 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-collect-labels-and-annotations-of-kubernetes-objects.html</guid><description>1. 为什么需要 kube-status-metrics Kubernetes 的监控主要关注两类指标: 基础性能指标 CPU、内存、磁盘、网络等指标，可以通过 DaemonSet 部署 node-exporter，由 Prometheus 抓取相关指标。 资源对象指标 Deployment 的副本数量、Pod 的运行状态等。这些指标需要 kube-status-metrics 轮询 Kubernetes 的 API 查询，并暴露给 Prometheus 才能够看到</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Kubernetes</category><category>监控</category><category>指标</category><category>采集</category></item><item><title>Thanos 进阶使用指南</title><link>https://www.chenshaowen.com/blog/an-advanced-user-guide-about-thanos.html</link><pubDate>Mon, 28 Mar 2022 19:51:48 +0000</pubDate><atom:modified>Mon, 28 Mar 2022 19:51:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/an-advanced-user-guide-about-thanos.html</guid><description>1. 使用 Query 聚合数据 如上图，Thanos Query 可以对接的组件有： Thanos Store Gateway Thanos Query Thanos Receive Prometheus，借助于 Sidecar 利用 Thanos Query 之间的级联，我们可以实现跨组件的关联查询，组建超大型的监控系统。这也意味着，每个对接的组件应该提供足够快的 Prometheus API。整个接口的响应时</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Thanos</category><category>监控</category><category>存储</category><category>指标</category></item></channel></rss>
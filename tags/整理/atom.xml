<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>整理 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E6%95%B4%E7%90%86/</link><description>Recent content in 整理 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Tue, 10 Sep 2024 10:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E6%95%B4%E7%90%86/atom.xml" rel="self" type="application/rss+xml"/><item><title>什么是 Token</title><link>https://www.chenshaowen.com/blog/what-is-token.html</link><pubDate>Tue, 10 Sep 2024 10:00:00 +0000</pubDate><atom:modified>Tue, 10 Sep 2024 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-token.html</guid><description>Token 是一个与数据紧密相关的单位，可以用来度量训练模型所需的语料量，还可以用来度量推理时的输入和输出长度。 1. token 是什么 Token 可以是一个完整的单词、子词，甚至是一个字符。在语言模型中，文本被拆分为若干个 token，模型逐一处理这些 token 来生成预测或生成新文</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>机器学习</category><category>大模型</category><category>Token</category><category>什么是</category></item><item><title>什么是 FLOPs</title><link>https://www.chenshaowen.com/blog/what-is-flops.html</link><pubDate>Mon, 09 Sep 2024 10:00:00 +0000</pubDate><atom:modified>Mon, 09 Sep 2024 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-flops.html</guid><description>1. 关于 FLOPs FLOPs（Floating Point Operations Per Second）指的是每秒执行的浮点数运算次数。 具体地说： 一次浮点加法：如 a + b，被计为一次浮点运算。 一次浮点乘法：如 a * b，也被计为一次浮点运算。 其他基本浮点运算：如除法和平方根，也可以被计为一次浮</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>机器学习</category><category>大模型</category><category>FLOPs</category><category>什么是</category></item><item><title>什么是 PD 分离</title><link>https://www.chenshaowen.com/blog/what-is-pd-separation.html</link><pubDate>Sun, 08 Sep 2024 10:00:00 +0000</pubDate><atom:modified>Sun, 08 Sep 2024 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-pd-separation.html</guid><description>1. 定义 LLM 推理过程中存在着两个截然不同的阶段，PD 分离就 计算密集型的 Prefill 阶段， LLM 处理所有用户的 input，计算出对应的 KV Cache 显存密集型的 Decode 阶段， 顺序的产生一个个的 token，每次访存只计算一个 token 2. 指标 2.1 prefill 性能评估指标 TTFT（Time To First Toke</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>机器学习</category><category>大模型</category><category>PD</category><category>什么是</category></item><item><title>NVIDIA GPU 核心与架构演进史</title><link>https://www.chenshaowen.com/blog/nvidia-gpu-cores-and-architecture-evolution-history.html</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><atom:modified>Sun, 25 Aug 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/nvidia-gpu-cores-and-architecture-evolution-history.html</guid><description>1. 产品线 GeForce 面向游戏玩家，提供强大的图形处理能力、先进的游戏技术。 常见的有 NVIDIA GTX 系列、高端的 RTX 系列、Titan 系列。 Quadro 面向专业市场，如设计师、工程师、科学家和内容创作者。 常见的有 Quadro P 系列，高端的 Quadro RTX 系列 Tesla 面向数据中心和高性能计算（HPC）市场，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>AI</category><category>GPU</category><category>NVIDIA</category><category>硬件</category></item><item><title>分布式训练中的数据并行架构</title><link>https://www.chenshaowen.com/blog/data-parallel-architecture-in-distributed-train.html</link><pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate><atom:modified>Wed, 21 Aug 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/data-parallel-architecture-in-distributed-train.html</guid><description>1. Parameter Server 架构 在 Parameter Server 架构中，集群中的节点被分为两类，参数服务器节点（Parameter Server）和工作服务器节点（Worker）。 1.1 Parameter Server Parameter Server 用于存放模型的参数。 每个参数服务器节点负责管理和更新模型的一部分参数，而每个工作节点则只处理与其对应</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>分布式</category><category>训练</category><category>数据并行</category><category>并行架构</category></item><item><title>什么是 MLOps</title><link>https://www.chenshaowen.com/blog/what-is-mlops.html</link><pubDate>Sat, 27 Apr 2024 10:00:00 +0000</pubDate><atom:modified>Sat, 27 Apr 2024 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-mlops.html</guid><description>1. 什么是 MLOps MLOps 是 Machine Learning Operations 的缩写，描述的是围绕模型研发整个生命周期过程的标准化和工程化。 MLOps 包括以下几个关键步骤: 数据管理，数据的存储、访问、清洗、转换 模型开发，算法开发、模型构建 模型训练与调优，使用数据训练模型，调整超参数优化模型，微调模型 模型评</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>机器学习</category><category>MLOps</category><category>大模型</category><category>研发</category><category>什么是</category></item><item><title>常用 GPU 运维及故障处理</title><link>https://www.chenshaowen.com/blog/common-gpu-operation-and-fault-handling.html</link><pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><atom:modified>Mon, 18 Mar 2024 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/common-gpu-operation-and-fault-handling.html</guid><description>处理故障时，参考或者记录下的内容，持续更新中 1. XID 错误事件 XID 是 NVIDIA 的错误码，可以通过命令: 1 dmesg -T | grep -i &amp;#34;NVRM: Xid&amp;#34; 或者 1 journalctl --since `date -d &amp;#34;10 days ago&amp;#34; &amp;#34;+%Y-%m-%d&amp;#34;`|grep Xid 根据 XID 可以定位故障，下面是一些常见的 XID 事件 XID 说明 13 Graphics Engine Exception。通常是数组越界、指令错误,小概率是硬件问</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>GPU</category><category>AI</category><category>运维</category></item><item><title>transformers 库的使用</title><link>https://www.chenshaowen.com/blog/usage-of-transformers-lib.html</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate><atom:modified>Tue, 22 Aug 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/usage-of-transformers-lib.html</guid><description>transformers 是由 Hugging Face 开发的 Python 库，用于在自然语言处理（NLP）任务中使用和训练预训练的 Transformer 模型。它提供了许多强大的工具和功能，使得处理文本数据和构建 NLP 模型变得更加容易。该库广泛应用于各种 NLP 任务，如文本分类、命名实体识别、问答、文本生成等。 1. transformers 中的 pipeline pipeline 提供</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Transformer</category><category>AI</category><category>大模型</category><category>NLP</category></item><item><title>HuggingFace 的模型和数据操作</title><link>https://www.chenshaowen.com/blog/models-and-datasets-on-huggingface.html</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><atom:modified>Mon, 21 Aug 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/models-and-datasets-on-huggingface.html</guid><description>HuggingFace 通过提供共享模型 model、数据集 dataset、在线托管 space 等服务，为 AI 研究人员和开发者提供了一个完整的生态。本篇文章将介绍如何使用 HuggingFace 的模型和数据集。 1. 模型操作与使用 1.1 自定义存储目录 1 export HF_HOME=/Volumes/Data/HuggingFace 否则默认在 ~/.cache/huggingface 目录下。 1.2 模型的下载 第一种方法，页面上</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Transformer</category><category>AI</category><category>模型</category><category>HuggingFace</category><category>数据集</category></item><item><title>Transformer 学习笔记</title><link>https://www.chenshaowen.com/blog/learning-notes-of-transformer.html</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><atom:modified>Sun, 20 Aug 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/learning-notes-of-transformer.html</guid><description>1. 为什么是 Transformer 全连接的自注意 以往的 RNN 模型，每个单词只能和邻近的单词产生联系，而 Transformer 模型中的 Attention 机制，单词可以和任意位置的单词产生联系，这样就可以捕捉到全局的上下文信息。 没有梯度消失问题 RNN 作用在同一个权值矩阵上，使得其最大的特征值小于 1 时，就会出现</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Transformer</category><category>AI</category><category>大模型</category></item><item><title>影响使用大模型的技术因素</title><link>https://www.chenshaowen.com/blog/the-key-factors-while-using-large-models.html</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><atom:modified>Sat, 19 Aug 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-key-factors-while-using-large-models.html</guid><description>1. 大模型到底是什么 先请两位大模型回答一下这个问题，看看他们的回答是什么。 Claude 说，大模型本质上是语言知识的概率表达，通过统计学习对语言各层次规律建模，表征语言生成的先验分布，从而具备语言预测生成能力。 ChatGPT 说，大模型本质是深度神经网络通过大量参数和</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>AI</category><category>大模型</category><category>思考</category></item><item><title>AI 基础知识点</title><link>https://www.chenshaowen.com/blog/ai-basic-knowledge.html</link><pubDate>Fri, 18 Aug 2023 11:22:55 +0000</pubDate><atom:modified>Fri, 18 Aug 2023 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ai-basic-knowledge.html</guid><description>1. 关键字 机器学习(ML) 从数据中自动获取知识的技术 神经网络(NN) 模仿生物神经网络结构和学习机制的模型，是机器学习的分支之一 神经网络的结构包括，输入层、隐藏层、输出层 深度神经网络(DNN) 隐含层常常大于 2 层 DNN 的出众表现源于它使用统计学方法从</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>AI</category><category>LLM</category><category>机器学习</category><category>大模型</category></item><item><title>动态代理 Envoy</title><link>https://www.chenshaowen.com/blog/a-dynamic-proxy-envoy.html</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><atom:modified>Thu, 23 Feb 2023 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/a-dynamic-proxy-envoy.html</guid><description>Envoy 是第三个从 CNCF 毕业的项目，由于其动态生效、高性能等特性，已经成为云原生事实上的数据平面标准。很多项目都会借助于 Envoy 处理数据平面流量，而专注于控制面适配应用场景，将用户输入通过 xDS 协议写入 Envoy。 1. Envoy 数据处理流程 其中 Downstream，进 Envoy</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Envoy</category><category>数据平面</category><category>云原生</category></item><item><title>Istio 注入 Sidecar 的几种方式</title><link>https://www.chenshaowen.com/blog/several-ways-to%20inject%20Sidecar.html</link><pubDate>Tue, 21 Feb 2023 00:01:00 +0000</pubDate><atom:modified>Tue, 21 Feb 2023 00:01:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/several-ways-to%20inject%20Sidecar.html</guid><description>Istio 注入 Sidecar 的模板在 istio-sidecar-injector ConfigMap 中。通过 annotations 可以对 Sidecar 的各种参数进行自定义配置，比如 CPU 使用、proxyImage 等。下面主要整理的是 Sidecar 的注入方式。 1. 给命名空间添加标签 -&amp;gt; 整个命名空间生效 注入标签 1 kubectl label namespace default istio-injection=enabled --overwrite 重启应用之后，会自动注入 Sidecar 容器。此时，访问流量将通</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Istio</category><category>整理</category><category>事件</category></item><item><title>常用的各类资源 Prometheus 告警语句</title><link>https://www.chenshaowen.com/blog/some-common-promql-for-alarming.html</link><pubDate>Sun, 21 Aug 2022 11:22:55 +0000</pubDate><atom:modified>Sun, 21 Aug 2022 11:22:55 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/some-common-promql-for-alarming.html</guid><description>主机 主机内存使用率超过阈值 1 - node_memory_MemAvailable_bytes{mode!=&amp;quot;idle&amp;quot;} / node_memory_MemTotal_bytes 阈值：0.9 主机 CPU 使用率超过阈值 1 - avg(irate(node_cpu_seconds_total{mode=&amp;quot;idle&amp;quot;}[5m])) by (host_name) 阈值：0.85 主机硬盘使用率超过阈值 1 - avg without (fstype)(node_filesystem_free_bytes{fstype!='rootfs',mountpoint!~'/(run|var|snap).*'} / node_filesystem_size_bytes{fstype!='rootfs',mountpoint!~'/(run|var|snap).*'}) 阈值：0.8 Windows Windows 主机内存使用率超过阈值 1 - 1 * windows_os_physical_memory_free_bytes{job=&amp;quot;windows_exporter&amp;quot;,mode!=&amp;quot;idle&amp;quot;} / windows_cs_physical_memory_bytes 阈值：0.9 Windows 主机 CPU 使用率超过阈值 1 - (avg by (host_ip,host_name) (irate(windows_cpu_time_total{job=&amp;quot;windows_exporter&amp;quot;,mode=&amp;quot;idle&amp;quot;}[1m]))) 阈值：0.85</description><dc:creator>微信公众号</dc:creator><category>Prometheus</category><category>告警</category><category>整理</category></item><item><title>监控告警系统概述</title><link>https://www.chenshaowen.com/blog/monitor-and-alarm-system-101.html</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 15 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/monitor-and-alarm-system-101.html</guid><description>监控系统的难点在于，存储大容量时序数据，提供高性能的查询能力；告警系统的难点在于，设计高效的告警引擎，实现灵活的告警升级机制。最近一直在跟踪监控告警系统，本篇主要是整理监控告警相关的一些概念、组件，调研方案。 1. 监控告警系统的组成 对于监控告警</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>监控</category><category>告警</category></item><item><title>布鲁姆分类学</title><link>https://www.chenshaowen.com/blog/taxonomy-of-educational-objectives.html</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 08 Feb 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/taxonomy-of-educational-objectives.html</guid><description>1. 布卢姆分类学 布卢姆分类学 (Bloom&amp;rsquo;s taxonomy) 是美国教育心理学家本杰明·布鲁姆于1956年在芝加哥大学所提出的分类法，把教育者的教学目标分类，以便更有效的达成各个目标。根据布卢姆的理论析，知识可以分成以下三个范畴： 态度范畴（Affective Domain）</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>通识</category></item><item><title>面试官培训 - 精准识人</title><link>https://www.chenshaowen.com/blog/interviewer-training-about-how-to-choose-right-people.html</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><atom:modified>Tue, 18 Jan 2022 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/interviewer-training-about-how-to-choose-right-people.html</guid><description>1. 面试流程 建立招人标准 对齐招人标准 简历分析 开场寒暄 胜任力评估 价值观评估 辨别真伪 动机评估 吸引优秀候选人 结束面试 填写面试评估表 协助入职跟进 2. 面试前 2.1 建立招人标准 why 使用统一的考核标准评估候选人 how 冰山模型，冰山上-当前（知识、技能），冰山下-未来（</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>面试</category><category>培训</category></item><item><title>Kubernetes 集群规划之规模与节点大小</title><link>https://www.chenshaowen.com/blog/the-scale-and-node-size-of-kubernetes-cluster.html</link><pubDate>Mon, 01 Nov 2021 10:00:00 +0000</pubDate><atom:modified>Mon, 01 Nov 2021 10:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-scale-and-node-size-of-kubernetes-cluster.html</guid><description>从调研数据来看，大家选择小集群的比较较高。下面是从节点数、节点配置角度提供的一份对比列表。 下面是选择少量大集群，还是多个小集群的对比列表: 特征 少量大集群 多个小集群 资源利用率 高 低 管理节点开销 低 高 资源伸缩范围 大 小 资源调度范围 大 小 应用间通信效率 高</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Harbor</category><category>镜像</category><category>容器</category></item><item><title>Kubernetes 安装问题 QA</title><link>https://www.chenshaowen.com/blog/the-question-and-answer-of-kubernetes-installation.html</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-question-and-answer-of-kubernetes-installation.html</guid><description>1. Calico 1.1 BIRD is not ready 1 kubectl -n kube-system get pod calico-node-xxx 0/1 一直起不来，报错 calico/node is not ready: BIRD is not ready: BGP not established with 解决办法: Calico 默认使用 first-found，也就是从第一个找到的网卡中获取 NodeIP。虽然排除了 lo、docker0 等网卡，但是依然有一定概率会识别失败。需要手动修改，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category></item><item><title>Linux 网络流量监控终端工具 - nload</title><link>https://www.chenshaowen.com/blog/the-nload-is-a-the-terminal-tool-of-linux-network-traffic-monitor.html</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 10 Sep 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/the-nload-is-a-the-terminal-tool-of-linux-network-traffic-monitor.html</guid><description>nload 是一个流量监控的终端工具，读取 /proc/net/dev 文件，绘制流量图。下面是一个简单的使用简介。 1. 安装 CentOS 1 yum install -y nload 如果系统的源找不到 nload 包，可以执行如下命令添加新源: 1 yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm Ubuntu 1 apt-get install -y nload 2. 参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 nload --help Command line syntax: nload [options] [devices] nload --help|-h Options: -a</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Linux</category><category>工具</category><category>nload</category></item><item><title>Kubernetes 之网络隔离(内附十多种使用场景)</title><link>https://www.chenshaowen.com/blog/network-policy-of-kubernetes.html</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><atom:modified>Tue, 18 May 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/network-policy-of-kubernetes.html</guid><description>1. Kubernetes 中的网络隔离 Kuberntes 自 1.3 引入了 Network Policy（网络策略） ，通过 ipBlock、podSelector、namespaceSelector 定义实体，控制其 From（Ingress）、To（Egress）的流量行为。 但 Kubernetes 只是定义了网络策略，具体实</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>网络隔离</category></item><item><title>各大公司安全应急响应中心列表（ALL SRC LIST）</title><link>https://www.chenshaowen.com/blog/all-src-list.html</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><atom:modified>Fri, 01 Jan 2021 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/all-src-list.html</guid><description>1. 行业规范 [TPSA19-22]SRC行业安全测试规范: https://security.tencent.com/announcement/msg/180 2. SRC 列表 序号 上线时间 SRC名称 01 2012 TSRC（腾讯） 02 2013 ZSRC（猪八戒） 03 2013 NSRC（网易） 04 2013 KSRC（金山） 05 2013 JSRC（京东） 06 2013 BSRC（百度） 07 2013 ASRC（阿里巴巴） 08 2013 3</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>安全</category></item><item><title>《DevOps 能力成熟度模型》下载</title><link>https://www.chenshaowen.com/blog/capability-maturity-model-of-devops.html</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate><atom:modified>Fri, 27 Nov 2020 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/capability-maturity-model-of-devops.html</guid><description>揭秘《DevOps 能力成熟度模型》 研发运营(DevOps)解决方案能力分级要求 - PDF 下载 第1部分：总体架构 - PDF 下载 第2部分：敏捷开发管理过程 - PDF 下载 第3部分：持续交付过程 - PDF 下载 第4部分：技术运营 - PDF 下载 第5部分：应用设计 - PDF 下载 第6部分：安</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>DevOps</category><category>标准</category><category>模型</category></item><item><title>Kubernetes Cheat Sheet</title><link>https://www.chenshaowen.com/blog/kubernetes-cheat-sheet.html</link><pubDate>Tue, 24 Dec 2019 01:00:00 +0000</pubDate><atom:modified>Tue, 24 Dec 2019 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/kubernetes-cheat-sheet.html</guid><description/><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category></item><item><title>镜像管理工具 -- Harbor</title><link>https://www.chenshaowen.com/blog/an-enterprise-class-registry-of-harbor.html</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 12 Sep 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/an-enterprise-class-registry-of-harbor.html</guid><description>1. 搭建 Harbor 的要求 Harbor 硬件要求： CPU，最少 2 核，4 核更好 Mem，最少 4 GB，8 GB 更好 Disk，最少 40 GB，160 GB 更好 Docker 版本要求： 17.06.0 以上 在 Kubernetes 上搭建 Harbor ，可以参考文档，使用 Helm 搭建 harbor 。 2. Harbor 提供的功能 Harbor 是在 Docker Registry 的基础之上，进行了企业级扩展。Harbor</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Harbor</category><category>镜像</category><category>容器</category></item><item><title>Kubernetes 中的 Ceph</title><link>https://www.chenshaowen.com/blog/ceph-in-kubernetes.html</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Wed, 07 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ceph-in-kubernetes.html</guid><description>1. 不同种类的存储 1.1 文件存储 文件存储是，基于文件的存储。在访问数据时，需要提供相应的查找路径。 适用于，FTP、NFS 等服务。 1.2 块存储 块存储是，将数据拆分成块，并单独存储各个部分。在访问数据时，底层存储软件会将这些分散的数据组装起来。 块存储，通</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>Ceph</category><category>存储</category></item><item><title>Kubernetes 之 Volumes</title><link>https://www.chenshaowen.com/blog/volumes-of-kubernetes.html</link><pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Mon, 05 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/volumes-of-kubernetes.html</guid><description>1. Docker 的存储卷 1.2 Docker 中的 Volume Docker Volume 将宿主机目录，挂载到容器中。在容器中修改的文件内容，将会被持久化到宿主机中。即时容器被删除，宿主机中的文件也会被保留。 Docker 使用 /var/lib/docker/volumes/ 存储容器的 Volume。 查看本地 Volume ： 1 2 3 4 5 6 7 8 9 tree /var/lib/docker/volumes/ -L 3 /var/lib/docker/volumes/ |-- 714450f353b26b5aa57aa352766c201c0851685e0e28c2e67ae1631f29c465b4 | `-- _data | |-- access.log -&amp;gt; /dev/stdout | `--</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>学习</category></item><item><title>Kubernetes 之 Labels、Selectors</title><link>https://www.chenshaowen.com/blog/labels-and-selectors-of-kubernetes.html</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 04 Aug 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/labels-and-selectors-of-kubernetes.html</guid><description>1. Labels 1.1 什么是 Labels Labels 是一对关联到对象的键值对。可以在创建对象时，直接添加 Labels ，也可以在创建之后动态修改。 Labels 格式: 1 2 3 4 &amp;#34;labels&amp;#34;: { &amp;#34;key1&amp;#34; : &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34; : &amp;#34;value2&amp;#34; } 格式要求： Key，不能重复 Value，须以字母或数字开头，可以使用字母、数字、连字符、点和下划线，最长63个</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>学习</category></item><item><title>Kubernetes 之网络</title><link>https://www.chenshaowen.com/blog/networks-of-kubernetes.html</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Sun, 28 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/networks-of-kubernetes.html</guid><description>1. Docker 的网络模型 1.1 bridge 模式 默认使用 bridge 模式，也可以使用 --net=bridge 指定 bridge 模式。 bridge 模式下，容器连接到同一个虚拟网桥 docker0 上。docker0 通常会占用 172.17.0.1/16 网段。同一个网桥上的容器之间，可以通过 ip 直接通信。 1.2 host 模式 使用 --net=host 指定 host 模式。 host 模式，容器与主机共享 Network Namesp</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>API</category><category>对象</category></item><item><title>Kubernetes 之 API</title><link>https://www.chenshaowen.com/blog/api-of-kubernetes.html</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 26 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/api-of-kubernetes.html</guid><description>1. Kubernetes 中的对象 Kubernetes 对象是系统中的持久实体，用于表示集群的状态。用户通过操作对象，与 Kubernetes 进行交互，告诉系统自己期望的工作负载情况。 对象的操作是通过 Kubernetes API 来实现的。每个 Kubernetes 对象包含两个嵌套的对象字段，Spec 和 Status。Spec 描述了期望的对象状态，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>API</category><category>对象</category></item><item><title>Kubernetes 复杂有状态应用管理框架 -- Operator</title><link>https://www.chenshaowen.com/blog/complex-application-management-framework-operator-for-kubernetes.html</link><pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Thu, 25 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/complex-application-management-framework-operator-for-kubernetes.html</guid><description>1. 缘起 最初，有两名 CoreOS 的员工，为了更方便部署 etcd 集群，在 etcdCluster 对象的增、删、改事件上绑定了相应的逻辑操作，借助 Kubernetes 来自动化管理 etcd 集群。 在几个月之后的 KubeCon 大会上，他们分享了这种称之为 Operator 的方案，得到社区的强烈回响。随后，大量项目宣布支持以 Operator 的方式进行运行和</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>Helm</category><category>实践</category></item><item><title>kubectl 实用指南</title><link>https://www.chenshaowen.com/blog/practice-guide-to-kubectl.html</link><pubDate>Fri, 19 Jul 2019 01:00:00 +0000</pubDate><atom:modified>Fri, 19 Jul 2019 01:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/practice-guide-to-kubectl.html</guid><description>1. 什么是 kubectl kubectl 是 Kubernetes 的命令行工具，通过 API server 与集群进行交互。 2. 配置 kubectl kubectl 可以通过 ~/.kube/config 配置连接到一个或多个集群。 具体如何配置可以参考: 配置对多集群的访问 。如果需要配置远程集群，可以参考: 搭建远程 Kubernetes 开发环境。 查看配置的集群: 1 2 3 kubectl config get-contexts CURRENT NAME CLUSTER AUTHINFO NAMESPACE * minikube minikube minikube</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>kubectl</category><category>实践</category></item><item><title>Kubernetes 中的基本概念</title><link>https://www.chenshaowen.com/blog/basic-concepts-in-kubernetes.html</link><pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate><atom:modified>Fri, 19 Jul 2019 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basic-concepts-in-kubernetes.html</guid><description>1. 集群 1.1 Master Master 负责管理和维护 Kubernetes 集群信息，并向 Node 下放任务和接收反馈信息。 Master 上运行的组件有 kube-apiserver、kube-scheduler、kube-controller-manager、cloud-controller-manager</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Kubernetes</category><category>概念</category><category>学习</category></item><item><title>SELinux 和 iptables</title><link>https://www.chenshaowen.com/blog/selinux-and-iptables-on-linux.html</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Fri, 21 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/selinux-and-iptables-on-linux.html</guid><description>最近操作服务器时，遇到了一些不同清楚的概率，查找了一些资料，整理如下。 1. BLP 安全模型 该模型将信息系统中的实体分为两部分： 主体（Subject），实时操作的，如用户和进程 客体（Object），被操作的对象，如文件和数据库等。 对主体和客体来说，有</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>安全</category><category>Linux</category><category>iptables</category></item><item><title>有意思的游戏</title><link>https://www.chenshaowen.com/blog/interesting-games.html</link><pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 04 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/interesting-games.html</guid><description>切水果 牛顿摆 汤姆猫</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Demo</category><category>游戏</category></item><item><title>月度分享第一期</title><link>https://www.chenshaowen.com/blog/month-share-1.html</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 01 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/month-share-1.html</guid><description>给大家分享一下，最近一个月，关注的一些技术动态。同时，也有一些工具、学习资料、小技巧等有意思的内容。 前端 Webpack 在今年 2 月份，Webpack 已经推出 4.0.0 的版本。Wepack 4 不再支持 Node.js 4，在编译速度上也有很大优化提升。同时，Webpack 4 移除了 commonchunk</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>月度分享</category></item><item><title>使用 CloudReady 制作 Chrome OS 安装启动盘</title><link>https://www.chenshaowen.com/blog/how-to-use-cloudready-make-chrome-os-boot-disk.html</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 18 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-cloudready-make-chrome-os-boot-disk.html</guid><description>1. 下载镜像文件 点击进入，CloudReady 官网下载 DOWNLOAD 64-BIT 或 DOWNLOAD 32-BIT 版本镜像。解压后，得到 cloudready-free-xxx-bit.bin 文件 2. 安装 Chromebook 恢复工具 首先需要安装 Chrome 浏览器，然后打开页面，安装 Chromebook Recovery Utility。 3. 制作镜像 第一步，打开 Chromebook Recovery Utility 第二步，选择 Use local image，再选择刚才解压出来</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Demo</category><category>系统</category><category>浏览器</category><category>CloudReady</category></item><item><title>Robot Framework 常用库</title><link>https://www.chenshaowen.com/blog/robot-framework-common-library.html</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 16 Aug 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/robot-framework-common-library.html</guid><description>1. 标准库 Robot Framework 可以直接导入使用的库，在目录 python\Lib\site-packages\robot\libraries 中。详细说明，可以查看说明文档。 Builtin，包含经常需要的关键字。自动导入无需 import，因此总是可用的。 Dialogs，提供了暂停测试执行和从用户的输入方式。 Collections，提供一组</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>测试</category><category>自动化</category><category>DevOps</category></item><item><title>Python 下各种环境隔离工具简介</title><link>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate><atom:modified>Tue, 17 Apr 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html</guid><description>1. 非标准库 1.1 virtualenv virtualenv 是一个非常流行的用于创建独立的python libraries环境的工具。我强烈推荐你学习并了解它，因为他非常实用，并且应用广泛，很多人用它来搭建python开发环境。后面其他工具来主要与virtualenv来进行比较以说明差</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Python</category><category>工具</category><category>环境</category></item><item><title>Python2 VS Python3</title><link>https://www.chenshaowen.com/blog/python2-vs-python3.html</link><pubDate>Fri, 09 Mar 2018 17:22:45 +0000</pubDate><atom:modified>Fri, 09 Mar 2018 17:22:45 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/python2-vs-python3.html</guid><description>1. Python 2 和 3 区别 特征\版本| Python 2| Python 3 | :-: | -: print 函数化 | print“abc”| print(&amp;ldquo;abc&amp;rdquo;) 统一类| 旧式类和新式类| 只有新式类 浮点运算| 1/2=0| 1/2=0.5 字符串格式化| %,Format| Format,% xrange 替代 range| xrange| range long 重命名为 int| Long,int| Int 包导入| 相对导入| 绝对导入 源文件编码| Ascii| utf8 Python 官方强烈建议直接学习 Python 3，</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Python</category><category>比较</category></item><item><title>PPT 制作攻略之呈现篇课程笔记</title><link>https://www.chenshaowen.com/blog/notes-on-making-strategy-of-the-presentation.html</link><pubDate>Tue, 06 Mar 2018 20:55:29 +0000</pubDate><atom:modified>Tue, 06 Mar 2018 20:55:29 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/notes-on-making-strategy-of-the-presentation.html</guid><description>1. 概况 课程前置条件：已经完成 PowerPoint 逻辑梳理和内容撰写。 课程主要从以下六个部分，来增强 PowerPoint 的表现力： 色彩 文字 图形 图表 母版 动画 2. 色彩 2.1 认识色彩 色相 彩色，如紫色、青色、品红等。中性色，如黑、白、灰。 亮度 色彩的明暗程度，亮度值越高，色彩越白，亮度越低，色</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>PPT</category><category>工具</category></item><item><title>云部署之混合云</title><link>https://www.chenshaowen.com/blog/hybrid-cloud-of-cloud-deployment.html</link><pubDate>Sun, 03 Sep 2017 13:18:17 +0000</pubDate><atom:modified>Sun, 03 Sep 2017 13:18:17 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/hybrid-cloud-of-cloud-deployment.html</guid><description>1. 混合云使用的用户场景 1.1 满足业务的爆发式增长 互联网业务呈指数型增长，很难预测基础设施的储备量。一般在业务成长初期很长一段时间，小规模的物理机托管就能满足业务需求。但是，随着市场的展开，业务规模爆发式增长，原有的物理机托管机房机位有限，只能通</description><dc:creator>微信公众号</dc:creator><category>云</category><category>PaaS</category><category>云服务</category><category>整理</category><category>混合云</category></item><item><title>Vue.js 组件库</title><link>https://www.chenshaowen.com/blog/vuejs-component-library.html</link><pubDate>Thu, 03 Aug 2017 21:53:02 +0000</pubDate><atom:modified>Thu, 03 Aug 2017 21:53:02 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/vuejs-component-library.html</guid><description>1. UI组件 element - 饿了么出品的Vue2的web UI工具套件 Vux - 基于Vue和WeUI的组件库 iview - 基于 Vuejs 的开源 UI 组件库 mint-ui - Vue 2的移动UI元素 muse-ui - 三端样式一致的响应式 UI 库 vue-material - 通过Vue Material和Vue 2建立精美的app应用 vuetify - 为移动而生的Vu</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>前端</category><category>工具</category><category>组件</category><category>Vuejs</category><category>转载</category></item><item><title>Base64 编码</title><link>https://www.chenshaowen.com/blog/base64-code.html</link><pubDate>Wed, 02 Aug 2017 17:00:31 +0000</pubDate><atom:modified>Wed, 02 Aug 2017 17:00:31 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/base64-code.html</guid><description>1. 应用场景 1.1 Mail 由于 RFC821 要求邮件内容必须为 ASCII 码。当邮件中有其他的非ASCII字符或二进制数据时，就需要 Content-Transfer-Encoding，Base64是其中的一种方法。 1.2 URL 有些应用需要把二进制数据放到URL里，而URL只允许特定</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>前端</category><category>编码</category><category>数据</category><category>Base64</category></item><item><title>Docker 基础</title><link>https://www.chenshaowen.com/blog/basis-of-docker.html</link><pubDate>Fri, 28 Jul 2017 15:30:00 +0000</pubDate><atom:modified>Fri, 28 Jul 2017 15:30:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/basis-of-docker.html</guid><description>1. 什么是Docker Docker诞生于2013年初，是dotCloud（ Docker.Inc前称）公司内部的一个业余项目，源代码托管在GitHub上，基于Go语言并遵从 Apache 2.0 开源协议。 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础</description><dc:creator>微信公众号</dc:creator><category>PaaS</category><category>DevOps</category><category>Docker</category><category>整理</category></item><item><title>Django 第三方组件 List</title><link>https://www.chenshaowen.com/blog/third-party-component-list-of-django.html</link><pubDate>Thu, 06 Jul 2017 09:27:50 +0000</pubDate><atom:modified>Thu, 06 Jul 2017 09:27:50 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/third-party-component-list-of-django.html</guid><description>Awesome-Django Django应用、项目和资源集合 Django-Packages 大量Django第三方组件。 Django-Mptt 在数据库中存储层级数据结构。 Django-Rest-Framework 自动生成 RESTful API。 Django-Rest-Framework-Jwt 为Django-Rest-Framework提供Token鉴权。 Django-Tastypie 自动生成 RESTful API。 Django-Cors-Headers 解决跨域访问的问题。 Django-Ckeditor Django富文</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>后端</category><category>组件</category></item><item><title>Linux 性能命令工具</title><link>https://www.chenshaowen.com/blog/linux-performance-command-tools.html</link><pubDate>Sun, 28 May 2017 15:47:41 +0000</pubDate><atom:modified>Sun, 28 May 2017 15:47:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/linux-performance-command-tools.html</guid><description>Linux 平台上的性能工具有很多，眼花缭乱，长期的摸索和经验发现最好用的，还是那些久经考验的、简单的小工具。下面是，系统性能专家 Brendan D.Gregg ，关于Linux性能方面的talk(Linux Performance Tools)中所整理的命令工具。 1. 总览 2. 监控 3. 测试 4. 优化 5. 静态 6. 追踪</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Linux</category></item><item><title>XSS Cheat Sheet</title><link>https://www.chenshaowen.com/blog/xss-cheat-sheet.html</link><pubDate>Sat, 20 May 2017 09:12:31 +0000</pubDate><atom:modified>Sat, 20 May 2017 09:12:31 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/xss-cheat-sheet.html</guid><description>如果使用Chrome浏览器测试XSS向量，请关闭浏览器对XSS的拦截功能。首先，关闭所有Chrome浏览器进程，然后执行： 1 chrome.exe -args --disable-xss-auditor --args --disable-web-security 进入非Web安全模式。 1. 利用&amp;lt;&amp;gt;标记注入HTML/JavaScript 1 &amp;lt;script&amp;gt;alert(&amp;#39;XSS&amp;#39;)&amp;lt;/script&amp;gt; 1 &amp;#39;&amp;#39;;!--&amp;#34;&amp;lt;XSS&amp;gt;=&amp;amp;{()} 1 2 //SRC的</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>安全</category><category>XSS</category></item><item><title>XSS 原理、构造</title><link>https://www.chenshaowen.com/blog/principle-and-construction-of-xss.html</link><pubDate>Tue, 16 May 2017 20:04:53 +0000</pubDate><atom:modified>Tue, 16 May 2017 20:04:53 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/principle-and-construction-of-xss.html</guid><description>XSS是一种在前端执行JavaScript脚本的攻击方式。随着UGC站点的流行，用户产生数据剧增，数据块的网络连接越来越有利于XSS的实施与传播。XSS带来的危害有：窃取用户cookies，窃取个人信息；劫持会话，操纵用户网络数据；发起dd</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>安全</category><category>JavaScript</category><category>XSS</category></item><item><title>Django 中的 manage 命令</title><link>https://www.chenshaowen.com/blog/manage-command-in-django.html</link><pubDate>Mon, 15 May 2017 21:14:48 +0000</pubDate><atom:modified>Mon, 15 May 2017 21:14:48 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/manage-command-in-django.html</guid><description>每个Django项目中都会自动生成一个manage.py文件。manage.py是对django-admin的一个简单包装，其功能是将Django Project放到sys.path目录中，设置 DJANGO_SETTINGS_MODULE 环境变量为当前Project的setting.</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>工具</category><category>命令</category></item><item><title>Django Model 中的 Meta 选项</title><link>https://www.chenshaowen.com/blog/django-model-meta.html</link><pubDate>Thu, 11 May 2017 15:48:41 +0000</pubDate><atom:modified>Thu, 11 May 2017 15:48:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-model-meta.html</guid><description>通过一个内嵌类“class Meta”给model定义元数据，类似下面这样： 1 2 3 4 class Foo(models.Model): bar = models.CharField(max_length=30) class Meta: #...... Model元数据就是：不是一个字段的任何数据 比如排序选项，admin选项等等。 下面是所有可能用到的 Meta 选项。没有一个选项是必需的。 是否添加 class Meta 到</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>数据库</category><category>Model</category></item><item><title>Django 中间件</title><link>https://www.chenshaowen.com/blog/django-middleware.html</link><pubDate>Wed, 10 May 2017 19:39:12 +0000</pubDate><atom:modified>Wed, 10 May 2017 19:39:12 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/django-middleware.html</guid><description>1. __init__(self) 在中间件类中， __init__() 方法用于执行系统范围的初始化设置。 出于性能的考虑，每个已启用的中间件在每个服务器进程中只初始化一次。 也就是说 __init__() 仅在服务进程启动的时候调用，而在针对单个request处理时并不执行。 对一个middleware而言，定义 __init__() 方</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>Django</category><category>Python</category><category>中间件</category></item><item><title>Django 标准库介绍</title><link>https://www.chenshaowen.com/blog/introduction-of-django-standard-library.html</link><pubDate>Wed, 10 May 2017 19:22:23 +0000</pubDate><atom:modified>Wed, 10 May 2017 19:22:23 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/introduction-of-django-standard-library.html</guid><description>Django的标准库存放在 django.contrib 包中。每个子包都是一个独立的附加功能包。 这些子包一般是互相独立的，不过有些django.contrib子包需要依赖其他子包 在 django.contrib 中对函数的类型并没有强制要求 。其中一些包中带有模型（因此需要你在数据库中安装对应的数据</description><dc:creator>微信公众号</dc:creator><category>Django</category><category>整理</category></item><item><title>免费开放数据源</title><link>https://www.chenshaowen.com/blog/collect-free-open-data-source.html</link><pubDate>Sat, 15 Apr 2017 11:06:28 +0000</pubDate><atom:modified>Sat, 15 Apr 2017 11:06:28 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/collect-free-open-data-source.html</guid><description>1. 经济 世界银行 Gapminder 世界卫生组织和世界银行覆盖经济、医疗和社会统计数据 美国中央情报局,世界概况 包含267个国家的历史信息、人口、经济、政府、基设施和军事等信息 中国统计局最新宏观经济数据 工业和信息化部较多数据在此发布，尤其是有关工业运行及信息化相</description><dc:creator>微信公众号</dc:creator><category>数据</category><category>Collect</category><category>整理</category></item><item><title>PaaS 平台 App Engine 2.0 介绍</title><link>https://www.chenshaowen.com/blog/app-engine-2-0.html</link><pubDate>Tue, 04 Apr 2017 15:14:40 +0000</pubDate><atom:modified>Tue, 04 Apr 2017 15:14:40 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/app-engine-2-0.html</guid><description>Note: 简单说几句，组内同学的分享。App Engine 将开发从繁琐的部署、配置流程中解脱出来，提供全方位的自动化支持服务。其中的 Controller 是 App Engine 的大脑，协调控制整个引擎的运作。PPT 中主要讲的是 App Engine 的设计方案和演化过程，还对资源调度、故障容灾进行了考虑。 由于其是微</description><dc:creator>微信公众号</dc:creator><category>整理</category><category>PaaS</category><category>架构</category></item><item><title>Black-Scholes 期权定价模型</title><link>https://www.chenshaowen.com/blog/black-scholes-option-pricing-model.html</link><pubDate>Sun, 12 Feb 2017 10:23:51 +0000</pubDate><atom:modified>Sun, 12 Feb 2017 10:23:51 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/black-scholes-option-pricing-model.html</guid><description>1. Black-Scholes 期权定价模型的意义 Black-Scholes 模型以及它的一些变形已被期权交易商、投资银行、金融管理者、保险人等广泛使用。衍生工具的扩展使国际金融市场更富有效率，但也促使全球市场更加易变。新的技术和新的金融工具的创造加强了市场与市场参与者的相互依赖，不仅限于一国</description><dc:creator>微信公众号</dc:creator><category>金融</category><category>交易</category><category>整理</category><category>期权</category><category>定价</category></item><item><title>Python中常见的内建函数</title><link>https://www.chenshaowen.com/blog/built-in-functions-in-python.html</link><pubDate>Sat, 11 Feb 2017 13:48:34 +0000</pubDate><atom:modified>Sat, 11 Feb 2017 13:48:34 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/built-in-functions-in-python.html</guid><description>函数 描述 abs(number) 返回一个数的绝对值 apply(function[, args[, kwds]]) 调用给定函数，可选择提供参数 all(iterable) 如果所有iterable的元素均为真则返回True, 否则返回False any(iterable) 如果有任一iterable的元素为真则返回True，否则返回False basestring() str和unicode抽象超类，</description><dc:creator>微信公众号</dc:creator><category>Python</category><category>API</category><category>整理</category><category>函数</category></item><item><title>什么是 Quant</title><link>https://www.chenshaowen.com/blog/what-is-the-quant.html</link><pubDate>Fri, 10 Feb 2017 19:23:05 +0000</pubDate><atom:modified>Fri, 10 Feb 2017 19:23:05 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/what-is-the-quant.html</guid><description>1. Quant的工作内容 Quant的工作就是设计并实现金融的数学模型，包括衍生物定价，风险估价或预测市场行为等。 2. Quant的种类 Desk quant，开发直接被交易员使用的价格模型。 优势是接近交易中所遇到的money和机会。劣势是压力很大。 Model validating qu</description><dc:creator>微信公众号</dc:creator><category>金融</category><category>宽客</category><category>整理</category><category>什么是</category></item><item><title>JavaScript 的事件处理机制</title><link>https://www.chenshaowen.com/blog/js-event-handle-mechanism.html</link><pubDate>Tue, 29 Nov 2016 21:45:06 +0000</pubDate><atom:modified>Tue, 29 Nov 2016 21:45:06 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/js-event-handle-mechanism.html</guid><description>1. 事件处理模型：冒泡和捕获型 1 2 3 &amp;lt;div id=&amp;#34;outer&amp;#34;&amp;gt; &amp;lt;p id=&amp;#34;inner&amp;#34;&amp;gt;Click!&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; 上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？ 为了解决这个问题微软和网景提出了两种几乎完全相反的概念。 事件</description><dc:creator>微信公众号</dc:creator><category>前端</category><category>JavaScript</category><category>整理</category><category>事件</category></item><item><title>程序化交易-CTP</title><link>https://www.chenshaowen.com/blog/ctp-101.html</link><pubDate>Wed, 20 Jul 2016 08:55:13 +0000</pubDate><atom:modified>Wed, 20 Jul 2016 08:55:13 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ctp-101.html</guid><description>1. 综合交易平台（CTP）简介 综合交易平台是由上海期货信息技术有限公司以上海期货交易所的交易系统为基础，专门为期货经纪公司而开发的一套期货经纪业务管理系统，整个系统由交易、风险控制(简称为风控)和结算三大系统组成。系统能够同时连通国内四家期货</description><dc:creator>微信公众号</dc:creator><category>程序化交易</category><category>交易平台</category><category>整理</category></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>部署 on 陈少文的网站</title><link>https://www.chenshaowen.com/tags/%E9%83%A8%E7%BD%B2/</link><description>Recent content in 部署 on 陈少文的网站</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2016 - {year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 15 Sep 2018 00:00:00 +0000</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.chenshaowen.com/tags/%E9%83%A8%E7%BD%B2/atom.xml" rel="self" type="application/rss+xml"/><item><title>如何利用 CDN 进一步的前后端分离 - CI 脚本</title><link>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Sat, 15 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/ci-script-of-how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>在团队中，开发流程相关的调整一定要相应的自动化工具配合。如果没有足够低的使用成本，这种调整将会是无意义的，因为根本就不会有人去使用。上一篇，我们提到 如何利用 CDN 进一步的前后端分离 , 这一篇主要讲，如何将这个流程结合到 CI 中。后端的配置，之前的 博客</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category><category>脚本</category><category>DevOps</category></item><item><title>如何利用 CDN 进一步的前后端分离</title><link>https://www.chenshaowen.com/blog/how-to-use-cdn-to-separate-frontend-and-backend-more.html</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><atom:modified>Thu, 13 Sep 2018 00:00:00 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-use-cdn-to-separate-frontend-and-backend-more.html</guid><description>最近在优化一下项目，梳理整个链路之后，开始逐步优化，发现了很多可以改进的点。下面是对开发模式、部署方式的一些思考，希望对你有所启发。 1. 开发背景 1.1 部署方式 如上图，简单描述一下应用的架构。 采用的是经典三层架构，接入层，逻辑层，存储层。其中，接入</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>CI</category><category>优化</category><category>部署</category><category>PaaS</category></item><item><title>怎样打包一个 Python 包，并上传到 PyPi</title><link>https://www.chenshaowen.com/blog/how-to-pack-a-python-package-and-upload-it-to-pypi.html</link><pubDate>Fri, 06 Oct 2017 20:50:41 +0000</pubDate><atom:modified>Fri, 06 Oct 2017 20:50:41 +0000</atom:modified><guid>https://www.chenshaowen.com/blog/how-to-pack-a-python-package-and-upload-it-to-pypi.html</guid><description>最近笔者在思考，怎样提高开发效率。从网络爬虫到数据处理，然后到人工智能。Python 的强大之处在于：拥有一大批开箱即用的工具包，不必重复造轮子，极大地提高了开发的效率。那么为何不将项目中的功能模块化，打包成可复用的 Python 包呢？本文主要讲的是怎样</description><dc:creator>微信公众号</dc:creator><category>博文</category><category>Python</category><category>Django</category><category>部署</category></item></channel></rss>